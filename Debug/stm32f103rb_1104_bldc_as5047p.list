
stm32f103rb_1104_bldc_as5047p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007d08  08007d08  00017d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008154  08008154  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008154  08008154  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008154  08008154  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  08008330  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08008330  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e22a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a1  00000000  00000000  0002e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b93  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a09  00000000  00000000  00031f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f972  00000000  00000000  0004a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e00e  00000000  00000000  0005a2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f98  00000000  00000000  000e8304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  000ed29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cec 	.word	0x08007cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007cec 	.word	0x08007cec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <as5047p_make_handle>:
                           as5047p_spi_read_t spi_read_func,
                           as5047p_spi_deselect_t spi_select_func,
                           as5047p_spi_deselect_t spi_deselect_func,
                           as5047p_delay_t delay_func,
                           as5047p_handle_t *as5047p_handle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  as5047p_handle->spi_send = spi_send_func;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	601a      	str	r2, [r3, #0]
  as5047p_handle->spi_read = spi_read_func;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	605a      	str	r2, [r3, #4]
  as5047p_handle->spi_select = spi_select_func;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
  as5047p_handle->spi_deselect = spi_deselect_func;
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	60da      	str	r2, [r3, #12]
  as5047p_handle->delay = delay_func;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	611a      	str	r2, [r3, #16]
  return 0; /* Success. */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <as5047p_config>:
 * @param settings2 Config 2.
 */
void as5047p_config(const as5047p_handle_t *as5047p_handle,
                    uint8_t settings1,
                    uint8_t settings2)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	70bb      	strb	r3, [r7, #2]
  /* SETTINGS1 bit 0 --> Factory Setting: Pre-Programmed to 1. */
  BIT_MODITY(settings1, 0, 1);
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf0c      	ite	eq
 8001036:	2301      	moveq	r3, #1
 8001038:	2300      	movne	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4053      	eors	r3, r2
 8001042:	70fb      	strb	r3, [r7, #3]

  /* SETTINGS1 bit 1 --> Not Used: Pre-Programmed to 0, must not be overwritten. */
  BIT_MODITY(settings1, 1, 0);
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	f023 0302 	bic.w	r3, r3, #2
 800104a:	70fb      	strb	r3, [r7, #3]

  as5047p_send_data(as5047p_handle, AS5047P_SETTINGS1, (uint16_t)(settings1 & 0x00FF));
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	2118      	movs	r1, #24
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f8c8 	bl	80011ea <as5047p_send_data>
  as5047p_send_data(as5047p_handle, AS5047P_SETTINGS2, (uint16_t)(settings2 & 0x00FF));
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	2119      	movs	r1, #25
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f8c1 	bl	80011ea <as5047p_send_data>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <as5047p_get_position>:
 *         -1: Error occurred.
 */
int8_t as5047p_get_position(const as5047p_handle_t *as5047p_handle,
                            as5047p_daec_t with_daec,
                            uint16_t *position)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	460b      	mov	r3, r1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	72fb      	strb	r3, [r7, #11]
  uint16_t address;
  if (with_daec)
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <as5047p_get_position+0x1c>
  {
    /* Measured angle WITH dynamic angle error compensation(DAEC). */
    address = AS5047P_ANGLECOM;
 8001084:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001088:	82fb      	strh	r3, [r7, #22]
 800108a:	e002      	b.n	8001092 <as5047p_get_position+0x22>
  }
  else
  {
    /* Measured angle WITHOUT dynamic angle error compensation(DAEC). */
    address = AS5047P_ANGLEUNC;
 800108c:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8001090:	82fb      	strh	r3, [r7, #22]
  }

  uint16_t data = as5047p_read_data(as5047p_handle, address);
 8001092:	8afb      	ldrh	r3, [r7, #22]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f8d5 	bl	8001246 <as5047p_read_data>
 800109c:	4603      	mov	r3, r0
 800109e:	82bb      	strh	r3, [r7, #20]
  if (BIT_READ(data, 14) == 0)
 80010a0:	8abb      	ldrh	r3, [r7, #20]
 80010a2:	0b9b      	lsrs	r3, r3, #14
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <as5047p_get_position+0x4e>
  {
    *position = data & 0x3FFF;
 80010ae:	8abb      	ldrh	r3, [r7, #20]
 80010b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	801a      	strh	r2, [r3, #0]
    return 0; /* No error occurred. */
 80010ba:	2300      	movs	r3, #0
 80010bc:	e001      	b.n	80010c2 <as5047p_get_position+0x52>
  }
  return -1; /* Error occurred. */
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <as5047p_get_angle>:
 * @return Status code.
 *         0: Success.
 *         -1: Error occurred.
 */
int8_t as5047p_get_angle(const as5047p_handle_t *as5047p_handle, as5047p_daec_t with_daec, float *angle_degree)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]
  uint16_t raw_position;
  int8_t error = as5047p_get_position(as5047p_handle, with_daec, &raw_position);
 80010da:	f107 0214 	add.w	r2, r7, #20
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	4619      	mov	r1, r3
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff ffc4 	bl	8001070 <as5047p_get_position>
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
  if (error == 0)
 80010ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <as5047p_get_angle+0x4c>
  {
    /* Angle in degree = value * ( 360 / 2^14). */
    *angle_degree = raw_position * (360.0 / 0x4000);
 80010f4:	8abb      	ldrh	r3, [r7, #20]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f984 	bl	8000404 <__aeabi_i2d>
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <as5047p_get_angle+0x58>)
 8001102:	f7ff f9e9 	bl	80004d8 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fcbb 	bl	8000a88 <__aeabi_d2f>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]
  }

  return error;
 8001118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	3f968000 	.word	0x3f968000

08001128 <as5047p_set_zero>:
 *
 * @param as5047p_handle AS5047P handle.
 * @param position Position raw value.
 */
void as5047p_set_zero(const as5047p_handle_t *as5047p_handle, uint16_t position)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
  /* 8 most significant bits of the zero position. */
  as5047p_send_data(as5047p_handle, AS5047P_ZPOSM, ((position >> 6) & 0x00FF));
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	099b      	lsrs	r3, r3, #6
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	2116      	movs	r1, #22
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f851 	bl	80011ea <as5047p_send_data>

  /* 6 least significant bits of the zero position. */
  as5047p_send_data(as5047p_handle, AS5047P_ZPOSL, (position & 0x003F));
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800114e:	b29b      	uxth	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	2117      	movs	r1, #23
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f848 	bl	80011ea <as5047p_send_data>

  as5047p_nop(as5047p_handle);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f804 	bl	8001168 <as5047p_nop>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <as5047p_nop>:
 * @brief No operation instruction.
 *
 * @param as5047p_handle AS5047P handle.
 */
inline void as5047p_nop(const as5047p_handle_t *as5047p_handle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Reading the NOP register is equivalent to a nop (no operation) instruction. */
  as5047p_send_command(as5047p_handle, AS5047P_NOP, OP_READ);
 8001170:	2201      	movs	r2, #1
 8001172:	2100      	movs	r1, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f804 	bl	8001182 <as5047p_send_command>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <as5047p_send_command>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @param op_read_write Read of write opration.
 */
void as5047p_send_command(const as5047p_handle_t *as5047p_handle, uint16_t address, uint8_t op_read_write)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	707b      	strb	r3, [r7, #1]
  uint16_t frame = address & 0x3FFF;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001198:	81fb      	strh	r3, [r7, #14]

  /* R/W: 0 for write, 1 for read. */
  BIT_MODITY(frame, 14, op_read_write);
 800119a:	787b      	ldrb	r3, [r7, #1]
 800119c:	b29b      	uxth	r3, r3
 800119e:	425b      	negs	r3, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a8:	4053      	eors	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	4053      	eors	r3, r2
 80011b8:	81fb      	strh	r3, [r7, #14]

  /* Parity bit(even) calculated on the lower 15 bits. */
  if (!is_even_parity(frame))
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f885 	bl	80012cc <is_even_parity>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d107      	bne.n	80011d8 <as5047p_send_command+0x56>
  {
    BIT_TOGGLE(frame, 15);
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80011ce:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 80011d2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80011d6:	81fb      	strh	r3, [r7, #14]
  }

  as5047p_spi_transmit(as5047p_handle, frame);
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f846 	bl	800126e <as5047p_spi_transmit>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <as5047p_send_data>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @param data Data.
 */
void as5047p_send_data(const as5047p_handle_t *as5047p_handle, uint16_t address, uint16_t data)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
 80011f6:	4613      	mov	r3, r2
 80011f8:	803b      	strh	r3, [r7, #0]
  uint16_t frame = data & 0x3FFF;
 80011fa:	883b      	ldrh	r3, [r7, #0]
 80011fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001200:	81fb      	strh	r3, [r7, #14]

  /* Data frame bit 14 always low(0). */
  BIT_MODITY(frame, 14, 0);
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001208:	81fb      	strh	r3, [r7, #14]

  /* Parity bit(even) calculated on the lower 15 bits. */
  if (!is_even_parity(frame))
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f85d 	bl	80012cc <is_even_parity>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <as5047p_send_data+0x3e>
  {
    BIT_TOGGLE(frame, 15);
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 800121e:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8001222:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8001226:	81fb      	strh	r3, [r7, #14]
  }

  as5047p_send_command(as5047p_handle, address, OP_WRITE);
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa7 	bl	8001182 <as5047p_send_command>
  as5047p_spi_transmit(as5047p_handle, frame);
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f818 	bl	800126e <as5047p_spi_transmit>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <as5047p_read_data>:
 * @param as5047p_handle AS5047P handle.
 * @param address Register address.
 * @return Data.
 */
uint16_t as5047p_read_data(const as5047p_handle_t *as5047p_handle, uint16_t address)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
  as5047p_send_command(as5047p_handle, address, OP_READ);
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	2201      	movs	r2, #1
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff92 	bl	8001182 <as5047p_send_command>
  return as5047p_spi_receive(as5047p_handle);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f81d 	bl	800129e <as5047p_spi_receive>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <as5047p_spi_transmit>:
 *
 * @param as5047p_handle AS5047P handle.
 * @param data Data.
 */
inline void as5047p_spi_transmit(const as5047p_handle_t *as5047p_handle, uint16_t data)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
  as5047p_handle->delay();
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	4798      	blx	r3

  as5047p_handle->spi_select();
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4798      	blx	r3
  as5047p_handle->spi_send(data);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	4610      	mov	r0, r2
 800128e:	4798      	blx	r3
  as5047p_handle->spi_deselect();
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4798      	blx	r3
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <as5047p_spi_receive>:
 *
 * @param as5047p_handle AS5047P handle.
 * @return Received data.
 */
inline uint16_t as5047p_spi_receive(const as5047p_handle_t *as5047p_handle)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  as5047p_handle->delay();
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4798      	blx	r3

  as5047p_handle->spi_select();
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4798      	blx	r3
  uint16_t data = as5047p_handle->spi_read();
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	81fb      	strh	r3, [r7, #14]
  as5047p_handle->spi_deselect();
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4798      	blx	r3

  return data;
 80012c2:	89fb      	ldrh	r3, [r7, #14]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <is_even_parity>:

/**
 * @brief Check data even parity.
 */
uint8_t is_even_parity(uint16_t data)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  uint8_t shift = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
  while (shift < (sizeof(data) * 8))
 80012da:	e00c      	b.n	80012f6 <is_even_parity+0x2a>
  {
    data ^= (data >> shift);
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	fa42 f303 	asr.w	r3, r2, r3
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	4053      	eors	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	80fb      	strh	r3, [r7, #6]
    shift <<= 1;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
  while (shift < (sizeof(data) * 8))
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d9ef      	bls.n	80012dc <is_even_parity+0x10>
  }
  return !(data & 0x1);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <HAL_TIM_IC_CaptureCallback>:
//}

/* Measure Width */
uint32_t usWidth = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7f1b      	ldrb	r3, [r3, #28]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d15c      	bne.n	80013e2 <HAL_TIM_IC_CaptureCallback+0xca>
    if (Is_First_Captured == 0) {
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_TIM_IC_CaptureCallback+0xd4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <HAL_TIM_IC_CaptureCallback+0x2e>
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f003 f91e 	bl	8004574 <HAL_TIM_ReadCapturedValue>
 8001338:	4603      	mov	r3, r0
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800133c:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      __HAL_TIM_SET_COUNTER(htim, 0);
      Is_First_Captured = 0;
    }
  }
}
 8001344:	e04d      	b.n	80013e2 <HAL_TIM_IC_CaptureCallback+0xca>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001346:	2104      	movs	r1, #4
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f003 f913 	bl	8004574 <HAL_TIM_ReadCapturedValue>
 800134e:	4603      	mov	r3, r0
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001352:	6013      	str	r3, [r2, #0]
      if (IC_Val2 > IC_Val1) {
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d907      	bls.n	8001370 <HAL_TIM_IC_CaptureCallback+0x58>
        Difference = IC_Val2 - IC_Val1;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00f      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x78>
      } else if (IC_Val1 > IC_Val2) {
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d909      	bls.n	8001390 <HAL_TIM_IC_CaptureCallback+0x78>
        Difference = (0xFFFF - IC_Val1) + IC_Val2;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800138a:	33ff      	adds	r3, #255	; 0xff
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800138e:	6013      	str	r3, [r2, #0]
      float refClock = HAL_RCC_GetPCLK1Freq();  // ?��??�PCLK1频�??
 8001390:	f001 fd46 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fc7c 	bl	8000c94 <__aeabi_ui2f>
 800139c:	4603      	mov	r3, r0
 800139e:	617b      	str	r3, [r7, #20]
      float mFactor = 1000000 / refClock;
 80013a0:	6979      	ldr	r1, [r7, #20]
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <HAL_TIM_IC_CaptureCallback+0xe4>)
 80013a4:	f7ff fd82 	bl	8000eac <__aeabi_fdiv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]
      float usWidth = Difference * mFactor;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fc6f 	bl	8000c94 <__aeabi_ui2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	6938      	ldr	r0, [r7, #16]
 80013bc:	f7ff fcc2 	bl	8000d44 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
      printf("Pulse Width: %.2f us\r\n", usWidth);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80013d0:	f004 fc9a 	bl	8005d08 <iprintf>
      __HAL_TIM_SET_COUNTER(htim, 0);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
      Is_First_Captured = 0;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_TIM_IC_CaptureCallback+0xd4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000032c 	.word	0x2000032c
 80013f0:	20000320 	.word	0x20000320
 80013f4:	20000324 	.word	0x20000324
 80013f8:	20000328 	.word	0x20000328
 80013fc:	49742400 	.word	0x49742400
 8001400:	08007d08 	.word	0x08007d08

08001404 <as5047p_spi_send.4>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	void as5047p_spi_send(uint16_t data)
	{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	f8c7 c000 	str.w	ip, [r7]
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8001412:	1db9      	adds	r1, r7, #6
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2201      	movs	r2, #1
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <as5047p_spi_send.4+0x24>)
 800141c:	f001 fdca 	bl	8002fb4 <HAL_SPI_Transmit>
	}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f0 	.word	0x200001f0

0800142c <main>:
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b0a1      	sub	sp, #132	; 0x84
 8001430:	af02      	add	r7, sp, #8
int main(void)
 8001432:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001436:	673b      	str	r3, [r7, #112]	; 0x70
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001440:	f107 0520 	add.w	r5, r7, #32
 8001444:	4b65      	ldr	r3, [pc, #404]	; (80015dc <main+0x1b0>)
 8001446:	4626      	mov	r6, r4
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800144e:	60a5      	str	r5, [r4, #8]
 8001450:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <main+0x1b4>)
 8001452:	60e3      	str	r3, [r4, #12]
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800145c:	f107 0520 	add.w	r5, r7, #32
 8001460:	4b5e      	ldr	r3, [pc, #376]	; (80015dc <main+0x1b0>)
 8001462:	4626      	mov	r6, r4
 8001464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001466:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800146a:	60a5      	str	r5, [r4, #8]
 800146c:	4b5d      	ldr	r3, [pc, #372]	; (80015e4 <main+0x1b8>)
 800146e:	60e3      	str	r3, [r4, #12]
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	f103 0420 	add.w	r4, r3, #32
 8001478:	f107 0520 	add.w	r5, r7, #32
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <main+0x1b0>)
 800147e:	4626      	mov	r6, r4
 8001480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001482:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001486:	60a5      	str	r5, [r4, #8]
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <main+0x1bc>)
 800148a:	60e3      	str	r3, [r4, #12]
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	f103 0410 	add.w	r4, r3, #16
 8001494:	f107 0520 	add.w	r5, r7, #32
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <main+0x1b0>)
 800149a:	4626      	mov	r6, r4
 800149c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80014a2:	60a5      	str	r5, [r4, #8]
 80014a4:	4b51      	ldr	r3, [pc, #324]	; (80015ec <main+0x1c0>)
 80014a6:	60e3      	str	r3, [r4, #12]
 80014a8:	f107 0420 	add.w	r4, r7, #32
 80014ac:	f107 0520 	add.w	r5, r7, #32
 80014b0:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <main+0x1b0>)
 80014b2:	4626      	mov	r6, r4
 80014b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80014ba:	60a5      	str	r5, [r4, #8]
 80014bc:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <main+0x1c4>)
 80014be:	60e3      	str	r3, [r4, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fd92 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f8e6 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 fab0 	bl	8001a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 fa84 	bl	80019d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014d0:	f000 f926 	bl	8001720 <MX_SPI1_Init>
  MX_TIM1_Init();
 80014d4:	f000 f95a 	bl	800178c <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d8:	f000 fa04 	bl	80018e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 9999;
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <main+0x1c8>)
 80014de:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 9999;
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <main+0x1c8>)
 80014e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4842      	ldr	r0, [pc, #264]	; (80015f8 <main+0x1cc>)
 80014f0:	f002 fb0c 	bl	8003b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014f4:	2104      	movs	r1, #4
 80014f6:	4840      	ldr	r0, [pc, #256]	; (80015f8 <main+0x1cc>)
 80014f8:	f002 fb08 	bl	8003b0c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	483f      	ldr	r0, [pc, #252]	; (80015fc <main+0x1d0>)
 8001500:	f002 fbfe 	bl	8003d00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001504:	2104      	movs	r1, #4
 8001506:	483d      	ldr	r0, [pc, #244]	; (80015fc <main+0x1d0>)
 8001508:	f002 fbfa 	bl	8003d00 <HAL_TIM_IC_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  printf("------------1104 DUAL BLDC speed control and encoder test--------------------------\r\n");
 800150c:	483c      	ldr	r0, [pc, #240]	; (8001600 <main+0x1d4>)
 800150e:	f004 fc61 	bl	8005dd4 <puts>
  as5047p_handle_t as5047p;

  as5047p_make_handle(&as5047p_spi_send,
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	3340      	adds	r3, #64	; 0x40
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	3330      	adds	r3, #48	; 0x30
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	4619      	mov	r1, r3
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	3320      	adds	r3, #32
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	461c      	mov	r4, r3
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	3310      	adds	r3, #16
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	461d      	mov	r5, r3
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	461a      	mov	r2, r3
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	462b      	mov	r3, r5
 8001556:	4622      	mov	r2, r4
 8001558:	f7ff fd44 	bl	8000fe4 <as5047p_make_handle>
                      &as5047p_spi_select,
                      &as5047p_spi_deselect,
                      &as5047p_delay,
                      &as5047p);

  as5047p_config(&as5047p, 0b00100101, 0b00000000);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	2125      	movs	r1, #37	; 0x25
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd59 	bl	800101c <as5047p_config>
  as5047p_set_zero(&as5047p, 0);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fdd9 	bl	8001128 <as5047p_set_zero>

  printf("\r\nSTM32-AS5047P, Ready\r\n");
 8001576:	4823      	ldr	r0, [pc, #140]	; (8001604 <main+0x1d8>)
 8001578:	f004 fc2c 	bl	8005dd4 <puts>
//	    // ??�印频�??
//	    printf("Frequency: %lu Hz\r\n", frequency);
//
//	    prev_capture = current_capture;
//
	    HAL_Delay(100);  // ?��?��?�延迟�?�可以�?�整
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f000 fd95 	bl	80020ac <HAL_Delay>
	    //	  float angle;
	    //	  as5047p_get_angle(&as5047p, without_daec, &angle);
	    //	  printf("Angle: %3i\r\n", (int)angle);

	    	  float angle_deg;
	    	  int8_t error = as5047p_get_angle(&as5047p, 1, &angle_deg);
 8001582:	f107 0208 	add.w	r2, r7, #8
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fd9d 	bl	80010cc <as5047p_get_angle>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	    	  if (error == 0)
 8001598:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <main+0x186>
	    	  {
	    	      printf("Angle: %f\r\n", angle_deg);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff40 	bl	8000428 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4816      	ldr	r0, [pc, #88]	; (8001608 <main+0x1dc>)
 80015ae:	f004 fbab 	bl	8005d08 <iprintf>
	    	  }

	    	  uint16_t position;
	    	  error = as5047p_get_position(&as5047p, without_daec, &position);
 80015b2:	1dba      	adds	r2, r7, #6
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd58 	bl	8001070 <as5047p_get_position>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	    	  if (error == 0)
 80015c6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1d6      	bne.n	800157c <main+0x150>
	    	  {
	    	      printf("Raw: %5i\r\n", position);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	4619      	mov	r1, r3
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <main+0x1e0>)
 80015d4:	f004 fb98 	bl	8005d08 <iprintf>
  {
 80015d8:	e7d0      	b.n	800157c <main+0x150>
 80015da:	bf00      	nop
 80015dc:	08007d24 	.word	0x08007d24
 80015e0:	08001405 	.word	0x08001405
 80015e4:	08001611 	.word	0x08001611
 80015e8:	0800163d 	.word	0x0800163d
 80015ec:	0800165d 	.word	0x0800165d
 80015f0:	0800167d 	.word	0x0800167d
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	20000248 	.word	0x20000248
 80015fc:	20000290 	.word	0x20000290
 8001600:	08007d34 	.word	0x08007d34
 8001604:	08007d8c 	.word	0x08007d8c
 8001608:	08007da4 	.word	0x08007da4
 800160c:	08007db0 	.word	0x08007db0

08001610 <as5047p_spi_read.3>:
	{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	f8c7 c004 	str.w	ip, [r7, #4]
	  uint16_t data = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	81fb      	strh	r3, [r7, #14]
	  HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 800161e:	f107 010e 	add.w	r1, r7, #14
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	2201      	movs	r2, #1
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <as5047p_spi_read.3+0x28>)
 800162a:	f001 fe06 	bl	800323a <HAL_SPI_Receive>
	  return data;
 800162e:	89fb      	ldrh	r3, [r7, #14]
	}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001f0 	.word	0x200001f0

0800163c <as5047p_spi_select.2>:
	{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2110      	movs	r1, #16
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <as5047p_spi_select.2+0x1c>)
 800164c:	f000 ffe4 	bl	8002618 <HAL_GPIO_WritePin>
	}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010800 	.word	0x40010800

0800165c <as5047p_spi_deselect.1>:
	{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2110      	movs	r1, #16
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <as5047p_spi_deselect.1+0x1c>)
 800166c:	f000 ffd4 	bl	8002618 <HAL_GPIO_WritePin>
	}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010800 	.word	0x40010800

0800167c <as5047p_delay.0>:
	{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_Delay(10);
 8001686:	200a      	movs	r0, #10
 8001688:	f000 fd10 	bl	80020ac <HAL_Delay>
	}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b090      	sub	sp, #64	; 0x40
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2228      	movs	r2, #40	; 0x28
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fc76 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 ffd5 	bl	800268c <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016e8:	f000 fa00 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fa42 	bl	8002b90 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001712:	f000 f9eb 	bl	8001aec <Error_Handler>
  }
}
 8001716:	bf00      	nop
 8001718:	3740      	adds	r7, #64	; 0x40
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2201      	movs	r2, #1
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2230      	movs	r2, #48	; 0x30
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f001 fb9b 	bl	8002eac <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 f9b6 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001f0 	.word	0x200001f0
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	; 0x58
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2220      	movs	r2, #32
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fbe5 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <MX_TIM1_Init+0x150>)
 80017cc:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <MX_TIM1_Init+0x150>)
 80017d2:	2247      	movs	r2, #71	; 0x47
 80017d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <MX_TIM1_Init+0x150>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <MX_TIM1_Init+0x150>)
 80017de:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <MX_TIM1_Init+0x150>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <MX_TIM1_Init+0x150>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <MX_TIM1_Init+0x150>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f6:	4839      	ldr	r0, [pc, #228]	; (80018dc <MX_TIM1_Init+0x150>)
 80017f8:	f002 f8e0 	bl	80039bc <HAL_TIM_Base_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001802:	f000 f973 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001810:	4619      	mov	r1, r3
 8001812:	4832      	ldr	r0, [pc, #200]	; (80018dc <MX_TIM1_Init+0x150>)
 8001814:	f002 fde6 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800181e:	f000 f965 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <MX_TIM1_Init+0x150>)
 8001824:	f002 f919 	bl	8003a5a <HAL_TIM_PWM_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800182e:	f000 f95d 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183e:	4619      	mov	r1, r3
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <MX_TIM1_Init+0x150>)
 8001842:	f003 fab1 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800184c:	f000 f94e 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001850:	2360      	movs	r3, #96	; 0x60
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <MX_TIM1_Init+0x150>)
 8001876:	f002 fcf3 	bl	8004260 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001880:	f000 f934 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_TIM1_Init+0x150>)
 800188e:	f002 fce7 	bl	8004260 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001898:	f000 f928 	bl	8001aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM1_Init+0x150>)
 80018c0:	f003 fad0 	bl	8004e64 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80018ca:	f000 f90f 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM1_Init+0x150>)
 80018d0:	f000 f9f2 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80018d4:	bf00      	nop
 80018d6:	3758      	adds	r7, #88	; 0x58
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000248 	.word	0x20000248
 80018e0:	40012c00 	.word	0x40012c00

080018e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001918:	2247      	movs	r2, #71	; 0x47
 800191a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <MX_TIM2_Init+0xf0>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <MX_TIM2_Init+0xf0>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001936:	4827      	ldr	r0, [pc, #156]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001938:	f002 f840 	bl	80039bc <HAL_TIM_Base_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001942:	f000 f8d3 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4619      	mov	r1, r3
 8001952:	4820      	ldr	r0, [pc, #128]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001954:	f002 fd46 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800195e:	f000 f8c5 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001962:	481c      	ldr	r0, [pc, #112]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001964:	f002 f974 	bl	8003c50 <HAL_TIM_IC_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800196e:	f000 f8bd 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	4814      	ldr	r0, [pc, #80]	; (80019d4 <MX_TIM2_Init+0xf0>)
 8001982:	f003 fa11 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800198c:	f000 f8ae 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001994:	2301      	movs	r3, #1
 8001996:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <MX_TIM2_Init+0xf0>)
 80019a8:	f002 fbbe 	bl	8004128 <HAL_TIM_IC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80019b2:	f000 f89b 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	2204      	movs	r2, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM2_Init+0xf0>)
 80019be:	f002 fbb3 	bl	8004128 <HAL_TIM_IC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80019c8:	f000 f890 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000290 	.word	0x20000290

080019d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART2_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f003 fa8b 	bl	8004f2a <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f867 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002d8 	.word	0x200002d8
 8001a28:	40004400 	.word	0x40004400

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_GPIO_Init+0x90>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_GPIO_Init+0x94>)
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_GPIO_Init+0x98>)
 8001a9e:	f000 fc37 	bl	8002310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2028      	movs	r0, #40	; 0x28
 8001aa8:	f000 fbfb 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aac:	2028      	movs	r0, #40	; 0x28
 8001aae:	f000 fc14 	bl	80022da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	10110000 	.word	0x10110000
 8001ac4:	40011000 	.word	0x40011000

08001ac8 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001ad0:	1d39      	adds	r1, r7, #4
 8001ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <__io_putchar+0x20>)
 8001ada:	f003 fa76 	bl	8004fca <HAL_UART_Transmit>
return ch;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002d8 	.word	0x200002d8

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_MspInit+0x60>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_MspInit+0x60>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d12f      	bne.n	8001bdc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_7;
 8001bac:	23b0      	movs	r3, #176	; 0xb0
 8001bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480b      	ldr	r0, [pc, #44]	; (8001bec <HAL_SPI_MspInit+0x90>)
 8001bc0:	f000 fba6 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_SPI_MspInit+0x90>)
 8001bd8:	f000 fb9a 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010800 	.word	0x40010800

08001bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_TIM_Base_MspInit+0xbc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d10c      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c28:	e03c      	b.n	8001ca4 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c32:	d137      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	4619      	mov	r1, r3
 8001c76:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c78:	f000 fb4a 	bl	8002310 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c90:	f000 fb3e 	bl	8002310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f000 fb02 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9e:	201c      	movs	r0, #28
 8001ca0:	f000 fb1b 	bl	80022da <HAL_NVIC_EnableIRQ>
}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <HAL_TIM_MspPostInit+0x5c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d118      	bne.n	8001d0a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_TIM_MspPostInit+0x60>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_TIM_MspPostInit+0x60>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_TIM_MspPostInit+0x60>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_TIM_MspPostInit+0x64>)
 8001d06:	f000 fb03 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40012c00 	.word	0x40012c00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010800 	.word	0x40010800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x70>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d123      	bne.n	8001d88 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_UART_MspInit+0x74>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d70:	230c      	movs	r3, #12
 8001d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_UART_MspInit+0x78>)
 8001d84:	f000 fac4 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da0:	e7fe      	b.n	8001da0 <NMI_Handler+0x4>

08001da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler+0x4>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de2:	f000 f947 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM2_IRQHandler+0x10>)
 8001df2:	f002 f891 	bl	8003f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000290 	.word	0x20000290

08001e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e08:	f000 fc1e 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <_kill>:

int _kill(int pid, int sig)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e28:	f004 f906 	bl	8006038 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2216      	movs	r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_exit>:

void _exit (int status)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e46:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffe7 	bl	8001e1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e50:	e7fe      	b.n	8001e50 <_exit+0x12>

08001e52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e00a      	b.n	8001e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e64:	f3af 8000 	nop.w
 8001e68:	4601      	mov	r1, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	60ba      	str	r2, [r7, #8]
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbf0      	blt.n	8001e64 <_read+0x12>
  }

  return len;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e009      	b.n	8001eb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe0e 	bl	8001ac8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf1      	blt.n	8001e9e <_write+0x12>
  }
  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_close>:

int _close(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eea:	605a      	str	r2, [r3, #4]
  return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <_isatty>:

int _isatty(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f004 f870 	bl	8006038 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20005000 	.word	0x20005000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000330 	.word	0x20000330
 8001f8c:	20000488 	.word	0x20000488

08001f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f9c:	f7ff fff8 	bl	8001f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fa2:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb8:	4c09      	ldr	r4, [pc, #36]	; (8001fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f004 f83d 	bl	8006044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fca:	f7ff fa2f 	bl	800142c <main>
  bx lr
 8001fce:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001fd8:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 8001fdc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fe0:	20000484 	.word	0x20000484

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f947 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fd78 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f95f 	bl	80022f6 <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 f927 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000
 800206c:	20000008 	.word	0x20000008
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_IncTick+0x20>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	20000008 	.word	0x20000008
 8002094:	20000334 	.word	0x20000334

08002098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000334 	.word	0x20000334

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fff0 	bl	8002098 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffe0 	bl	8002098 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <__NVIC_EnableIRQ+0x34>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff90 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff2d 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff42 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff90 	bl	80021e4 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5f 	bl	8002190 <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff35 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e169      	b.n	80025f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8158 	bne.w	80025f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a9a      	ldr	r2, [pc, #616]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800234c:	4a98      	ldr	r2, [pc, #608]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d875      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002352:	4a98      	ldr	r2, [pc, #608]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d058      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002358:	4a96      	ldr	r2, [pc, #600]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d86f      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800235e:	4a96      	ldr	r2, [pc, #600]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d052      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002364:	4a94      	ldr	r2, [pc, #592]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d869      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800236a:	4a94      	ldr	r2, [pc, #592]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04c      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002370:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d863      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002376:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d046      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800237c:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d85d      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d82a      	bhi.n	80023dc <HAL_GPIO_Init+0xcc>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d859      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_GPIO_Init+0x80>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240b 	.word	0x0800240b
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023f7 	.word	0x080023f7
 800239c:	08002439 	.word	0x08002439
 80023a0:	0800243f 	.word	0x0800243f
 80023a4:	0800243f 	.word	0x0800243f
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	0800243f 	.word	0x0800243f
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	0800243f 	.word	0x0800243f
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800243f 	.word	0x0800243f
 80023c0:	0800243f 	.word	0x0800243f
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	0800243f 	.word	0x0800243f
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	0800243f 	.word	0x0800243f
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	08002401 	.word	0x08002401
 80023dc:	4a79      	ldr	r2, [pc, #484]	; (80025c4 <HAL_GPIO_Init+0x2b4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e2:	e02c      	b.n	800243e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e029      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	3308      	adds	r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e01f      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e01a      	b.n	8002440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2304      	movs	r3, #4
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e013      	b.n	8002440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	611a      	str	r2, [r3, #16]
          break;
 800242a:	e009      	b.n	8002440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
          break;
 8002436:	e003      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x130>
          break;
 800243e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d801      	bhi.n	800244a <HAL_GPIO_Init+0x13a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <HAL_GPIO_Init+0x13e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d802      	bhi.n	800245c <HAL_GPIO_Init+0x14c>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x152>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	3b08      	subs	r3, #8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	210f      	movs	r1, #15
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80b1 	beq.w	80025f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002490:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a4c      	ldr	r2, [pc, #304]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a8:	4a48      	ldr	r2, [pc, #288]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <HAL_GPIO_Init+0x2c0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_GPIO_Init+0x1ec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3f      	ldr	r2, [pc, #252]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_Init+0x1e8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3e      	ldr	r2, [pc, #248]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0x1e4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <HAL_GPIO_Init+0x2cc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_Init+0x1e0>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e006      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e004      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_GPIO_Init+0x1ee>
 80024fc:	2300      	movs	r3, #0
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	f002 0203 	and.w	r2, r2, #3
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	4093      	lsls	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800250e:	492f      	ldr	r1, [pc, #188]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	492c      	ldr	r1, [pc, #176]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4922      	ldr	r1, [pc, #136]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	491e      	ldr	r1, [pc, #120]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002568:	4013      	ands	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4918      	ldr	r1, [pc, #96]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	43db      	mvns	r3, r3
 800258e:	4914      	ldr	r1, [pc, #80]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002590:	4013      	ands	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d021      	beq.n	80025e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e021      	b.n	80025f2 <HAL_GPIO_Init+0x2e2>
 80025ae:	bf00      	nop
 80025b0:	10320000 	.word	0x10320000
 80025b4:	10310000 	.word	0x10310000
 80025b8:	10220000 	.word	0x10220000
 80025bc:	10210000 	.word	0x10210000
 80025c0:	10120000 	.word	0x10120000
 80025c4:	10110000 	.word	0x10110000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40010800 	.word	0x40010800
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40011400 	.word	0x40011400
 80025e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	4909      	ldr	r1, [pc, #36]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae8e 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	372c      	adds	r7, #44	; 0x2c
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f806 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e272      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8087 	beq.w	80027ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ac:	4b92      	ldr	r3, [pc, #584]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b8:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d112      	bne.n	80026ea <HAL_RCC_OscConfig+0x5e>
 80026c4:	4b8c      	ldr	r3, [pc, #560]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d10b      	bne.n	80026ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d2:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d06c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x12c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d168      	bne.n	80027b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e24c      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x76>
 80026f4:	4b80      	ldr	r3, [pc, #512]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7f      	ldr	r2, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b78      	ldr	r3, [pc, #480]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0xbc>
 800272e:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a71      	ldr	r2, [pc, #452]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002748:	4b6b      	ldr	r3, [pc, #428]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6a      	ldr	r2, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff fc96 	bl	8002098 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff fc92 	bl	8002098 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e200      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xe4>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fc82 	bl	8002098 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7ff fc7e 	bl	8002098 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1ec      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x10c>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027d2:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x18c>
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x176>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1c0      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4939      	ldr	r1, [pc, #228]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e03a      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7ff fc37 	bl	8002098 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7ff fc33 	bl	8002098 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1a1      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4927      	ldr	r1, [pc, #156]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7ff fc16 	bl	8002098 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002870:	f7ff fc12 	bl	8002098 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e180      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03a      	beq.n	8002910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d019      	beq.n	80028d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7ff fbf6 	bl	8002098 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff fbf2 	bl	8002098 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e160      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f000 face 	bl	8002e70 <RCC_Delay>
 80028d4:	e01c      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7ff fbdc 	bl	8002098 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff fbd8 	bl	8002098 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d908      	bls.n	8002904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e146      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	42420000 	.word	0x42420000
 8002900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e9      	bne.n	80028e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a6 	beq.w	8002a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a87      	ldr	r2, [pc, #540]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x4c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x4c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7e      	ldr	r2, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x4c8>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7ff fb99 	bl	8002098 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7ff fb95 	bl	8002098 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e103      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b75      	ldr	r3, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x4c8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x312>
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e02d      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029a6:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6213      	str	r3, [r2, #32]
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	e01c      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d10c      	bne.n	80029e2 <HAL_RCC_OscConfig+0x356>
 80029c8:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a60      	ldr	r2, [pc, #384]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6213      	str	r3, [r2, #32]
 80029d4:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6213      	str	r3, [r2, #32]
 80029e0:	e00b      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d015      	beq.n	8002a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7ff fb49 	bl	8002098 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff fb45 	bl	8002098 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0b1      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCC_OscConfig+0x37e>
 8002a2c:	e014      	b.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fb33 	bl	8002098 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff fb2f 	bl	8002098 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e09b      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ee      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8087 	beq.w	8002b82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d061      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d146      	bne.n	8002b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fb03 	bl	8002098 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff faff 	bl	8002098 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e06d      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4921      	ldr	r1, [pc, #132]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a19      	ldr	r1, [r3, #32]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	491b      	ldr	r1, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7ff fad3 	bl	8002098 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7ff facf 	bl	8002098 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e03d      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x46a>
 8002b14:	e035      	b.n	8002b82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_OscConfig+0x4cc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fabc 	bl	8002098 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7ff fab8 	bl	8002098 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e026      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x498>
 8002b42:	e01e      	b.n	8002b82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e019      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_OscConfig+0x500>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0d0      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4965      	ldr	r1, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d040      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e073      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06b      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4936      	ldr	r1, [pc, #216]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7ff fa0a 	bl	8002098 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7ff fa06 	bl	8002098 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e053      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d210      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4922      	ldr	r1, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1cc>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1d0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f968 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08007dbc 	.word	0x08007dbc
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x30>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x36>
 8002d92:	e027      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d96:	613b      	str	r3, [r7, #16]
      break;
 8002d98:	e027      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0c9b      	lsrs	r3, r3, #18
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	0c5b      	lsrs	r3, r3, #17
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc6:	fb03 f202 	mul.w	r2, r3, r2
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e004      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	613b      	str	r3, [r7, #16]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002de6:	613b      	str	r3, [r7, #16]
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	693b      	ldr	r3, [r7, #16]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	08007dd4 	.word	0x08007dd4
 8002e04:	08007de4 	.word	0x08007de4
 8002e08:	003d0900 	.word	0x003d0900

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000000 	.word	0x20000000

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e24:	f7ff fff2 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4903      	ldr	r1, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08007dcc 	.word	0x08007dcc

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0adb      	lsrs	r3, r3, #11
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08007dcc 	.word	0x08007dcc

08002e70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <RCC_Delay+0x34>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <RCC_Delay+0x38>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0a5b      	lsrs	r3, r3, #9
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e8c:	bf00      	nop
  }
  while (Delay --);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e5a      	subs	r2, r3, #1
 8002e92:	60fa      	str	r2, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <RCC_Delay+0x1c>
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	10624dd3 	.word	0x10624dd3

08002eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e076      	b.n	8002fac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ece:	d009      	beq.n	8002ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
 8002ed6:	e005      	b.n	8002ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fe2c 	bl	8001b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	ea42 0103 	orr.w	r1, r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	0c1a      	lsrs	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f002 0204 	and.w	r2, r2, #4
 8002f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_SPI_Transmit+0x22>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e12d      	b.n	8003232 <HAL_SPI_Transmit+0x27e>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fde:	f7ff f85b 	bl	8002098 <HAL_GetTick>
 8002fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ff8:	e116      	b.n	8003228 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x52>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800300a:	e10d      	b.n	8003228 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003052:	d10f      	bne.n	8003074 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d007      	beq.n	8003092 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309a:	d14f      	bne.n	800313c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit+0xf6>
 80030a4:	8afb      	ldrh	r3, [r7, #22]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d142      	bne.n	8003130 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ce:	e02f      	b.n	8003130 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d112      	bne.n	8003104 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	1c9a      	adds	r2, r3, #2
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	86da      	strh	r2, [r3, #54]	; 0x36
 8003102:	e015      	b.n	8003130 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003104:	f7fe ffc8 	bl	8002098 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_Transmit+0x168>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_Transmit+0x16e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800312e:	e07b      	b.n	8003228 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ca      	bne.n	80030d0 <HAL_SPI_Transmit+0x11c>
 800313a:	e050      	b.n	80031de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_Transmit+0x196>
 8003144:	8afb      	ldrh	r3, [r7, #22]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d144      	bne.n	80031d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003170:	e030      	b.n	80031d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d113      	bne.n	80031a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a6:	e015      	b.n	80031d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a8:	f7fe ff76 	bl	8002098 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d803      	bhi.n	80031c0 <HAL_SPI_Transmit+0x20c>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x212>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031d2:	e029      	b.n	8003228 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1c9      	bne.n	8003172 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fbcc 	bl	8003980 <SPI_EndRxTxTransaction>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e003      	b.n	8003228 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003230:	7ffb      	ldrb	r3, [r7, #31]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b088      	sub	sp, #32
 800323e:	af02      	add	r7, sp, #8
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800325e:	e0fb      	b.n	8003458 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003268:	d112      	bne.n	8003290 <HAL_SPI_Receive+0x56>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2204      	movs	r2, #4
 8003276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f8ef 	bl	800346a <HAL_SPI_TransmitReceive>
 800328c:	4603      	mov	r3, r0
 800328e:	e0e8      	b.n	8003462 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_SPI_Receive+0x64>
 800329a:	2302      	movs	r3, #2
 800329c:	e0e1      	b.n	8003462 <HAL_SPI_Receive+0x228>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a6:	f7fe fef7 	bl	8002098 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Receive+0x7e>
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032bc:	e0cc      	b.n	8003458 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2204      	movs	r2, #4
 80032c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	d10f      	bne.n	8003326 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d007      	beq.n	8003344 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003342:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d16a      	bne.n	8003422 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800334c:	e032      	b.n	80033b4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d115      	bne.n	8003388 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f103 020c 	add.w	r2, r3, #12
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003386:	e015      	b.n	80033b4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003388:	f7fe fe86 	bl	8002098 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d803      	bhi.n	80033a0 <HAL_SPI_Receive+0x166>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d102      	bne.n	80033a6 <HAL_SPI_Receive+0x16c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033b2:	e051      	b.n	8003458 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1c7      	bne.n	800334e <HAL_SPI_Receive+0x114>
 80033be:	e035      	b.n	800342c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d113      	bne.n	80033f6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	b292      	uxth	r2, r2
 80033da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033f4:	e015      	b.n	8003422 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fe fe4f 	bl	8002098 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Receive+0x1d4>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Receive+0x1da>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003420:	e01a      	b.n	8003458 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1c9      	bne.n	80033c0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fa53 	bl	80038dc <SPI_EndRxTransaction>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e003      	b.n	8003458 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08c      	sub	sp, #48	; 0x30
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003478:	2301      	movs	r3, #1
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x26>
 800348c:	2302      	movs	r3, #2
 800348e:	e198      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x358>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003498:	f7fe fdfe 	bl	8002098 <HAL_GetTick>
 800349c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d00f      	beq.n	80034da <HAL_SPI_TransmitReceive+0x70>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c0:	d107      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x68>
 80034ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d003      	beq.n	80034da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034d8:	e16d      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x82>
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034f2:	e160      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d003      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2205      	movs	r2, #5
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	887a      	ldrh	r2, [r7, #2]
 800351e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	887a      	ldrh	r2, [r7, #2]
 800352a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d007      	beq.n	800355c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003564:	d17c      	bne.n	8003660 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x10a>
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d16a      	bne.n	800364a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	881a      	ldrh	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003598:	e057      	b.n	800364a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d11b      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x176>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x176>
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d113      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d119      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x1b8>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d014      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	b292      	uxth	r2, r2
 8003604:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	1c9a      	adds	r2, r3, #2
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800361e:	2301      	movs	r3, #1
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003622:	f7fe fd39 	bl	8002098 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362e:	429a      	cmp	r2, r3
 8003630:	d80b      	bhi.n	800364a <HAL_SPI_TransmitReceive+0x1e0>
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d007      	beq.n	800364a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003648:	e0b5      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1a2      	bne.n	800359a <HAL_SPI_TransmitReceive+0x130>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d19d      	bne.n	800359a <HAL_SPI_TransmitReceive+0x130>
 800365e:	e080      	b.n	8003762 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_SPI_TransmitReceive+0x204>
 8003668:	8b7b      	ldrh	r3, [r7, #26]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d16f      	bne.n	800374e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003694:	e05b      	b.n	800374e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d11c      	bne.n	80036de <HAL_SPI_TransmitReceive+0x274>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_SPI_TransmitReceive+0x274>
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d114      	bne.n	80036de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d119      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x2b6>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d014      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003720:	f7fe fcba 	bl	8002098 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800372c:	429a      	cmp	r2, r3
 800372e:	d803      	bhi.n	8003738 <HAL_SPI_TransmitReceive+0x2ce>
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d102      	bne.n	800373e <HAL_SPI_TransmitReceive+0x2d4>
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800374c:	e033      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d19e      	bne.n	8003696 <HAL_SPI_TransmitReceive+0x22c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d199      	bne.n	8003696 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f90a 	bl	8003980 <SPI_EndRxTxTransaction>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800377e:	e01a      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ac:	e003      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3730      	adds	r7, #48	; 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037dc:	f7fe fc5c 	bl	8002098 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037ec:	f7fe fc54 	bl	8002098 <HAL_GetTick>
 80037f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	015b      	lsls	r3, r3, #5
 80037f8:	0d1b      	lsrs	r3, r3, #20
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003802:	e054      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d050      	beq.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800380c:	f7fe fc44 	bl	8002098 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	429a      	cmp	r2, r3
 800381a:	d902      	bls.n	8003822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d13d      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800383a:	d111      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d004      	beq.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d107      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003868:	d10f      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e017      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d19b      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000

080038dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f0:	d111      	bne.n	8003916 <SPI_EndRxTransaction+0x3a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d004      	beq.n	8003906 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d107      	bne.n	8003916 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003914:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391e:	d117      	bne.n	8003950 <SPI_EndRxTransaction+0x74>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d112      	bne.n	8003950 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	2101      	movs	r1, #1
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff ff49 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e013      	b.n	8003978 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff ff36 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e000      	b.n	8003978 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff18 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e000      	b.n	80039b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe f904 	bl	8001bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fe22 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e041      	b.n	8003af0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f839 	bl	8003af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f000 fdd3 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x24>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e022      	b.n	8003b76 <HAL_TIM_PWM_Start+0x6a>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d109      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x3e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	bf14      	ite	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	2300      	moveq	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e015      	b.n	8003b76 <HAL_TIM_PWM_Start+0x6a>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_PWM_Start+0x58>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e008      	b.n	8003b76 <HAL_TIM_PWM_Start+0x6a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e05e      	b.n	8003c3c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x82>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	e013      	b.n	8003bb6 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Start+0x92>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9c:	e00b      	b.n	8003bb6 <HAL_TIM_PWM_Start+0xaa>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Start+0xa2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	e003      	b.n	8003bb6 <HAL_TIM_PWM_Start+0xaa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f8cd 	bl	8004d5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_TIM_PWM_Start+0x138>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d107      	bne.n	8003bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_TIM_PWM_Start+0x138>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIM_PWM_Start+0xfa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_PWM_Start+0xfa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_TIM_PWM_Start+0x13c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_PWM_Start+0xfa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <HAL_TIM_PWM_Start+0x140>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d111      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d010      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	e007      	b.n	8003c3a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800

08003c50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f839 	bl	8003cee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fcd8 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0x1e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e013      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x46>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0x2e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e00b      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x46>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start_IT+0x3e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e003      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x46>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <HAL_TIM_IC_Start_IT+0x58>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e013      	b.n	8003d80 <HAL_TIM_IC_Start_IT+0x80>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d104      	bne.n	8003d68 <HAL_TIM_IC_Start_IT+0x68>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e00b      	b.n	8003d80 <HAL_TIM_IC_Start_IT+0x80>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d104      	bne.n	8003d78 <HAL_TIM_IC_Start_IT+0x78>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e003      	b.n	8003d80 <HAL_TIM_IC_Start_IT+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d88:	7b7b      	ldrb	r3, [r7, #13]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0b8      	b.n	8003f04 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start_IT+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da0:	e013      	b.n	8003dca <HAL_TIM_IC_Start_IT+0xca>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_IC_Start_IT+0xb2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_IC_Start_IT+0xca>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_IC_Start_IT+0xc2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_IC_Start_IT+0xca>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0xda>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd8:	e013      	b.n	8003e02 <HAL_TIM_IC_Start_IT+0x102>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_IC_Start_IT+0xea>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de8:	e00b      	b.n	8003e02 <HAL_TIM_IC_Start_IT+0x102>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_IC_Start_IT+0xfa>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	e003      	b.n	8003e02 <HAL_TIM_IC_Start_IT+0x102>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d841      	bhi.n	8003e8c <HAL_TIM_IC_Start_IT+0x18c>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_TIM_IC_Start_IT+0x110>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e8d 	.word	0x08003e8d
 8003e18:	08003e8d 	.word	0x08003e8d
 8003e1c:	08003e8d 	.word	0x08003e8d
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e8d 	.word	0x08003e8d
 8003e28:	08003e8d 	.word	0x08003e8d
 8003e2c:	08003e8d 	.word	0x08003e8d
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003e8d 	.word	0x08003e8d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e7b 	.word	0x08003e7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0202 	orr.w	r2, r2, #2
 8003e52:	60da      	str	r2, [r3, #12]
      break;
 8003e54:	e01d      	b.n	8003e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	60da      	str	r2, [r3, #12]
      break;
 8003e66:	e014      	b.n	8003e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0208 	orr.w	r2, r2, #8
 8003e76:	60da      	str	r2, [r3, #12]
      break;
 8003e78:	e00b      	b.n	8003e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0210 	orr.w	r2, r2, #16
 8003e88:	60da      	str	r2, [r3, #12]
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e90:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d134      	bne.n	8003f02 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	6839      	ldr	r1, [r7, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 ff5c 	bl	8004d5e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIM_IC_Start_IT+0x20c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_IC_Start_IT+0x1ce>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_IC_Start_IT+0x1ce>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_TIM_IC_Start_IT+0x210>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_IC_Start_IT+0x1ce>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <HAL_TIM_IC_Start_IT+0x214>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d010      	beq.n	8003f02 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	e007      	b.n	8003f02 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800

08003f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0202 	mvn.w	r2, #2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd f9dc 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fb53 	bl	800460e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb59 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0204 	mvn.w	r2, #4
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd f9b2 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fb29 	bl	800460e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb2f 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0208 	mvn.w	r2, #8
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd f988 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 faff 	bl	800460e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb05 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0210 	mvn.w	r2, #16
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2208      	movs	r2, #8
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd f95e 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fad5 	bl	800460e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fadb 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0201 	mvn.w	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fab0 	bl	80045fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 ff28 	bl	8004f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa9f 	bl	8004632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0220 	mvn.w	r2, #32
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fef3 	bl	8004f06 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004142:	2302      	movs	r3, #2
 8004144:	e088      	b.n	8004258 <HAL_TIM_IC_ConfigChannel+0x130>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004164:	f000 fc58 	bl	8004a18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 020c 	bic.w	r2, r2, #12
 8004176:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6999      	ldr	r1, [r3, #24]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	619a      	str	r2, [r3, #24]
 800418a:	e060      	b.n	800424e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d11c      	bne.n	80041cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80041a2:	f000 fcc1 	bl	8004b28 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6999      	ldr	r1, [r3, #24]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
 80041ca:	e040      	b.n	800424e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11b      	bne.n	800420a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041e2:	f000 fd0c 	bl	8004bfe <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 020c 	bic.w	r2, r2, #12
 80041f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	61da      	str	r2, [r3, #28]
 8004208:	e021      	b.n	800424e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d11c      	bne.n	800424a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004220:	f000 fd28 	bl	8004c74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004232:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69d9      	ldr	r1, [r3, #28]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	021a      	lsls	r2, r3, #8
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
 8004248:	e001      	b.n	800424e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800427a:	2302      	movs	r3, #2
 800427c:	e0ae      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	f200 809f 	bhi.w	80043cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080043cd 	.word	0x080043cd
 800429c:	080043cd 	.word	0x080043cd
 80042a0:	080043cd 	.word	0x080043cd
 80042a4:	08004309 	.word	0x08004309
 80042a8:	080043cd 	.word	0x080043cd
 80042ac:	080043cd 	.word	0x080043cd
 80042b0:	080043cd 	.word	0x080043cd
 80042b4:	0800434b 	.word	0x0800434b
 80042b8:	080043cd 	.word	0x080043cd
 80042bc:	080043cd 	.word	0x080043cd
 80042c0:	080043cd 	.word	0x080043cd
 80042c4:	0800438b 	.word	0x0800438b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa1a 	bl	8004708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0204 	bic.w	r2, r2, #4
 80042f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	619a      	str	r2, [r3, #24]
      break;
 8004306:	e064      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa60 	bl	80047d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6999      	ldr	r1, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	021a      	lsls	r2, r3, #8
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	619a      	str	r2, [r3, #24]
      break;
 8004348:	e043      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 faa9 	bl	80048a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0208 	orr.w	r2, r2, #8
 8004364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0204 	bic.w	r2, r2, #4
 8004374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	61da      	str	r2, [r3, #28]
      break;
 8004388:	e023      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 faf3 	bl	800497c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69d9      	ldr	r1, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	021a      	lsls	r2, r3, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	61da      	str	r2, [r3, #28]
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIM_ConfigClockSource+0x1c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e0b4      	b.n	800456a <HAL_TIM_ConfigClockSource+0x186>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800441e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004438:	d03e      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0xd4>
 800443a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443e:	f200 8087 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	f000 8086 	beq.w	8004556 <HAL_TIM_ConfigClockSource+0x172>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	d87f      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d01a      	beq.n	800448a <HAL_TIM_ConfigClockSource+0xa6>
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d87b      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b60      	cmp	r3, #96	; 0x60
 800445a:	d050      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x11a>
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d877      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b50      	cmp	r3, #80	; 0x50
 8004462:	d03c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0xfa>
 8004464:	2b50      	cmp	r3, #80	; 0x50
 8004466:	d873      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d058      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x13a>
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d86f      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b30      	cmp	r3, #48	; 0x30
 8004472:	d064      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x15a>
 8004474:	2b30      	cmp	r3, #48	; 0x30
 8004476:	d86b      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b20      	cmp	r3, #32
 800447a:	d060      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x15a>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d867      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05c      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	2b10      	cmp	r3, #16
 8004486:	d05a      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	e062      	b.n	8004550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800449a:	f000 fc41 	bl	8004d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	609a      	str	r2, [r3, #8]
      break;
 80044b6:	e04f      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c8:	f000 fc2a 	bl	8004d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044da:	609a      	str	r2, [r3, #8]
      break;
 80044dc:	e03c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 faee 	bl	8004acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2150      	movs	r1, #80	; 0x50
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fbf8 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 80044fc:	e02c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fb48 	bl	8004ba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2160      	movs	r1, #96	; 0x60
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fbe8 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 800451c:	e01c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	461a      	mov	r2, r3
 800452c:	f000 face 	bl	8004acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2140      	movs	r1, #64	; 0x40
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fbd8 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 800453c:	e00c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f000 fbcf 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 800454e:	e003      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      break;
 8004554:	e000      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d831      	bhi.n	80045ec <HAL_TIM_ReadCapturedValue+0x78>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <HAL_TIM_ReadCapturedValue+0x1c>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080045ed 	.word	0x080045ed
 8004598:	080045ed 	.word	0x080045ed
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045cf 	.word	0x080045cf
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045e3 	.word	0x080045e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	60fb      	str	r3, [r7, #12]

      break;
 80045cc:	e00f      	b.n	80045ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	60fb      	str	r3, [r7, #12]

      break;
 80045d6:	e00a      	b.n	80045ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	60fb      	str	r3, [r7, #12]

      break;
 80045e0:	e005      	b.n	80045ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	60fb      	str	r3, [r7, #12]

      break;
 80045ea:	e000      	b.n	80045ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045ec:	bf00      	nop
  }

  return tmpreg;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a07      	ldr	r2, [pc, #28]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800

08004708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f023 0201 	bic.w	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 0302 	bic.w	r3, r3, #2
 8004750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <TIM_OC1_SetConfig+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0308 	bic.w	r3, r3, #8
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <TIM_OC1_SetConfig+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d111      	bne.n	80047aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00

080047d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 0210 	bic.w	r2, r3, #16
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_OC2_SetConfig+0xd0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10d      	bne.n	8004850 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <TIM_OC2_SetConfig+0xd0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d113      	bne.n	8004880 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <TIM_OC3_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10d      	bne.n	8004922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <TIM_OC3_SetConfig+0xd0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d113      	bne.n	8004952 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00

0800497c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	031b      	lsls	r3, r3, #12
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <TIM_OC4_SetConfig+0x98>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d109      	bne.n	80049f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00

08004a18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f023 0201 	bic.w	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <TIM_TI1_SetConfig+0xa8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_TI1_SetConfig+0x46>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d007      	beq.n	8004a5e <TIM_TI1_SetConfig+0x46>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_TI1_SetConfig+0xac>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_TI1_SetConfig+0x46>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <TIM_TI1_SetConfig+0xb0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <TIM_TI1_SetConfig+0x4a>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <TIM_TI1_SetConfig+0x4c>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e003      	b.n	8004a82 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f023 030a 	bic.w	r3, r3, #10
 8004a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 030a 	and.w	r3, r3, #10
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800

08004acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 030a 	bic.w	r3, r3, #10
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0210 	bic.w	r2, r3, #16
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	031b      	lsls	r3, r3, #12
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	031b      	lsls	r3, r3, #12
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f043 0307 	orr.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2201      	movs	r2, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	401a      	ands	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e046      	b.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10c      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800

08004e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e03d      	b.n	8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e042      	b.n	8004fc2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fc fee5 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2224      	movs	r2, #36	; 0x24
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f91c 	bl	80051ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08a      	sub	sp, #40	; 0x28
 8004fce:	af02      	add	r7, sp, #8
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d16d      	bne.n	80050c6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_UART_Transmit+0x2c>
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e066      	b.n	80050c8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005008:	f7fd f846 	bl	8002098 <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005022:	d108      	bne.n	8005036 <HAL_UART_Transmit+0x6c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e003      	b.n	800503e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800503e:	e02a      	b.n	8005096 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2200      	movs	r2, #0
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f840 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e036      	b.n	80050c8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	3302      	adds	r3, #2
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e007      	b.n	8005088 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1cf      	bne.n	8005040 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2140      	movs	r1, #64	; 0x40
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f810 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b090      	sub	sp, #64	; 0x40
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	e050      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d04c      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
 80050f0:	f7fc ffd2 	bl	8002098 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d241      	bcs.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005120:	637a      	str	r2, [r7, #52]	; 0x34
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3314      	adds	r3, #20
 800513a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005154:	623a      	str	r2, [r7, #32]
 8005156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	61bb      	str	r3, [r7, #24]
   return(result);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e5      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e00f      	b.n	80051a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d09f      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3740      	adds	r7, #64	; 0x40
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051e6:	f023 030c 	bic.w	r3, r3, #12
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <UART_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fd fe18 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	e002      	b.n	8005222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fd fe00 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8005220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009a      	lsls	r2, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <UART_SetConfig+0x118>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	0119      	lsls	r1, r3, #4
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009a      	lsls	r2, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fbb2 f2f3 	udiv	r2, r2, r3
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <UART_SetConfig+0x118>)
 800525a:	fba3 0302 	umull	r0, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2064      	movs	r0, #100	; 0x64
 8005262:	fb00 f303 	mul.w	r3, r0, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	3332      	adds	r3, #50	; 0x32
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <UART_SetConfig+0x118>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005278:	4419      	add	r1, r3
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009a      	lsls	r2, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <UART_SetConfig+0x118>)
 8005292:	fba3 0302 	umull	r0, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2064      	movs	r0, #100	; 0x64
 800529a:	fb00 f303 	mul.w	r3, r0, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	3332      	adds	r3, #50	; 0x32
 80052a4:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <UART_SetConfig+0x118>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f003 020f 	and.w	r2, r3, #15
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	440a      	add	r2, r1
 80052b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40013800 	.word	0x40013800
 80052c4:	51eb851f 	.word	0x51eb851f

080052c8 <__cvt>:
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ce:	461f      	mov	r7, r3
 80052d0:	bfbb      	ittet	lt
 80052d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	461f      	movlt	r7, r3
 80052d8:	2300      	movge	r3, #0
 80052da:	232d      	movlt	r3, #45	; 0x2d
 80052dc:	b088      	sub	sp, #32
 80052de:	4614      	mov	r4, r2
 80052e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80052e4:	7013      	strb	r3, [r2, #0]
 80052e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80052ec:	f023 0820 	bic.w	r8, r3, #32
 80052f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052f4:	d005      	beq.n	8005302 <__cvt+0x3a>
 80052f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052fa:	d100      	bne.n	80052fe <__cvt+0x36>
 80052fc:	3501      	adds	r5, #1
 80052fe:	2302      	movs	r3, #2
 8005300:	e000      	b.n	8005304 <__cvt+0x3c>
 8005302:	2303      	movs	r3, #3
 8005304:	aa07      	add	r2, sp, #28
 8005306:	9204      	str	r2, [sp, #16]
 8005308:	aa06      	add	r2, sp, #24
 800530a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800530e:	e9cd 3500 	strd	r3, r5, [sp]
 8005312:	4622      	mov	r2, r4
 8005314:	463b      	mov	r3, r7
 8005316:	f000 ff53 	bl	80061c0 <_dtoa_r>
 800531a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800531e:	4606      	mov	r6, r0
 8005320:	d102      	bne.n	8005328 <__cvt+0x60>
 8005322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005324:	07db      	lsls	r3, r3, #31
 8005326:	d522      	bpl.n	800536e <__cvt+0xa6>
 8005328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800532c:	eb06 0905 	add.w	r9, r6, r5
 8005330:	d110      	bne.n	8005354 <__cvt+0x8c>
 8005332:	7833      	ldrb	r3, [r6, #0]
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d10a      	bne.n	800534e <__cvt+0x86>
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	4620      	mov	r0, r4
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8005344:	b918      	cbnz	r0, 800534e <__cvt+0x86>
 8005346:	f1c5 0501 	rsb	r5, r5, #1
 800534a:	f8ca 5000 	str.w	r5, [sl]
 800534e:	f8da 3000 	ldr.w	r3, [sl]
 8005352:	4499      	add	r9, r3
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	4620      	mov	r0, r4
 800535a:	4639      	mov	r1, r7
 800535c:	f7fb fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8005360:	b108      	cbz	r0, 8005366 <__cvt+0x9e>
 8005362:	f8cd 901c 	str.w	r9, [sp, #28]
 8005366:	2230      	movs	r2, #48	; 0x30
 8005368:	9b07      	ldr	r3, [sp, #28]
 800536a:	454b      	cmp	r3, r9
 800536c:	d307      	bcc.n	800537e <__cvt+0xb6>
 800536e:	4630      	mov	r0, r6
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005374:	1b9b      	subs	r3, r3, r6
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	b008      	add	sp, #32
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	9107      	str	r1, [sp, #28]
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e7f0      	b.n	8005368 <__cvt+0xa0>

08005386 <__exponent>:
 8005386:	4603      	mov	r3, r0
 8005388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538a:	2900      	cmp	r1, #0
 800538c:	f803 2b02 	strb.w	r2, [r3], #2
 8005390:	bfb6      	itet	lt
 8005392:	222d      	movlt	r2, #45	; 0x2d
 8005394:	222b      	movge	r2, #43	; 0x2b
 8005396:	4249      	neglt	r1, r1
 8005398:	2909      	cmp	r1, #9
 800539a:	7042      	strb	r2, [r0, #1]
 800539c:	dd2a      	ble.n	80053f4 <__exponent+0x6e>
 800539e:	f10d 0207 	add.w	r2, sp, #7
 80053a2:	4617      	mov	r7, r2
 80053a4:	260a      	movs	r6, #10
 80053a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80053aa:	4694      	mov	ip, r2
 80053ac:	fb06 1415 	mls	r4, r6, r5, r1
 80053b0:	3430      	adds	r4, #48	; 0x30
 80053b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80053b6:	460c      	mov	r4, r1
 80053b8:	2c63      	cmp	r4, #99	; 0x63
 80053ba:	4629      	mov	r1, r5
 80053bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80053c0:	dcf1      	bgt.n	80053a6 <__exponent+0x20>
 80053c2:	3130      	adds	r1, #48	; 0x30
 80053c4:	f1ac 0402 	sub.w	r4, ip, #2
 80053c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053cc:	4622      	mov	r2, r4
 80053ce:	1c41      	adds	r1, r0, #1
 80053d0:	42ba      	cmp	r2, r7
 80053d2:	d30a      	bcc.n	80053ea <__exponent+0x64>
 80053d4:	f10d 0209 	add.w	r2, sp, #9
 80053d8:	eba2 020c 	sub.w	r2, r2, ip
 80053dc:	42bc      	cmp	r4, r7
 80053de:	bf88      	it	hi
 80053e0:	2200      	movhi	r2, #0
 80053e2:	4413      	add	r3, r2
 80053e4:	1a18      	subs	r0, r3, r0
 80053e6:	b003      	add	sp, #12
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053f2:	e7ed      	b.n	80053d0 <__exponent+0x4a>
 80053f4:	2330      	movs	r3, #48	; 0x30
 80053f6:	3130      	adds	r1, #48	; 0x30
 80053f8:	7083      	strb	r3, [r0, #2]
 80053fa:	70c1      	strb	r1, [r0, #3]
 80053fc:	1d03      	adds	r3, r0, #4
 80053fe:	e7f1      	b.n	80053e4 <__exponent+0x5e>

08005400 <_printf_float>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b091      	sub	sp, #68	; 0x44
 8005406:	460c      	mov	r4, r1
 8005408:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800540c:	4616      	mov	r6, r2
 800540e:	461f      	mov	r7, r3
 8005410:	4605      	mov	r5, r0
 8005412:	f000 fdc7 	bl	8005fa4 <_localeconv_r>
 8005416:	6803      	ldr	r3, [r0, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	f7fa fe98 	bl	8000150 <strlen>
 8005420:	2300      	movs	r3, #0
 8005422:	930e      	str	r3, [sp, #56]	; 0x38
 8005424:	f8d8 3000 	ldr.w	r3, [r8]
 8005428:	900a      	str	r0, [sp, #40]	; 0x28
 800542a:	3307      	adds	r3, #7
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	f103 0208 	add.w	r2, r3, #8
 8005434:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005438:	f8d4 b000 	ldr.w	fp, [r4]
 800543c:	f8c8 2000 	str.w	r2, [r8]
 8005440:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005444:	4652      	mov	r2, sl
 8005446:	4643      	mov	r3, r8
 8005448:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800544c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005450:	930b      	str	r3, [sp, #44]	; 0x2c
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	4650      	mov	r0, sl
 8005458:	4b9c      	ldr	r3, [pc, #624]	; (80056cc <_printf_float+0x2cc>)
 800545a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800545c:	f7fb fad6 	bl	8000a0c <__aeabi_dcmpun>
 8005460:	bb70      	cbnz	r0, 80054c0 <_printf_float+0xc0>
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	4650      	mov	r0, sl
 8005468:	4b98      	ldr	r3, [pc, #608]	; (80056cc <_printf_float+0x2cc>)
 800546a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800546c:	f7fb fab0 	bl	80009d0 <__aeabi_dcmple>
 8005470:	bb30      	cbnz	r0, 80054c0 <_printf_float+0xc0>
 8005472:	2200      	movs	r2, #0
 8005474:	2300      	movs	r3, #0
 8005476:	4650      	mov	r0, sl
 8005478:	4641      	mov	r1, r8
 800547a:	f7fb fa9f 	bl	80009bc <__aeabi_dcmplt>
 800547e:	b110      	cbz	r0, 8005486 <_printf_float+0x86>
 8005480:	232d      	movs	r3, #45	; 0x2d
 8005482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005486:	4a92      	ldr	r2, [pc, #584]	; (80056d0 <_printf_float+0x2d0>)
 8005488:	4b92      	ldr	r3, [pc, #584]	; (80056d4 <_printf_float+0x2d4>)
 800548a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800548e:	bf94      	ite	ls
 8005490:	4690      	movls	r8, r2
 8005492:	4698      	movhi	r8, r3
 8005494:	2303      	movs	r3, #3
 8005496:	f04f 0a00 	mov.w	sl, #0
 800549a:	6123      	str	r3, [r4, #16]
 800549c:	f02b 0304 	bic.w	r3, fp, #4
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	4633      	mov	r3, r6
 80054a4:	4621      	mov	r1, r4
 80054a6:	4628      	mov	r0, r5
 80054a8:	9700      	str	r7, [sp, #0]
 80054aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80054ac:	f000 f9d6 	bl	800585c <_printf_common>
 80054b0:	3001      	adds	r0, #1
 80054b2:	f040 8090 	bne.w	80055d6 <_printf_float+0x1d6>
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	b011      	add	sp, #68	; 0x44
 80054bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c0:	4652      	mov	r2, sl
 80054c2:	4643      	mov	r3, r8
 80054c4:	4650      	mov	r0, sl
 80054c6:	4641      	mov	r1, r8
 80054c8:	f7fb faa0 	bl	8000a0c <__aeabi_dcmpun>
 80054cc:	b148      	cbz	r0, 80054e2 <_printf_float+0xe2>
 80054ce:	f1b8 0f00 	cmp.w	r8, #0
 80054d2:	bfb8      	it	lt
 80054d4:	232d      	movlt	r3, #45	; 0x2d
 80054d6:	4a80      	ldr	r2, [pc, #512]	; (80056d8 <_printf_float+0x2d8>)
 80054d8:	bfb8      	it	lt
 80054da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054de:	4b7f      	ldr	r3, [pc, #508]	; (80056dc <_printf_float+0x2dc>)
 80054e0:	e7d3      	b.n	800548a <_printf_float+0x8a>
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	d142      	bne.n	8005572 <_printf_float+0x172>
 80054ec:	2306      	movs	r3, #6
 80054ee:	6063      	str	r3, [r4, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	9206      	str	r2, [sp, #24]
 80054f4:	aa0e      	add	r2, sp, #56	; 0x38
 80054f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80054fa:	aa0d      	add	r2, sp, #52	; 0x34
 80054fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005500:	9203      	str	r2, [sp, #12]
 8005502:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005506:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	4652      	mov	r2, sl
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	4628      	mov	r0, r5
 8005514:	4643      	mov	r3, r8
 8005516:	910b      	str	r1, [sp, #44]	; 0x2c
 8005518:	f7ff fed6 	bl	80052c8 <__cvt>
 800551c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800551e:	4680      	mov	r8, r0
 8005520:	2947      	cmp	r1, #71	; 0x47
 8005522:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005524:	d108      	bne.n	8005538 <_printf_float+0x138>
 8005526:	1cc8      	adds	r0, r1, #3
 8005528:	db02      	blt.n	8005530 <_printf_float+0x130>
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	4299      	cmp	r1, r3
 800552e:	dd40      	ble.n	80055b2 <_printf_float+0x1b2>
 8005530:	f1a9 0902 	sub.w	r9, r9, #2
 8005534:	fa5f f989 	uxtb.w	r9, r9
 8005538:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800553c:	d81f      	bhi.n	800557e <_printf_float+0x17e>
 800553e:	464a      	mov	r2, r9
 8005540:	3901      	subs	r1, #1
 8005542:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005546:	910d      	str	r1, [sp, #52]	; 0x34
 8005548:	f7ff ff1d 	bl	8005386 <__exponent>
 800554c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554e:	4682      	mov	sl, r0
 8005550:	1813      	adds	r3, r2, r0
 8005552:	2a01      	cmp	r2, #1
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	dc02      	bgt.n	800555e <_printf_float+0x15e>
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	07d2      	lsls	r2, r2, #31
 800555c:	d501      	bpl.n	8005562 <_printf_float+0x162>
 800555e:	3301      	adds	r3, #1
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005566:	2b00      	cmp	r3, #0
 8005568:	d09b      	beq.n	80054a2 <_printf_float+0xa2>
 800556a:	232d      	movs	r3, #45	; 0x2d
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005570:	e797      	b.n	80054a2 <_printf_float+0xa2>
 8005572:	2947      	cmp	r1, #71	; 0x47
 8005574:	d1bc      	bne.n	80054f0 <_printf_float+0xf0>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ba      	bne.n	80054f0 <_printf_float+0xf0>
 800557a:	2301      	movs	r3, #1
 800557c:	e7b7      	b.n	80054ee <_printf_float+0xee>
 800557e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005582:	d118      	bne.n	80055b6 <_printf_float+0x1b6>
 8005584:	2900      	cmp	r1, #0
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	dd0b      	ble.n	80055a2 <_printf_float+0x1a2>
 800558a:	6121      	str	r1, [r4, #16]
 800558c:	b913      	cbnz	r3, 8005594 <_printf_float+0x194>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	07d0      	lsls	r0, r2, #31
 8005592:	d502      	bpl.n	800559a <_printf_float+0x19a>
 8005594:	3301      	adds	r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	f04f 0a00 	mov.w	sl, #0
 800559e:	65a1      	str	r1, [r4, #88]	; 0x58
 80055a0:	e7df      	b.n	8005562 <_printf_float+0x162>
 80055a2:	b913      	cbnz	r3, 80055aa <_printf_float+0x1aa>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	07d2      	lsls	r2, r2, #31
 80055a8:	d501      	bpl.n	80055ae <_printf_float+0x1ae>
 80055aa:	3302      	adds	r3, #2
 80055ac:	e7f4      	b.n	8005598 <_printf_float+0x198>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7f2      	b.n	8005598 <_printf_float+0x198>
 80055b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80055b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055b8:	4299      	cmp	r1, r3
 80055ba:	db05      	blt.n	80055c8 <_printf_float+0x1c8>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	6121      	str	r1, [r4, #16]
 80055c0:	07d8      	lsls	r0, r3, #31
 80055c2:	d5ea      	bpl.n	800559a <_printf_float+0x19a>
 80055c4:	1c4b      	adds	r3, r1, #1
 80055c6:	e7e7      	b.n	8005598 <_printf_float+0x198>
 80055c8:	2900      	cmp	r1, #0
 80055ca:	bfcc      	ite	gt
 80055cc:	2201      	movgt	r2, #1
 80055ce:	f1c1 0202 	rsble	r2, r1, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	e7e0      	b.n	8005598 <_printf_float+0x198>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	055a      	lsls	r2, r3, #21
 80055da:	d407      	bmi.n	80055ec <_printf_float+0x1ec>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	4642      	mov	r2, r8
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	d12b      	bne.n	8005642 <_printf_float+0x242>
 80055ea:	e764      	b.n	80054b6 <_printf_float+0xb6>
 80055ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055f0:	f240 80dd 	bls.w	80057ae <_printf_float+0x3ae>
 80055f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f7fb f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8005600:	2800      	cmp	r0, #0
 8005602:	d033      	beq.n	800566c <_printf_float+0x26c>
 8005604:	2301      	movs	r3, #1
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <_printf_float+0x2e0>)
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f af51 	beq.w	80054b6 <_printf_float+0xb6>
 8005614:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005618:	429a      	cmp	r2, r3
 800561a:	db02      	blt.n	8005622 <_printf_float+0x222>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	07d8      	lsls	r0, r3, #31
 8005620:	d50f      	bpl.n	8005642 <_printf_float+0x242>
 8005622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f af42 	beq.w	80054b6 <_printf_float+0xb6>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	f104 091a 	add.w	r9, r4, #26
 800563a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800563c:	3b01      	subs	r3, #1
 800563e:	4543      	cmp	r3, r8
 8005640:	dc09      	bgt.n	8005656 <_printf_float+0x256>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	079b      	lsls	r3, r3, #30
 8005646:	f100 8104 	bmi.w	8005852 <_printf_float+0x452>
 800564a:	68e0      	ldr	r0, [r4, #12]
 800564c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800564e:	4298      	cmp	r0, r3
 8005650:	bfb8      	it	lt
 8005652:	4618      	movlt	r0, r3
 8005654:	e731      	b.n	80054ba <_printf_float+0xba>
 8005656:	2301      	movs	r3, #1
 8005658:	464a      	mov	r2, r9
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f af28 	beq.w	80054b6 <_printf_float+0xb6>
 8005666:	f108 0801 	add.w	r8, r8, #1
 800566a:	e7e6      	b.n	800563a <_printf_float+0x23a>
 800566c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800566e:	2b00      	cmp	r3, #0
 8005670:	dc38      	bgt.n	80056e4 <_printf_float+0x2e4>
 8005672:	2301      	movs	r3, #1
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <_printf_float+0x2e0>)
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	f43f af1a 	beq.w	80054b6 <_printf_float+0xb6>
 8005682:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005686:	4313      	orrs	r3, r2
 8005688:	d102      	bne.n	8005690 <_printf_float+0x290>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	07d9      	lsls	r1, r3, #31
 800568e:	d5d8      	bpl.n	8005642 <_printf_float+0x242>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	f43f af0b 	beq.w	80054b6 <_printf_float+0xb6>
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	f104 0a1a 	add.w	sl, r4, #26
 80056a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056aa:	425b      	negs	r3, r3
 80056ac:	454b      	cmp	r3, r9
 80056ae:	dc01      	bgt.n	80056b4 <_printf_float+0x2b4>
 80056b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b2:	e794      	b.n	80055de <_printf_float+0x1de>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f aef9 	beq.w	80054b6 <_printf_float+0xb6>
 80056c4:	f109 0901 	add.w	r9, r9, #1
 80056c8:	e7ee      	b.n	80056a8 <_printf_float+0x2a8>
 80056ca:	bf00      	nop
 80056cc:	7fefffff 	.word	0x7fefffff
 80056d0:	08007de6 	.word	0x08007de6
 80056d4:	08007dea 	.word	0x08007dea
 80056d8:	08007dee 	.word	0x08007dee
 80056dc:	08007df2 	.word	0x08007df2
 80056e0:	08007df6 	.word	0x08007df6
 80056e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bfa8      	it	ge
 80056ec:	461a      	movge	r2, r3
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	4691      	mov	r9, r2
 80056f2:	dc37      	bgt.n	8005764 <_printf_float+0x364>
 80056f4:	f04f 0b00 	mov.w	fp, #0
 80056f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056fc:	f104 021a 	add.w	r2, r4, #26
 8005700:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005704:	ebaa 0309 	sub.w	r3, sl, r9
 8005708:	455b      	cmp	r3, fp
 800570a:	dc33      	bgt.n	8005774 <_printf_float+0x374>
 800570c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005710:	429a      	cmp	r2, r3
 8005712:	db3b      	blt.n	800578c <_printf_float+0x38c>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07da      	lsls	r2, r3, #31
 8005718:	d438      	bmi.n	800578c <_printf_float+0x38c>
 800571a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800571e:	eba2 0903 	sub.w	r9, r2, r3
 8005722:	eba2 020a 	sub.w	r2, r2, sl
 8005726:	4591      	cmp	r9, r2
 8005728:	bfa8      	it	ge
 800572a:	4691      	movge	r9, r2
 800572c:	f1b9 0f00 	cmp.w	r9, #0
 8005730:	dc34      	bgt.n	800579c <_printf_float+0x39c>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800573a:	f104 0a1a 	add.w	sl, r4, #26
 800573e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	eba3 0309 	sub.w	r3, r3, r9
 8005748:	4543      	cmp	r3, r8
 800574a:	f77f af7a 	ble.w	8005642 <_printf_float+0x242>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f aeac 	beq.w	80054b6 <_printf_float+0xb6>
 800575e:	f108 0801 	add.w	r8, r8, #1
 8005762:	e7ec      	b.n	800573e <_printf_float+0x33e>
 8005764:	4613      	mov	r3, r2
 8005766:	4631      	mov	r1, r6
 8005768:	4642      	mov	r2, r8
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d1c0      	bne.n	80056f4 <_printf_float+0x2f4>
 8005772:	e6a0      	b.n	80054b6 <_printf_float+0xb6>
 8005774:	2301      	movs	r3, #1
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	920b      	str	r2, [sp, #44]	; 0x2c
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae99 	beq.w	80054b6 <_printf_float+0xb6>
 8005784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005786:	f10b 0b01 	add.w	fp, fp, #1
 800578a:	e7b9      	b.n	8005700 <_printf_float+0x300>
 800578c:	4631      	mov	r1, r6
 800578e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	d1bf      	bne.n	800571a <_printf_float+0x31a>
 800579a:	e68c      	b.n	80054b6 <_printf_float+0xb6>
 800579c:	464b      	mov	r3, r9
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	eb08 020a 	add.w	r2, r8, sl
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1c2      	bne.n	8005732 <_printf_float+0x332>
 80057ac:	e683      	b.n	80054b6 <_printf_float+0xb6>
 80057ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057b0:	2a01      	cmp	r2, #1
 80057b2:	dc01      	bgt.n	80057b8 <_printf_float+0x3b8>
 80057b4:	07db      	lsls	r3, r3, #31
 80057b6:	d539      	bpl.n	800582c <_printf_float+0x42c>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4642      	mov	r2, r8
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f ae77 	beq.w	80054b6 <_printf_float+0xb6>
 80057c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057cc:	4631      	mov	r1, r6
 80057ce:	4628      	mov	r0, r5
 80057d0:	47b8      	blx	r7
 80057d2:	3001      	adds	r0, #1
 80057d4:	f43f ae6f 	beq.w	80054b6 <_printf_float+0xb6>
 80057d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057dc:	2200      	movs	r2, #0
 80057de:	2300      	movs	r3, #0
 80057e0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80057e4:	f7fb f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80057e8:	b9d8      	cbnz	r0, 8005822 <_printf_float+0x422>
 80057ea:	f109 33ff 	add.w	r3, r9, #4294967295
 80057ee:	f108 0201 	add.w	r2, r8, #1
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	d10e      	bne.n	800581a <_printf_float+0x41a>
 80057fc:	e65b      	b.n	80054b6 <_printf_float+0xb6>
 80057fe:	2301      	movs	r3, #1
 8005800:	464a      	mov	r2, r9
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	f43f ae54 	beq.w	80054b6 <_printf_float+0xb6>
 800580e:	f108 0801 	add.w	r8, r8, #1
 8005812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005814:	3b01      	subs	r3, #1
 8005816:	4543      	cmp	r3, r8
 8005818:	dcf1      	bgt.n	80057fe <_printf_float+0x3fe>
 800581a:	4653      	mov	r3, sl
 800581c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005820:	e6de      	b.n	80055e0 <_printf_float+0x1e0>
 8005822:	f04f 0800 	mov.w	r8, #0
 8005826:	f104 091a 	add.w	r9, r4, #26
 800582a:	e7f2      	b.n	8005812 <_printf_float+0x412>
 800582c:	2301      	movs	r3, #1
 800582e:	4642      	mov	r2, r8
 8005830:	e7df      	b.n	80057f2 <_printf_float+0x3f2>
 8005832:	2301      	movs	r3, #1
 8005834:	464a      	mov	r2, r9
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f ae3a 	beq.w	80054b6 <_printf_float+0xb6>
 8005842:	f108 0801 	add.w	r8, r8, #1
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800584a:	1a5b      	subs	r3, r3, r1
 800584c:	4543      	cmp	r3, r8
 800584e:	dcf0      	bgt.n	8005832 <_printf_float+0x432>
 8005850:	e6fb      	b.n	800564a <_printf_float+0x24a>
 8005852:	f04f 0800 	mov.w	r8, #0
 8005856:	f104 0919 	add.w	r9, r4, #25
 800585a:	e7f4      	b.n	8005846 <_printf_float+0x446>

0800585c <_printf_common>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	4616      	mov	r6, r2
 8005862:	4699      	mov	r9, r3
 8005864:	688a      	ldr	r2, [r1, #8]
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	4607      	mov	r7, r0
 800586a:	4293      	cmp	r3, r2
 800586c:	bfb8      	it	lt
 800586e:	4613      	movlt	r3, r2
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005876:	460c      	mov	r4, r1
 8005878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800587c:	b10a      	cbz	r2, 8005882 <_printf_common+0x26>
 800587e:	3301      	adds	r3, #1
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	6833      	ldrmi	r3, [r6, #0]
 800588a:	3302      	addmi	r3, #2
 800588c:	6033      	strmi	r3, [r6, #0]
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	f015 0506 	ands.w	r5, r5, #6
 8005894:	d106      	bne.n	80058a4 <_printf_common+0x48>
 8005896:	f104 0a19 	add.w	sl, r4, #25
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dc2b      	bgt.n	80058fc <_printf_common+0xa0>
 80058a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a8:	1e13      	subs	r3, r2, #0
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	bf18      	it	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	0692      	lsls	r2, r2, #26
 80058b2:	d430      	bmi.n	8005916 <_printf_common+0xba>
 80058b4:	4649      	mov	r1, r9
 80058b6:	4638      	mov	r0, r7
 80058b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d023      	beq.n	800590a <_printf_common+0xae>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	f003 0306 	and.w	r3, r3, #6
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	bf14      	ite	ne
 80058ce:	2500      	movne	r5, #0
 80058d0:	6833      	ldreq	r3, [r6, #0]
 80058d2:	f04f 0600 	mov.w	r6, #0
 80058d6:	bf08      	it	eq
 80058d8:	68e5      	ldreq	r5, [r4, #12]
 80058da:	f104 041a 	add.w	r4, r4, #26
 80058de:	bf08      	it	eq
 80058e0:	1aed      	subeq	r5, r5, r3
 80058e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058e6:	bf08      	it	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfc4      	itt	gt
 80058f0:	1a9b      	subgt	r3, r3, r2
 80058f2:	18ed      	addgt	r5, r5, r3
 80058f4:	42b5      	cmp	r5, r6
 80058f6:	d11a      	bne.n	800592e <_printf_common+0xd2>
 80058f8:	2000      	movs	r0, #0
 80058fa:	e008      	b.n	800590e <_printf_common+0xb2>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4652      	mov	r2, sl
 8005900:	4649      	mov	r1, r9
 8005902:	4638      	mov	r0, r7
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d103      	bne.n	8005912 <_printf_common+0xb6>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	3501      	adds	r5, #1
 8005914:	e7c1      	b.n	800589a <_printf_common+0x3e>
 8005916:	2030      	movs	r0, #48	; 0x30
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005924:	4422      	add	r2, r4
 8005926:	3302      	adds	r3, #2
 8005928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592c:	e7c2      	b.n	80058b4 <_printf_common+0x58>
 800592e:	2301      	movs	r3, #1
 8005930:	4622      	mov	r2, r4
 8005932:	4649      	mov	r1, r9
 8005934:	4638      	mov	r0, r7
 8005936:	47c0      	blx	r8
 8005938:	3001      	adds	r0, #1
 800593a:	d0e6      	beq.n	800590a <_printf_common+0xae>
 800593c:	3601      	adds	r6, #1
 800593e:	e7d9      	b.n	80058f4 <_printf_common+0x98>

08005940 <_printf_i>:
 8005940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	7e0f      	ldrb	r7, [r1, #24]
 8005946:	4691      	mov	r9, r2
 8005948:	2f78      	cmp	r7, #120	; 0x78
 800594a:	4680      	mov	r8, r0
 800594c:	460c      	mov	r4, r1
 800594e:	469a      	mov	sl, r3
 8005950:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005956:	d807      	bhi.n	8005968 <_printf_i+0x28>
 8005958:	2f62      	cmp	r7, #98	; 0x62
 800595a:	d80a      	bhi.n	8005972 <_printf_i+0x32>
 800595c:	2f00      	cmp	r7, #0
 800595e:	f000 80d5 	beq.w	8005b0c <_printf_i+0x1cc>
 8005962:	2f58      	cmp	r7, #88	; 0x58
 8005964:	f000 80c1 	beq.w	8005aea <_printf_i+0x1aa>
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005970:	e03a      	b.n	80059e8 <_printf_i+0xa8>
 8005972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005976:	2b15      	cmp	r3, #21
 8005978:	d8f6      	bhi.n	8005968 <_printf_i+0x28>
 800597a:	a101      	add	r1, pc, #4	; (adr r1, 8005980 <_printf_i+0x40>)
 800597c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059ed 	.word	0x080059ed
 8005988:	08005969 	.word	0x08005969
 800598c:	08005969 	.word	0x08005969
 8005990:	08005969 	.word	0x08005969
 8005994:	08005969 	.word	0x08005969
 8005998:	080059ed 	.word	0x080059ed
 800599c:	08005969 	.word	0x08005969
 80059a0:	08005969 	.word	0x08005969
 80059a4:	08005969 	.word	0x08005969
 80059a8:	08005969 	.word	0x08005969
 80059ac:	08005af3 	.word	0x08005af3
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005aad 	.word	0x08005aad
 80059b8:	08005969 	.word	0x08005969
 80059bc:	08005969 	.word	0x08005969
 80059c0:	08005b15 	.word	0x08005b15
 80059c4:	08005969 	.word	0x08005969
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005969 	.word	0x08005969
 80059d0:	08005969 	.word	0x08005969
 80059d4:	08005ab5 	.word	0x08005ab5
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0a0      	b.n	8005b2e <_printf_i+0x1ee>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	0607      	lsls	r7, r0, #24
 80059f2:	f103 0104 	add.w	r1, r3, #4
 80059f6:	6029      	str	r1, [r5, #0]
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0xbe>
 80059fa:	681e      	ldr	r6, [r3, #0]
 80059fc:	e003      	b.n	8005a06 <_printf_i+0xc6>
 80059fe:	0646      	lsls	r6, r0, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0xba>
 8005a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	da03      	bge.n	8005a12 <_printf_i+0xd2>
 8005a0a:	232d      	movs	r3, #45	; 0x2d
 8005a0c:	4276      	negs	r6, r6
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a12:	230a      	movs	r3, #10
 8005a14:	4859      	ldr	r0, [pc, #356]	; (8005b7c <_printf_i+0x23c>)
 8005a16:	e012      	b.n	8005a3e <_printf_i+0xfe>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	6029      	str	r1, [r5, #0]
 8005a20:	0605      	lsls	r5, r0, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xe8>
 8005a24:	681e      	ldr	r6, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0xee>
 8005a28:	0641      	lsls	r1, r0, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xe4>
 8005a2c:	881e      	ldrh	r6, [r3, #0]
 8005a2e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a30:	bf0c      	ite	eq
 8005a32:	2308      	moveq	r3, #8
 8005a34:	230a      	movne	r3, #10
 8005a36:	4851      	ldr	r0, [pc, #324]	; (8005b7c <_printf_i+0x23c>)
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3e:	6865      	ldr	r5, [r4, #4]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	bfa8      	it	ge
 8005a44:	6821      	ldrge	r1, [r4, #0]
 8005a46:	60a5      	str	r5, [r4, #8]
 8005a48:	bfa4      	itt	ge
 8005a4a:	f021 0104 	bicge.w	r1, r1, #4
 8005a4e:	6021      	strge	r1, [r4, #0]
 8005a50:	b90e      	cbnz	r6, 8005a56 <_printf_i+0x116>
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	d04b      	beq.n	8005aee <_printf_i+0x1ae>
 8005a56:	4615      	mov	r5, r2
 8005a58:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a5c:	fb03 6711 	mls	r7, r3, r1, r6
 8005a60:	5dc7      	ldrb	r7, [r0, r7]
 8005a62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a66:	4637      	mov	r7, r6
 8005a68:	42bb      	cmp	r3, r7
 8005a6a:	460e      	mov	r6, r1
 8005a6c:	d9f4      	bls.n	8005a58 <_printf_i+0x118>
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d10b      	bne.n	8005a8a <_printf_i+0x14a>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	07de      	lsls	r6, r3, #31
 8005a76:	d508      	bpl.n	8005a8a <_printf_i+0x14a>
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	6861      	ldr	r1, [r4, #4]
 8005a7c:	4299      	cmp	r1, r3
 8005a7e:	bfde      	ittt	le
 8005a80:	2330      	movle	r3, #48	; 0x30
 8005a82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a8a:	1b52      	subs	r2, r2, r5
 8005a8c:	6122      	str	r2, [r4, #16]
 8005a8e:	464b      	mov	r3, r9
 8005a90:	4621      	mov	r1, r4
 8005a92:	4640      	mov	r0, r8
 8005a94:	f8cd a000 	str.w	sl, [sp]
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	f7ff fedf 	bl	800585c <_printf_common>
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d14a      	bne.n	8005b38 <_printf_i+0x1f8>
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa6:	b004      	add	sp, #16
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f043 0320 	orr.w	r3, r3, #32
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2778      	movs	r7, #120	; 0x78
 8005ab6:	4832      	ldr	r0, [pc, #200]	; (8005b80 <_printf_i+0x240>)
 8005ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	6829      	ldr	r1, [r5, #0]
 8005ac0:	061f      	lsls	r7, r3, #24
 8005ac2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac6:	d402      	bmi.n	8005ace <_printf_i+0x18e>
 8005ac8:	065f      	lsls	r7, r3, #25
 8005aca:	bf48      	it	mi
 8005acc:	b2b6      	uxthmi	r6, r6
 8005ace:	07df      	lsls	r7, r3, #31
 8005ad0:	bf48      	it	mi
 8005ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad6:	6029      	str	r1, [r5, #0]
 8005ad8:	bf48      	it	mi
 8005ada:	6023      	strmi	r3, [r4, #0]
 8005adc:	b91e      	cbnz	r6, 8005ae6 <_printf_i+0x1a6>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f023 0320 	bic.w	r3, r3, #32
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	e7a6      	b.n	8005a38 <_printf_i+0xf8>
 8005aea:	4824      	ldr	r0, [pc, #144]	; (8005b7c <_printf_i+0x23c>)
 8005aec:	e7e4      	b.n	8005ab8 <_printf_i+0x178>
 8005aee:	4615      	mov	r5, r2
 8005af0:	e7bd      	b.n	8005a6e <_printf_i+0x12e>
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	6826      	ldr	r6, [r4, #0]
 8005af6:	1d18      	adds	r0, r3, #4
 8005af8:	6961      	ldr	r1, [r4, #20]
 8005afa:	6028      	str	r0, [r5, #0]
 8005afc:	0635      	lsls	r5, r6, #24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	d501      	bpl.n	8005b06 <_printf_i+0x1c6>
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	e002      	b.n	8005b0c <_printf_i+0x1cc>
 8005b06:	0670      	lsls	r0, r6, #25
 8005b08:	d5fb      	bpl.n	8005b02 <_printf_i+0x1c2>
 8005b0a:	8019      	strh	r1, [r3, #0]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4615      	mov	r5, r2
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	e7bc      	b.n	8005a8e <_printf_i+0x14e>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	2100      	movs	r1, #0
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 fab6 	bl	8006092 <memchr>
 8005b26:	b108      	cbz	r0, 8005b2c <_printf_i+0x1ec>
 8005b28:	1b40      	subs	r0, r0, r5
 8005b2a:	6060      	str	r0, [r4, #4]
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2300      	movs	r3, #0
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b36:	e7aa      	b.n	8005a8e <_printf_i+0x14e>
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	47d0      	blx	sl
 8005b42:	3001      	adds	r0, #1
 8005b44:	d0ad      	beq.n	8005aa2 <_printf_i+0x162>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	079b      	lsls	r3, r3, #30
 8005b4a:	d413      	bmi.n	8005b74 <_printf_i+0x234>
 8005b4c:	68e0      	ldr	r0, [r4, #12]
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	4298      	cmp	r0, r3
 8005b52:	bfb8      	it	lt
 8005b54:	4618      	movlt	r0, r3
 8005b56:	e7a6      	b.n	8005aa6 <_printf_i+0x166>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	4640      	mov	r0, r8
 8005b60:	47d0      	blx	sl
 8005b62:	3001      	adds	r0, #1
 8005b64:	d09d      	beq.n	8005aa2 <_printf_i+0x162>
 8005b66:	3501      	adds	r5, #1
 8005b68:	68e3      	ldr	r3, [r4, #12]
 8005b6a:	9903      	ldr	r1, [sp, #12]
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	42ab      	cmp	r3, r5
 8005b70:	dcf2      	bgt.n	8005b58 <_printf_i+0x218>
 8005b72:	e7eb      	b.n	8005b4c <_printf_i+0x20c>
 8005b74:	2500      	movs	r5, #0
 8005b76:	f104 0619 	add.w	r6, r4, #25
 8005b7a:	e7f5      	b.n	8005b68 <_printf_i+0x228>
 8005b7c:	08007df8 	.word	0x08007df8
 8005b80:	08007e09 	.word	0x08007e09

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b92:	6083      	str	r3, [r0, #8]
 8005b94:	8181      	strh	r1, [r0, #12]
 8005b96:	6643      	str	r3, [r0, #100]	; 0x64
 8005b98:	81c2      	strh	r2, [r0, #14]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	; 0x5c
 8005ba2:	f000 f9f7 	bl	8005f94 <memset>
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <std+0x58>)
 8005ba8:	6224      	str	r4, [r4, #32]
 8005baa:	6263      	str	r3, [r4, #36]	; 0x24
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <std+0x5c>)
 8005bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <std+0x60>)
 8005bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <std+0x64>)
 8005bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <std+0x68>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d006      	beq.n	8005bcc <std+0x48>
 8005bbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005bc2:	4294      	cmp	r4, r2
 8005bc4:	d002      	beq.n	8005bcc <std+0x48>
 8005bc6:	33d0      	adds	r3, #208	; 0xd0
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	d105      	bne.n	8005bd8 <std+0x54>
 8005bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f000 ba5a 	b.w	800608c <__retarget_lock_init_recursive>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	bf00      	nop
 8005bdc:	08005de5 	.word	0x08005de5
 8005be0:	08005e07 	.word	0x08005e07
 8005be4:	08005e3f 	.word	0x08005e3f
 8005be8:	08005e63 	.word	0x08005e63
 8005bec:	20000338 	.word	0x20000338

08005bf0 <stdio_exit_handler>:
 8005bf0:	4a02      	ldr	r2, [pc, #8]	; (8005bfc <stdio_exit_handler+0xc>)
 8005bf2:	4903      	ldr	r1, [pc, #12]	; (8005c00 <stdio_exit_handler+0x10>)
 8005bf4:	4803      	ldr	r0, [pc, #12]	; (8005c04 <stdio_exit_handler+0x14>)
 8005bf6:	f000 b869 	b.w	8005ccc <_fwalk_sglue>
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	080079f9 	.word	0x080079f9
 8005c04:	20000018 	.word	0x20000018

08005c08 <cleanup_stdio>:
 8005c08:	6841      	ldr	r1, [r0, #4]
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <cleanup_stdio+0x34>)
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	4604      	mov	r4, r0
 8005c12:	d001      	beq.n	8005c18 <cleanup_stdio+0x10>
 8005c14:	f001 fef0 	bl	80079f8 <_fflush_r>
 8005c18:	68a1      	ldr	r1, [r4, #8]
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <cleanup_stdio+0x38>)
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <cleanup_stdio+0x1e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f001 fee9 	bl	80079f8 <_fflush_r>
 8005c26:	68e1      	ldr	r1, [r4, #12]
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <cleanup_stdio+0x3c>)
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d004      	beq.n	8005c38 <cleanup_stdio+0x30>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	f001 bee0 	b.w	80079f8 <_fflush_r>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000338 	.word	0x20000338
 8005c40:	200003a0 	.word	0x200003a0
 8005c44:	20000408 	.word	0x20000408

08005c48 <global_stdio_init.part.0>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <global_stdio_init.part.0+0x30>)
 8005c4c:	4c0b      	ldr	r4, [pc, #44]	; (8005c7c <global_stdio_init.part.0+0x34>)
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <global_stdio_init.part.0+0x38>)
 8005c50:	4620      	mov	r0, r4
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	2104      	movs	r1, #4
 8005c56:	2200      	movs	r2, #0
 8005c58:	f7ff ff94 	bl	8005b84 <std>
 8005c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c60:	2201      	movs	r2, #1
 8005c62:	2109      	movs	r1, #9
 8005c64:	f7ff ff8e 	bl	8005b84 <std>
 8005c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff bf86 	b.w	8005b84 <std>
 8005c78:	20000470 	.word	0x20000470
 8005c7c:	20000338 	.word	0x20000338
 8005c80:	08005bf1 	.word	0x08005bf1

08005c84 <__sfp_lock_acquire>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__sfp_lock_acquire+0x8>)
 8005c86:	f000 ba02 	b.w	800608e <__retarget_lock_acquire_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	20000479 	.word	0x20000479

08005c90 <__sfp_lock_release>:
 8005c90:	4801      	ldr	r0, [pc, #4]	; (8005c98 <__sfp_lock_release+0x8>)
 8005c92:	f000 b9fd 	b.w	8006090 <__retarget_lock_release_recursive>
 8005c96:	bf00      	nop
 8005c98:	20000479 	.word	0x20000479

08005c9c <__sinit>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7ff fff0 	bl	8005c84 <__sfp_lock_acquire>
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	b11b      	cbz	r3, 8005cb0 <__sinit+0x14>
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cac:	f7ff bff0 	b.w	8005c90 <__sfp_lock_release>
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <__sinit+0x28>)
 8005cb2:	6223      	str	r3, [r4, #32]
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <__sinit+0x2c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f5      	bne.n	8005ca8 <__sinit+0xc>
 8005cbc:	f7ff ffc4 	bl	8005c48 <global_stdio_init.part.0>
 8005cc0:	e7f2      	b.n	8005ca8 <__sinit+0xc>
 8005cc2:	bf00      	nop
 8005cc4:	08005c09 	.word	0x08005c09
 8005cc8:	20000470 	.word	0x20000470

08005ccc <_fwalk_sglue>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	4688      	mov	r8, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce0:	d505      	bpl.n	8005cee <_fwalk_sglue+0x22>
 8005ce2:	6824      	ldr	r4, [r4, #0]
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <_fwalk_sglue+0xc>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d907      	bls.n	8005d04 <_fwalk_sglue+0x38>
 8005cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	d003      	beq.n	8005d04 <_fwalk_sglue+0x38>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	4306      	orrs	r6, r0
 8005d04:	3568      	adds	r5, #104	; 0x68
 8005d06:	e7e9      	b.n	8005cdc <_fwalk_sglue+0x10>

08005d08 <iprintf>:
 8005d08:	b40f      	push	{r0, r1, r2, r3}
 8005d0a:	b507      	push	{r0, r1, r2, lr}
 8005d0c:	4906      	ldr	r1, [pc, #24]	; (8005d28 <iprintf+0x20>)
 8005d0e:	ab04      	add	r3, sp, #16
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d16:	6881      	ldr	r1, [r0, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f001 fcd1 	bl	80076c0 <_vfiprintf_r>
 8005d1e:	b003      	add	sp, #12
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	20000064 	.word	0x20000064

08005d2c <_puts_r>:
 8005d2c:	6a03      	ldr	r3, [r0, #32]
 8005d2e:	b570      	push	{r4, r5, r6, lr}
 8005d30:	4605      	mov	r5, r0
 8005d32:	460e      	mov	r6, r1
 8005d34:	6884      	ldr	r4, [r0, #8]
 8005d36:	b90b      	cbnz	r3, 8005d3c <_puts_r+0x10>
 8005d38:	f7ff ffb0 	bl	8005c9c <__sinit>
 8005d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d3e:	07db      	lsls	r3, r3, #31
 8005d40:	d405      	bmi.n	8005d4e <_puts_r+0x22>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	0598      	lsls	r0, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_puts_r+0x22>
 8005d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4a:	f000 f9a0 	bl	800608e <__retarget_lock_acquire_recursive>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	0719      	lsls	r1, r3, #28
 8005d52:	d513      	bpl.n	8005d7c <_puts_r+0x50>
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b18b      	cbz	r3, 8005d7c <_puts_r+0x50>
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d60:	3b01      	subs	r3, #1
 8005d62:	60a3      	str	r3, [r4, #8]
 8005d64:	b9e9      	cbnz	r1, 8005da2 <_puts_r+0x76>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da2e      	bge.n	8005dc8 <_puts_r+0x9c>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	210a      	movs	r1, #10
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f87b 	bl	8005e6a <__swbuf_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d007      	beq.n	8005d88 <_puts_r+0x5c>
 8005d78:	250a      	movs	r5, #10
 8005d7a:	e007      	b.n	8005d8c <_puts_r+0x60>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f8b0 	bl	8005ee4 <__swsetup_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0e7      	beq.n	8005d58 <_puts_r+0x2c>
 8005d88:	f04f 35ff 	mov.w	r5, #4294967295
 8005d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d8e:	07da      	lsls	r2, r3, #31
 8005d90:	d405      	bmi.n	8005d9e <_puts_r+0x72>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	059b      	lsls	r3, r3, #22
 8005d96:	d402      	bmi.n	8005d9e <_puts_r+0x72>
 8005d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9a:	f000 f979 	bl	8006090 <__retarget_lock_release_recursive>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da04      	bge.n	8005db0 <_puts_r+0x84>
 8005da6:	69a2      	ldr	r2, [r4, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dc06      	bgt.n	8005dba <_puts_r+0x8e>
 8005dac:	290a      	cmp	r1, #10
 8005dae:	d004      	beq.n	8005dba <_puts_r+0x8e>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	6022      	str	r2, [r4, #0]
 8005db6:	7019      	strb	r1, [r3, #0]
 8005db8:	e7cf      	b.n	8005d5a <_puts_r+0x2e>
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f854 	bl	8005e6a <__swbuf_r>
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d1c9      	bne.n	8005d5a <_puts_r+0x2e>
 8005dc6:	e7df      	b.n	8005d88 <_puts_r+0x5c>
 8005dc8:	250a      	movs	r5, #10
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	6022      	str	r2, [r4, #0]
 8005dd0:	701d      	strb	r5, [r3, #0]
 8005dd2:	e7db      	b.n	8005d8c <_puts_r+0x60>

08005dd4 <puts>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <puts+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f7ff bfa7 	b.w	8005d2c <_puts_r>
 8005dde:	bf00      	nop
 8005de0:	20000064 	.word	0x20000064

08005de4 <__sread>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	f000 f900 	bl	8005ff0 <_read_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	bfab      	itete	ge
 8005df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005df6:	89a3      	ldrhlt	r3, [r4, #12]
 8005df8:	181b      	addge	r3, r3, r0
 8005dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dfe:	bfac      	ite	ge
 8005e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e02:	81a3      	strhlt	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__swrite>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	4605      	mov	r5, r0
 8005e10:	05db      	lsls	r3, r3, #23
 8005e12:	460c      	mov	r4, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	d505      	bpl.n	8005e24 <__swrite+0x1e>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e20:	f000 f8d4 	bl	8005fcc <_lseek_r>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	4632      	mov	r2, r6
 8005e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	4628      	mov	r0, r5
 8005e30:	463b      	mov	r3, r7
 8005e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f000 b8eb 	b.w	8006014 <_write_r>

08005e3e <__sseek>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 f8c1 	bl	8005fcc <_lseek_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	bf15      	itete	ne
 8005e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e5a:	81a3      	strheq	r3, [r4, #12]
 8005e5c:	bf18      	it	ne
 8005e5e:	81a3      	strhne	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__sclose>:
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 b8a1 	b.w	8005fac <_close_r>

08005e6a <__swbuf_r>:
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	4614      	mov	r4, r2
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <__swbuf_r+0x12>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <__swbuf_r+0x12>
 8005e78:	f7ff ff10 	bl	8005c9c <__sinit>
 8005e7c:	69a3      	ldr	r3, [r4, #24]
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	071a      	lsls	r2, r3, #28
 8005e84:	d525      	bpl.n	8005ed2 <__swbuf_r+0x68>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b31b      	cbz	r3, 8005ed2 <__swbuf_r+0x68>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	6922      	ldr	r2, [r4, #16]
 8005e8e:	b2f6      	uxtb	r6, r6
 8005e90:	1a98      	subs	r0, r3, r2
 8005e92:	6963      	ldr	r3, [r4, #20]
 8005e94:	4637      	mov	r7, r6
 8005e96:	4283      	cmp	r3, r0
 8005e98:	dc04      	bgt.n	8005ea4 <__swbuf_r+0x3a>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f001 fdab 	bl	80079f8 <_fflush_r>
 8005ea2:	b9e0      	cbnz	r0, 8005ede <__swbuf_r+0x74>
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	701e      	strb	r6, [r3, #0]
 8005eb2:	6962      	ldr	r2, [r4, #20]
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d004      	beq.n	8005ec4 <__swbuf_r+0x5a>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	07db      	lsls	r3, r3, #31
 8005ebe:	d506      	bpl.n	8005ece <__swbuf_r+0x64>
 8005ec0:	2e0a      	cmp	r6, #10
 8005ec2:	d104      	bne.n	8005ece <__swbuf_r+0x64>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f001 fd96 	bl	80079f8 <_fflush_r>
 8005ecc:	b938      	cbnz	r0, 8005ede <__swbuf_r+0x74>
 8005ece:	4638      	mov	r0, r7
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 f805 	bl	8005ee4 <__swsetup_r>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0d5      	beq.n	8005e8a <__swbuf_r+0x20>
 8005ede:	f04f 37ff 	mov.w	r7, #4294967295
 8005ee2:	e7f4      	b.n	8005ece <__swbuf_r+0x64>

08005ee4 <__swsetup_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <__swsetup_r+0xac>)
 8005ee8:	4605      	mov	r5, r0
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	460c      	mov	r4, r1
 8005eee:	b118      	cbz	r0, 8005ef8 <__swsetup_r+0x14>
 8005ef0:	6a03      	ldr	r3, [r0, #32]
 8005ef2:	b90b      	cbnz	r3, 8005ef8 <__swsetup_r+0x14>
 8005ef4:	f7ff fed2 	bl	8005c9c <__sinit>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005efe:	0718      	lsls	r0, r3, #28
 8005f00:	d422      	bmi.n	8005f48 <__swsetup_r+0x64>
 8005f02:	06d9      	lsls	r1, r3, #27
 8005f04:	d407      	bmi.n	8005f16 <__swsetup_r+0x32>
 8005f06:	2309      	movs	r3, #9
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	e034      	b.n	8005f80 <__swsetup_r+0x9c>
 8005f16:	0758      	lsls	r0, r3, #29
 8005f18:	d512      	bpl.n	8005f40 <__swsetup_r+0x5c>
 8005f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1c:	b141      	cbz	r1, 8005f30 <__swsetup_r+0x4c>
 8005f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f22:	4299      	cmp	r1, r3
 8005f24:	d002      	beq.n	8005f2c <__swsetup_r+0x48>
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 ff2e 	bl	8006d88 <_free_r>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f043 0308 	orr.w	r3, r3, #8
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	b94b      	cbnz	r3, 8005f60 <__swsetup_r+0x7c>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f56:	d003      	beq.n	8005f60 <__swsetup_r+0x7c>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f001 fd99 	bl	8007a92 <__smakebuf_r>
 8005f60:	89a0      	ldrh	r0, [r4, #12]
 8005f62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f66:	f010 0301 	ands.w	r3, r0, #1
 8005f6a:	d00a      	beq.n	8005f82 <__swsetup_r+0x9e>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	6963      	ldr	r3, [r4, #20]
 8005f72:	425b      	negs	r3, r3
 8005f74:	61a3      	str	r3, [r4, #24]
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	b943      	cbnz	r3, 8005f8c <__swsetup_r+0xa8>
 8005f7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f7e:	d1c4      	bne.n	8005f0a <__swsetup_r+0x26>
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	0781      	lsls	r1, r0, #30
 8005f84:	bf58      	it	pl
 8005f86:	6963      	ldrpl	r3, [r4, #20]
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	e7f4      	b.n	8005f76 <__swsetup_r+0x92>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7f7      	b.n	8005f80 <__swsetup_r+0x9c>
 8005f90:	20000064 	.word	0x20000064

08005f94 <memset>:
 8005f94:	4603      	mov	r3, r0
 8005f96:	4402      	add	r2, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <_localeconv_r>:
 8005fa4:	4800      	ldr	r0, [pc, #0]	; (8005fa8 <_localeconv_r+0x4>)
 8005fa6:	4770      	bx	lr
 8005fa8:	20000158 	.word	0x20000158

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4d05      	ldr	r5, [pc, #20]	; (8005fc8 <_close_r+0x1c>)
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fb ff84 	bl	8001ec4 <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000474 	.word	0x20000474

08005fcc <_lseek_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4d05      	ldr	r5, [pc, #20]	; (8005fec <_lseek_r+0x20>)
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fb ff96 	bl	8001f0c <_lseek>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_lseek_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_lseek_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000474 	.word	0x20000474

08005ff0 <_read_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4d05      	ldr	r5, [pc, #20]	; (8006010 <_read_r+0x20>)
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fb ff27 	bl	8001e52 <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_read_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_read_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20000474 	.word	0x20000474

08006014 <_write_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	2200      	movs	r2, #0
 800601e:	4d05      	ldr	r5, [pc, #20]	; (8006034 <_write_r+0x20>)
 8006020:	602a      	str	r2, [r5, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f7fb ff32 	bl	8001e8c <_write>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_write_r+0x1e>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_write_r+0x1e>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20000474 	.word	0x20000474

08006038 <__errno>:
 8006038:	4b01      	ldr	r3, [pc, #4]	; (8006040 <__errno+0x8>)
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000064 	.word	0x20000064

08006044 <__libc_init_array>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	2600      	movs	r6, #0
 8006048:	4d0c      	ldr	r5, [pc, #48]	; (800607c <__libc_init_array+0x38>)
 800604a:	4c0d      	ldr	r4, [pc, #52]	; (8006080 <__libc_init_array+0x3c>)
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	42a6      	cmp	r6, r4
 8006052:	d109      	bne.n	8006068 <__libc_init_array+0x24>
 8006054:	f001 fe4a 	bl	8007cec <_init>
 8006058:	2600      	movs	r6, #0
 800605a:	4d0a      	ldr	r5, [pc, #40]	; (8006084 <__libc_init_array+0x40>)
 800605c:	4c0a      	ldr	r4, [pc, #40]	; (8006088 <__libc_init_array+0x44>)
 800605e:	1b64      	subs	r4, r4, r5
 8006060:	10a4      	asrs	r4, r4, #2
 8006062:	42a6      	cmp	r6, r4
 8006064:	d105      	bne.n	8006072 <__libc_init_array+0x2e>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	f855 3b04 	ldr.w	r3, [r5], #4
 800606c:	4798      	blx	r3
 800606e:	3601      	adds	r6, #1
 8006070:	e7ee      	b.n	8006050 <__libc_init_array+0xc>
 8006072:	f855 3b04 	ldr.w	r3, [r5], #4
 8006076:	4798      	blx	r3
 8006078:	3601      	adds	r6, #1
 800607a:	e7f2      	b.n	8006062 <__libc_init_array+0x1e>
 800607c:	08008154 	.word	0x08008154
 8006080:	08008154 	.word	0x08008154
 8006084:	08008154 	.word	0x08008154
 8006088:	08008158 	.word	0x08008158

0800608c <__retarget_lock_init_recursive>:
 800608c:	4770      	bx	lr

0800608e <__retarget_lock_acquire_recursive>:
 800608e:	4770      	bx	lr

08006090 <__retarget_lock_release_recursive>:
 8006090:	4770      	bx	lr

08006092 <memchr>:
 8006092:	4603      	mov	r3, r0
 8006094:	b510      	push	{r4, lr}
 8006096:	b2c9      	uxtb	r1, r1
 8006098:	4402      	add	r2, r0
 800609a:	4293      	cmp	r3, r2
 800609c:	4618      	mov	r0, r3
 800609e:	d101      	bne.n	80060a4 <memchr+0x12>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e003      	b.n	80060ac <memchr+0x1a>
 80060a4:	7804      	ldrb	r4, [r0, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	428c      	cmp	r4, r1
 80060aa:	d1f6      	bne.n	800609a <memchr+0x8>
 80060ac:	bd10      	pop	{r4, pc}

080060ae <quorem>:
 80060ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b2:	6903      	ldr	r3, [r0, #16]
 80060b4:	690c      	ldr	r4, [r1, #16]
 80060b6:	4607      	mov	r7, r0
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	db7f      	blt.n	80061bc <quorem+0x10e>
 80060bc:	3c01      	subs	r4, #1
 80060be:	f100 0514 	add.w	r5, r0, #20
 80060c2:	f101 0814 	add.w	r8, r1, #20
 80060c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060d4:	3301      	adds	r3, #1
 80060d6:	429a      	cmp	r2, r3
 80060d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060e4:	d331      	bcc.n	800614a <quorem+0x9c>
 80060e6:	f04f 0e00 	mov.w	lr, #0
 80060ea:	4640      	mov	r0, r8
 80060ec:	46ac      	mov	ip, r5
 80060ee:	46f2      	mov	sl, lr
 80060f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80060f4:	b293      	uxth	r3, r2
 80060f6:	fb06 e303 	mla	r3, r6, r3, lr
 80060fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060fe:	0c1a      	lsrs	r2, r3, #16
 8006100:	b29b      	uxth	r3, r3
 8006102:	fb06 220e 	mla	r2, r6, lr, r2
 8006106:	ebaa 0303 	sub.w	r3, sl, r3
 800610a:	f8dc a000 	ldr.w	sl, [ip]
 800610e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006112:	fa1f fa8a 	uxth.w	sl, sl
 8006116:	4453      	add	r3, sl
 8006118:	f8dc a000 	ldr.w	sl, [ip]
 800611c:	b292      	uxth	r2, r2
 800611e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006122:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612c:	4581      	cmp	r9, r0
 800612e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006132:	f84c 3b04 	str.w	r3, [ip], #4
 8006136:	d2db      	bcs.n	80060f0 <quorem+0x42>
 8006138:	f855 300b 	ldr.w	r3, [r5, fp]
 800613c:	b92b      	cbnz	r3, 800614a <quorem+0x9c>
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	3b04      	subs	r3, #4
 8006142:	429d      	cmp	r5, r3
 8006144:	461a      	mov	r2, r3
 8006146:	d32d      	bcc.n	80061a4 <quorem+0xf6>
 8006148:	613c      	str	r4, [r7, #16]
 800614a:	4638      	mov	r0, r7
 800614c:	f001 f992 	bl	8007474 <__mcmp>
 8006150:	2800      	cmp	r0, #0
 8006152:	db23      	blt.n	800619c <quorem+0xee>
 8006154:	4629      	mov	r1, r5
 8006156:	2000      	movs	r0, #0
 8006158:	3601      	adds	r6, #1
 800615a:	f858 2b04 	ldr.w	r2, [r8], #4
 800615e:	f8d1 c000 	ldr.w	ip, [r1]
 8006162:	b293      	uxth	r3, r2
 8006164:	1ac3      	subs	r3, r0, r3
 8006166:	0c12      	lsrs	r2, r2, #16
 8006168:	fa1f f08c 	uxth.w	r0, ip
 800616c:	4403      	add	r3, r0
 800616e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800617c:	45c1      	cmp	r9, r8
 800617e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006182:	f841 3b04 	str.w	r3, [r1], #4
 8006186:	d2e8      	bcs.n	800615a <quorem+0xac>
 8006188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800618c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006190:	b922      	cbnz	r2, 800619c <quorem+0xee>
 8006192:	3b04      	subs	r3, #4
 8006194:	429d      	cmp	r5, r3
 8006196:	461a      	mov	r2, r3
 8006198:	d30a      	bcc.n	80061b0 <quorem+0x102>
 800619a:	613c      	str	r4, [r7, #16]
 800619c:	4630      	mov	r0, r6
 800619e:	b003      	add	sp, #12
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d1cd      	bne.n	8006148 <quorem+0x9a>
 80061ac:	3c01      	subs	r4, #1
 80061ae:	e7c8      	b.n	8006142 <quorem+0x94>
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d1f0      	bne.n	800619a <quorem+0xec>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	e7eb      	b.n	8006194 <quorem+0xe6>
 80061bc:	2000      	movs	r0, #0
 80061be:	e7ee      	b.n	800619e <quorem+0xf0>

080061c0 <_dtoa_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	461f      	mov	r7, r3
 80061c8:	69c4      	ldr	r4, [r0, #28]
 80061ca:	b099      	sub	sp, #100	; 0x64
 80061cc:	4605      	mov	r5, r0
 80061ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061d6:	b974      	cbnz	r4, 80061f6 <_dtoa_r+0x36>
 80061d8:	2010      	movs	r0, #16
 80061da:	f000 fe1d 	bl	8006e18 <malloc>
 80061de:	4602      	mov	r2, r0
 80061e0:	61e8      	str	r0, [r5, #28]
 80061e2:	b920      	cbnz	r0, 80061ee <_dtoa_r+0x2e>
 80061e4:	21ef      	movs	r1, #239	; 0xef
 80061e6:	4bac      	ldr	r3, [pc, #688]	; (8006498 <_dtoa_r+0x2d8>)
 80061e8:	48ac      	ldr	r0, [pc, #688]	; (800649c <_dtoa_r+0x2dc>)
 80061ea:	f001 fccf 	bl	8007b8c <__assert_func>
 80061ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061f2:	6004      	str	r4, [r0, #0]
 80061f4:	60c4      	str	r4, [r0, #12]
 80061f6:	69eb      	ldr	r3, [r5, #28]
 80061f8:	6819      	ldr	r1, [r3, #0]
 80061fa:	b151      	cbz	r1, 8006212 <_dtoa_r+0x52>
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	2301      	movs	r3, #1
 8006200:	4093      	lsls	r3, r2
 8006202:	604a      	str	r2, [r1, #4]
 8006204:	608b      	str	r3, [r1, #8]
 8006206:	4628      	mov	r0, r5
 8006208:	f000 fefa 	bl	8007000 <_Bfree>
 800620c:	2200      	movs	r2, #0
 800620e:	69eb      	ldr	r3, [r5, #28]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	1e3b      	subs	r3, r7, #0
 8006214:	bfaf      	iteee	ge
 8006216:	2300      	movge	r3, #0
 8006218:	2201      	movlt	r2, #1
 800621a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800621e:	9305      	strlt	r3, [sp, #20]
 8006220:	bfa8      	it	ge
 8006222:	f8c8 3000 	strge.w	r3, [r8]
 8006226:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800622a:	4b9d      	ldr	r3, [pc, #628]	; (80064a0 <_dtoa_r+0x2e0>)
 800622c:	bfb8      	it	lt
 800622e:	f8c8 2000 	strlt.w	r2, [r8]
 8006232:	ea33 0309 	bics.w	r3, r3, r9
 8006236:	d119      	bne.n	800626c <_dtoa_r+0xac>
 8006238:	f242 730f 	movw	r3, #9999	; 0x270f
 800623c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006244:	4333      	orrs	r3, r6
 8006246:	f000 8589 	beq.w	8006d5c <_dtoa_r+0xb9c>
 800624a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800624c:	b953      	cbnz	r3, 8006264 <_dtoa_r+0xa4>
 800624e:	4b95      	ldr	r3, [pc, #596]	; (80064a4 <_dtoa_r+0x2e4>)
 8006250:	e023      	b.n	800629a <_dtoa_r+0xda>
 8006252:	4b95      	ldr	r3, [pc, #596]	; (80064a8 <_dtoa_r+0x2e8>)
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	3308      	adds	r3, #8
 8006258:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	9803      	ldr	r0, [sp, #12]
 800625e:	b019      	add	sp, #100	; 0x64
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	4b8f      	ldr	r3, [pc, #572]	; (80064a4 <_dtoa_r+0x2e4>)
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	3303      	adds	r3, #3
 800626a:	e7f5      	b.n	8006258 <_dtoa_r+0x98>
 800626c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006270:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	f7fa fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8006280:	4680      	mov	r8, r0
 8006282:	b160      	cbz	r0, 800629e <_dtoa_r+0xde>
 8006284:	2301      	movs	r3, #1
 8006286:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8562 	beq.w	8006d56 <_dtoa_r+0xb96>
 8006292:	4b86      	ldr	r3, [pc, #536]	; (80064ac <_dtoa_r+0x2ec>)
 8006294:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	e7de      	b.n	800625c <_dtoa_r+0x9c>
 800629e:	ab16      	add	r3, sp, #88	; 0x58
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	ab17      	add	r3, sp, #92	; 0x5c
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	4628      	mov	r0, r5
 80062a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062ac:	f001 f98a 	bl	80075c4 <__d2b>
 80062b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062b4:	4682      	mov	sl, r0
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	d07e      	beq.n	80063b8 <_dtoa_r+0x1f8>
 80062ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80062cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80062d0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062d4:	4619      	mov	r1, r3
 80062d6:	2200      	movs	r2, #0
 80062d8:	4b75      	ldr	r3, [pc, #468]	; (80064b0 <_dtoa_r+0x2f0>)
 80062da:	f7f9 ff45 	bl	8000168 <__aeabi_dsub>
 80062de:	a368      	add	r3, pc, #416	; (adr r3, 8006480 <_dtoa_r+0x2c0>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7fa f8f8 	bl	80004d8 <__aeabi_dmul>
 80062e8:	a367      	add	r3, pc, #412	; (adr r3, 8006488 <_dtoa_r+0x2c8>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7f9 ff3d 	bl	800016c <__adddf3>
 80062f2:	4606      	mov	r6, r0
 80062f4:	4620      	mov	r0, r4
 80062f6:	460f      	mov	r7, r1
 80062f8:	f7fa f884 	bl	8000404 <__aeabi_i2d>
 80062fc:	a364      	add	r3, pc, #400	; (adr r3, 8006490 <_dtoa_r+0x2d0>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7fa f8e9 	bl	80004d8 <__aeabi_dmul>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7f9 ff2d 	bl	800016c <__adddf3>
 8006312:	4606      	mov	r6, r0
 8006314:	460f      	mov	r7, r1
 8006316:	f7fa fb8f 	bl	8000a38 <__aeabi_d2iz>
 800631a:	2200      	movs	r2, #0
 800631c:	4683      	mov	fp, r0
 800631e:	2300      	movs	r3, #0
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7fa fb4a 	bl	80009bc <__aeabi_dcmplt>
 8006328:	b148      	cbz	r0, 800633e <_dtoa_r+0x17e>
 800632a:	4658      	mov	r0, fp
 800632c:	f7fa f86a 	bl	8000404 <__aeabi_i2d>
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	f7fa fb38 	bl	80009a8 <__aeabi_dcmpeq>
 8006338:	b908      	cbnz	r0, 800633e <_dtoa_r+0x17e>
 800633a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800633e:	f1bb 0f16 	cmp.w	fp, #22
 8006342:	d857      	bhi.n	80063f4 <_dtoa_r+0x234>
 8006344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006348:	4b5a      	ldr	r3, [pc, #360]	; (80064b4 <_dtoa_r+0x2f4>)
 800634a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7fa fb33 	bl	80009bc <__aeabi_dcmplt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d04e      	beq.n	80063f8 <_dtoa_r+0x238>
 800635a:	2300      	movs	r3, #0
 800635c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006360:	930f      	str	r3, [sp, #60]	; 0x3c
 8006362:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006364:	1b1b      	subs	r3, r3, r4
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	bf46      	itte	mi
 800636a:	f1c3 0901 	rsbmi	r9, r3, #1
 800636e:	2300      	movmi	r3, #0
 8006370:	f04f 0900 	movpl.w	r9, #0
 8006374:	9209      	str	r2, [sp, #36]	; 0x24
 8006376:	bf48      	it	mi
 8006378:	9309      	strmi	r3, [sp, #36]	; 0x24
 800637a:	f1bb 0f00 	cmp.w	fp, #0
 800637e:	db3d      	blt.n	80063fc <_dtoa_r+0x23c>
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006386:	445b      	add	r3, fp
 8006388:	9309      	str	r3, [sp, #36]	; 0x24
 800638a:	2300      	movs	r3, #0
 800638c:	930a      	str	r3, [sp, #40]	; 0x28
 800638e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006390:	2b09      	cmp	r3, #9
 8006392:	d867      	bhi.n	8006464 <_dtoa_r+0x2a4>
 8006394:	2b05      	cmp	r3, #5
 8006396:	bfc4      	itt	gt
 8006398:	3b04      	subgt	r3, #4
 800639a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800639c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800639e:	bfc8      	it	gt
 80063a0:	2400      	movgt	r4, #0
 80063a2:	f1a3 0302 	sub.w	r3, r3, #2
 80063a6:	bfd8      	it	le
 80063a8:	2401      	movle	r4, #1
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	f200 8086 	bhi.w	80064bc <_dtoa_r+0x2fc>
 80063b0:	e8df f003 	tbb	[pc, r3]
 80063b4:	5637392c 	.word	0x5637392c
 80063b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063bc:	441c      	add	r4, r3
 80063be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	bfc1      	itttt	gt
 80063c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80063ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80063d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80063d6:	bfd6      	itet	le
 80063d8:	f1c3 0320 	rsble	r3, r3, #32
 80063dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80063e0:	fa06 f003 	lslle.w	r0, r6, r3
 80063e4:	f7f9 fffe 	bl	80003e4 <__aeabi_ui2d>
 80063e8:	2201      	movs	r2, #1
 80063ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063ee:	3c01      	subs	r4, #1
 80063f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80063f2:	e76f      	b.n	80062d4 <_dtoa_r+0x114>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e7b3      	b.n	8006360 <_dtoa_r+0x1a0>
 80063f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80063fa:	e7b2      	b.n	8006362 <_dtoa_r+0x1a2>
 80063fc:	f1cb 0300 	rsb	r3, fp, #0
 8006400:	930a      	str	r3, [sp, #40]	; 0x28
 8006402:	2300      	movs	r3, #0
 8006404:	eba9 090b 	sub.w	r9, r9, fp
 8006408:	930e      	str	r3, [sp, #56]	; 0x38
 800640a:	e7c0      	b.n	800638e <_dtoa_r+0x1ce>
 800640c:	2300      	movs	r3, #0
 800640e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006410:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006412:	2b00      	cmp	r3, #0
 8006414:	dc55      	bgt.n	80064c2 <_dtoa_r+0x302>
 8006416:	2301      	movs	r3, #1
 8006418:	461a      	mov	r2, r3
 800641a:	9306      	str	r3, [sp, #24]
 800641c:	9308      	str	r3, [sp, #32]
 800641e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006420:	e00b      	b.n	800643a <_dtoa_r+0x27a>
 8006422:	2301      	movs	r3, #1
 8006424:	e7f3      	b.n	800640e <_dtoa_r+0x24e>
 8006426:	2300      	movs	r3, #0
 8006428:	930b      	str	r3, [sp, #44]	; 0x2c
 800642a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800642c:	445b      	add	r3, fp
 800642e:	9306      	str	r3, [sp, #24]
 8006430:	3301      	adds	r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	bfb8      	it	lt
 8006438:	2301      	movlt	r3, #1
 800643a:	2100      	movs	r1, #0
 800643c:	2204      	movs	r2, #4
 800643e:	69e8      	ldr	r0, [r5, #28]
 8006440:	f102 0614 	add.w	r6, r2, #20
 8006444:	429e      	cmp	r6, r3
 8006446:	d940      	bls.n	80064ca <_dtoa_r+0x30a>
 8006448:	6041      	str	r1, [r0, #4]
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fd98 	bl	8006f80 <_Balloc>
 8006450:	9003      	str	r0, [sp, #12]
 8006452:	2800      	cmp	r0, #0
 8006454:	d13c      	bne.n	80064d0 <_dtoa_r+0x310>
 8006456:	4602      	mov	r2, r0
 8006458:	f240 11af 	movw	r1, #431	; 0x1af
 800645c:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <_dtoa_r+0x2f8>)
 800645e:	e6c3      	b.n	80061e8 <_dtoa_r+0x28>
 8006460:	2301      	movs	r3, #1
 8006462:	e7e1      	b.n	8006428 <_dtoa_r+0x268>
 8006464:	2401      	movs	r4, #1
 8006466:	2300      	movs	r3, #0
 8006468:	940b      	str	r4, [sp, #44]	; 0x2c
 800646a:	9322      	str	r3, [sp, #136]	; 0x88
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
 8006470:	2200      	movs	r2, #0
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	9308      	str	r3, [sp, #32]
 8006476:	2312      	movs	r3, #18
 8006478:	e7d1      	b.n	800641e <_dtoa_r+0x25e>
 800647a:	bf00      	nop
 800647c:	f3af 8000 	nop.w
 8006480:	636f4361 	.word	0x636f4361
 8006484:	3fd287a7 	.word	0x3fd287a7
 8006488:	8b60c8b3 	.word	0x8b60c8b3
 800648c:	3fc68a28 	.word	0x3fc68a28
 8006490:	509f79fb 	.word	0x509f79fb
 8006494:	3fd34413 	.word	0x3fd34413
 8006498:	08007e27 	.word	0x08007e27
 800649c:	08007e3e 	.word	0x08007e3e
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	08007e23 	.word	0x08007e23
 80064a8:	08007e1a 	.word	0x08007e1a
 80064ac:	08007df7 	.word	0x08007df7
 80064b0:	3ff80000 	.word	0x3ff80000
 80064b4:	08007f28 	.word	0x08007f28
 80064b8:	08007e96 	.word	0x08007e96
 80064bc:	2301      	movs	r3, #1
 80064be:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c0:	e7d4      	b.n	800646c <_dtoa_r+0x2ac>
 80064c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064c4:	9306      	str	r3, [sp, #24]
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	e7b7      	b.n	800643a <_dtoa_r+0x27a>
 80064ca:	3101      	adds	r1, #1
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	e7b7      	b.n	8006440 <_dtoa_r+0x280>
 80064d0:	69eb      	ldr	r3, [r5, #28]
 80064d2:	9a03      	ldr	r2, [sp, #12]
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	9b08      	ldr	r3, [sp, #32]
 80064d8:	2b0e      	cmp	r3, #14
 80064da:	f200 80a8 	bhi.w	800662e <_dtoa_r+0x46e>
 80064de:	2c00      	cmp	r4, #0
 80064e0:	f000 80a5 	beq.w	800662e <_dtoa_r+0x46e>
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	dd34      	ble.n	8006554 <_dtoa_r+0x394>
 80064ea:	4b9a      	ldr	r3, [pc, #616]	; (8006754 <_dtoa_r+0x594>)
 80064ec:	f00b 020f 	and.w	r2, fp, #15
 80064f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006500:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006504:	d016      	beq.n	8006534 <_dtoa_r+0x374>
 8006506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800650a:	4b93      	ldr	r3, [pc, #588]	; (8006758 <_dtoa_r+0x598>)
 800650c:	2703      	movs	r7, #3
 800650e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006512:	f7fa f90b 	bl	800072c <__aeabi_ddiv>
 8006516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800651a:	f004 040f 	and.w	r4, r4, #15
 800651e:	4e8e      	ldr	r6, [pc, #568]	; (8006758 <_dtoa_r+0x598>)
 8006520:	b954      	cbnz	r4, 8006538 <_dtoa_r+0x378>
 8006522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800652a:	f7fa f8ff 	bl	800072c <__aeabi_ddiv>
 800652e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006532:	e029      	b.n	8006588 <_dtoa_r+0x3c8>
 8006534:	2702      	movs	r7, #2
 8006536:	e7f2      	b.n	800651e <_dtoa_r+0x35e>
 8006538:	07e1      	lsls	r1, r4, #31
 800653a:	d508      	bpl.n	800654e <_dtoa_r+0x38e>
 800653c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006540:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800654c:	3701      	adds	r7, #1
 800654e:	1064      	asrs	r4, r4, #1
 8006550:	3608      	adds	r6, #8
 8006552:	e7e5      	b.n	8006520 <_dtoa_r+0x360>
 8006554:	f000 80a5 	beq.w	80066a2 <_dtoa_r+0x4e2>
 8006558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800655c:	f1cb 0400 	rsb	r4, fp, #0
 8006560:	4b7c      	ldr	r3, [pc, #496]	; (8006754 <_dtoa_r+0x594>)
 8006562:	f004 020f 	and.w	r2, r4, #15
 8006566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 ffb3 	bl	80004d8 <__aeabi_dmul>
 8006572:	2702      	movs	r7, #2
 8006574:	2300      	movs	r3, #0
 8006576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800657a:	4e77      	ldr	r6, [pc, #476]	; (8006758 <_dtoa_r+0x598>)
 800657c:	1124      	asrs	r4, r4, #4
 800657e:	2c00      	cmp	r4, #0
 8006580:	f040 8084 	bne.w	800668c <_dtoa_r+0x4cc>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1d2      	bne.n	800652e <_dtoa_r+0x36e>
 8006588:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800658c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8087 	beq.w	80066a6 <_dtoa_r+0x4e6>
 8006598:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800659c:	2200      	movs	r2, #0
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <_dtoa_r+0x59c>)
 80065a0:	f7fa fa0c 	bl	80009bc <__aeabi_dcmplt>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d07e      	beq.n	80066a6 <_dtoa_r+0x4e6>
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d07b      	beq.n	80066a6 <_dtoa_r+0x4e6>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dd38      	ble.n	8006626 <_dtoa_r+0x466>
 80065b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b69      	ldr	r3, [pc, #420]	; (8006760 <_dtoa_r+0x5a0>)
 80065bc:	f7f9 ff8c 	bl	80004d8 <__aeabi_dmul>
 80065c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c4:	9c06      	ldr	r4, [sp, #24]
 80065c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80065ca:	3701      	adds	r7, #1
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7f9 ff19 	bl	8000404 <__aeabi_i2d>
 80065d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d6:	f7f9 ff7f 	bl	80004d8 <__aeabi_dmul>
 80065da:	2200      	movs	r2, #0
 80065dc:	4b61      	ldr	r3, [pc, #388]	; (8006764 <_dtoa_r+0x5a4>)
 80065de:	f7f9 fdc5 	bl	800016c <__adddf3>
 80065e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065ea:	9611      	str	r6, [sp, #68]	; 0x44
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	d15d      	bne.n	80066ac <_dtoa_r+0x4ec>
 80065f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065f4:	2200      	movs	r2, #0
 80065f6:	4b5c      	ldr	r3, [pc, #368]	; (8006768 <_dtoa_r+0x5a8>)
 80065f8:	f7f9 fdb6 	bl	8000168 <__aeabi_dsub>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006604:	4633      	mov	r3, r6
 8006606:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006608:	f7fa f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 8295 	bne.w	8006b3c <_dtoa_r+0x97c>
 8006612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800661c:	f7fa f9ce 	bl	80009bc <__aeabi_dcmplt>
 8006620:	2800      	cmp	r0, #0
 8006622:	f040 8289 	bne.w	8006b38 <_dtoa_r+0x978>
 8006626:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800662a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800662e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f2c0 8151 	blt.w	80068d8 <_dtoa_r+0x718>
 8006636:	f1bb 0f0e 	cmp.w	fp, #14
 800663a:	f300 814d 	bgt.w	80068d8 <_dtoa_r+0x718>
 800663e:	4b45      	ldr	r3, [pc, #276]	; (8006754 <_dtoa_r+0x594>)
 8006640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006644:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006648:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800664c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800664e:	2b00      	cmp	r3, #0
 8006650:	f280 80da 	bge.w	8006808 <_dtoa_r+0x648>
 8006654:	9b08      	ldr	r3, [sp, #32]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f300 80d6 	bgt.w	8006808 <_dtoa_r+0x648>
 800665c:	f040 826b 	bne.w	8006b36 <_dtoa_r+0x976>
 8006660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006664:	2200      	movs	r2, #0
 8006666:	4b40      	ldr	r3, [pc, #256]	; (8006768 <_dtoa_r+0x5a8>)
 8006668:	f7f9 ff36 	bl	80004d8 <__aeabi_dmul>
 800666c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006670:	f7fa f9b8 	bl	80009e4 <__aeabi_dcmpge>
 8006674:	9c08      	ldr	r4, [sp, #32]
 8006676:	4626      	mov	r6, r4
 8006678:	2800      	cmp	r0, #0
 800667a:	f040 8241 	bne.w	8006b00 <_dtoa_r+0x940>
 800667e:	2331      	movs	r3, #49	; 0x31
 8006680:	9f03      	ldr	r7, [sp, #12]
 8006682:	f10b 0b01 	add.w	fp, fp, #1
 8006686:	f807 3b01 	strb.w	r3, [r7], #1
 800668a:	e23d      	b.n	8006b08 <_dtoa_r+0x948>
 800668c:	07e2      	lsls	r2, r4, #31
 800668e:	d505      	bpl.n	800669c <_dtoa_r+0x4dc>
 8006690:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006694:	f7f9 ff20 	bl	80004d8 <__aeabi_dmul>
 8006698:	2301      	movs	r3, #1
 800669a:	3701      	adds	r7, #1
 800669c:	1064      	asrs	r4, r4, #1
 800669e:	3608      	adds	r6, #8
 80066a0:	e76d      	b.n	800657e <_dtoa_r+0x3be>
 80066a2:	2702      	movs	r7, #2
 80066a4:	e770      	b.n	8006588 <_dtoa_r+0x3c8>
 80066a6:	46d8      	mov	r8, fp
 80066a8:	9c08      	ldr	r4, [sp, #32]
 80066aa:	e78f      	b.n	80065cc <_dtoa_r+0x40c>
 80066ac:	9903      	ldr	r1, [sp, #12]
 80066ae:	4b29      	ldr	r3, [pc, #164]	; (8006754 <_dtoa_r+0x594>)
 80066b0:	4421      	add	r1, r4
 80066b2:	9112      	str	r1, [sp, #72]	; 0x48
 80066b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d054      	beq.n	8006770 <_dtoa_r+0x5b0>
 80066c6:	2000      	movs	r0, #0
 80066c8:	4928      	ldr	r1, [pc, #160]	; (800676c <_dtoa_r+0x5ac>)
 80066ca:	f7fa f82f 	bl	800072c <__aeabi_ddiv>
 80066ce:	463b      	mov	r3, r7
 80066d0:	4632      	mov	r2, r6
 80066d2:	f7f9 fd49 	bl	8000168 <__aeabi_dsub>
 80066d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066da:	9f03      	ldr	r7, [sp, #12]
 80066dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e0:	f7fa f9aa 	bl	8000a38 <__aeabi_d2iz>
 80066e4:	4604      	mov	r4, r0
 80066e6:	f7f9 fe8d 	bl	8000404 <__aeabi_i2d>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f2:	f7f9 fd39 	bl	8000168 <__aeabi_dsub>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	3430      	adds	r4, #48	; 0x30
 80066fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006704:	f807 4b01 	strb.w	r4, [r7], #1
 8006708:	f7fa f958 	bl	80009bc <__aeabi_dcmplt>
 800670c:	2800      	cmp	r0, #0
 800670e:	d173      	bne.n	80067f8 <_dtoa_r+0x638>
 8006710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006714:	2000      	movs	r0, #0
 8006716:	4911      	ldr	r1, [pc, #68]	; (800675c <_dtoa_r+0x59c>)
 8006718:	f7f9 fd26 	bl	8000168 <__aeabi_dsub>
 800671c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006720:	f7fa f94c 	bl	80009bc <__aeabi_dcmplt>
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 80b6 	bne.w	8006896 <_dtoa_r+0x6d6>
 800672a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672c:	429f      	cmp	r7, r3
 800672e:	f43f af7a 	beq.w	8006626 <_dtoa_r+0x466>
 8006732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006736:	2200      	movs	r2, #0
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <_dtoa_r+0x5a0>)
 800673a:	f7f9 fecd 	bl	80004d8 <__aeabi_dmul>
 800673e:	2200      	movs	r2, #0
 8006740:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <_dtoa_r+0x5a0>)
 800674a:	f7f9 fec5 	bl	80004d8 <__aeabi_dmul>
 800674e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006752:	e7c3      	b.n	80066dc <_dtoa_r+0x51c>
 8006754:	08007f28 	.word	0x08007f28
 8006758:	08007f00 	.word	0x08007f00
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	40240000 	.word	0x40240000
 8006764:	401c0000 	.word	0x401c0000
 8006768:	40140000 	.word	0x40140000
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7f9 feb0 	bl	80004d8 <__aeabi_dmul>
 8006778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800677a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800677e:	9c03      	ldr	r4, [sp, #12]
 8006780:	9314      	str	r3, [sp, #80]	; 0x50
 8006782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006786:	f7fa f957 	bl	8000a38 <__aeabi_d2iz>
 800678a:	9015      	str	r0, [sp, #84]	; 0x54
 800678c:	f7f9 fe3a 	bl	8000404 <__aeabi_i2d>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006798:	f7f9 fce6 	bl	8000168 <__aeabi_dsub>
 800679c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800679e:	4606      	mov	r6, r0
 80067a0:	3330      	adds	r3, #48	; 0x30
 80067a2:	f804 3b01 	strb.w	r3, [r4], #1
 80067a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067a8:	460f      	mov	r7, r1
 80067aa:	429c      	cmp	r4, r3
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	d124      	bne.n	80067fc <_dtoa_r+0x63c>
 80067b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067b6:	4baf      	ldr	r3, [pc, #700]	; (8006a74 <_dtoa_r+0x8b4>)
 80067b8:	f7f9 fcd8 	bl	800016c <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7fa f918 	bl	80009f8 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d163      	bne.n	8006894 <_dtoa_r+0x6d4>
 80067cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067d0:	2000      	movs	r0, #0
 80067d2:	49a8      	ldr	r1, [pc, #672]	; (8006a74 <_dtoa_r+0x8b4>)
 80067d4:	f7f9 fcc8 	bl	8000168 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7fa f8ec 	bl	80009bc <__aeabi_dcmplt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f43f af1e 	beq.w	8006626 <_dtoa_r+0x466>
 80067ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067ec:	1e7b      	subs	r3, r7, #1
 80067ee:	9314      	str	r3, [sp, #80]	; 0x50
 80067f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d0f8      	beq.n	80067ea <_dtoa_r+0x62a>
 80067f8:	46c3      	mov	fp, r8
 80067fa:	e03b      	b.n	8006874 <_dtoa_r+0x6b4>
 80067fc:	4b9e      	ldr	r3, [pc, #632]	; (8006a78 <_dtoa_r+0x8b8>)
 80067fe:	f7f9 fe6b 	bl	80004d8 <__aeabi_dmul>
 8006802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006806:	e7bc      	b.n	8006782 <_dtoa_r+0x5c2>
 8006808:	9f03      	ldr	r7, [sp, #12]
 800680a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800680e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7f9 ff89 	bl	800072c <__aeabi_ddiv>
 800681a:	f7fa f90d 	bl	8000a38 <__aeabi_d2iz>
 800681e:	4604      	mov	r4, r0
 8006820:	f7f9 fdf0 	bl	8000404 <__aeabi_i2d>
 8006824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006828:	f7f9 fe56 	bl	80004d8 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fc98 	bl	8000168 <__aeabi_dsub>
 8006838:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800683c:	f807 6b01 	strb.w	r6, [r7], #1
 8006840:	9e03      	ldr	r6, [sp, #12]
 8006842:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006846:	1bbe      	subs	r6, r7, r6
 8006848:	45b4      	cmp	ip, r6
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	d136      	bne.n	80068be <_dtoa_r+0x6fe>
 8006850:	f7f9 fc8c 	bl	800016c <__adddf3>
 8006854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	f7fa f8cc 	bl	80009f8 <__aeabi_dcmpgt>
 8006860:	bb58      	cbnz	r0, 80068ba <_dtoa_r+0x6fa>
 8006862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006866:	4640      	mov	r0, r8
 8006868:	4649      	mov	r1, r9
 800686a:	f7fa f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800686e:	b108      	cbz	r0, 8006874 <_dtoa_r+0x6b4>
 8006870:	07e3      	lsls	r3, r4, #31
 8006872:	d422      	bmi.n	80068ba <_dtoa_r+0x6fa>
 8006874:	4651      	mov	r1, sl
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fbc2 	bl	8007000 <_Bfree>
 800687c:	2300      	movs	r3, #0
 800687e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006880:	703b      	strb	r3, [r7, #0]
 8006882:	f10b 0301 	add.w	r3, fp, #1
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800688a:	2b00      	cmp	r3, #0
 800688c:	f43f ace6 	beq.w	800625c <_dtoa_r+0x9c>
 8006890:	601f      	str	r7, [r3, #0]
 8006892:	e4e3      	b.n	800625c <_dtoa_r+0x9c>
 8006894:	4627      	mov	r7, r4
 8006896:	463b      	mov	r3, r7
 8006898:	461f      	mov	r7, r3
 800689a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689e:	2a39      	cmp	r2, #57	; 0x39
 80068a0:	d107      	bne.n	80068b2 <_dtoa_r+0x6f2>
 80068a2:	9a03      	ldr	r2, [sp, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1f7      	bne.n	8006898 <_dtoa_r+0x6d8>
 80068a8:	2230      	movs	r2, #48	; 0x30
 80068aa:	9903      	ldr	r1, [sp, #12]
 80068ac:	f108 0801 	add.w	r8, r8, #1
 80068b0:	700a      	strb	r2, [r1, #0]
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	3201      	adds	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e79e      	b.n	80067f8 <_dtoa_r+0x638>
 80068ba:	46d8      	mov	r8, fp
 80068bc:	e7eb      	b.n	8006896 <_dtoa_r+0x6d6>
 80068be:	2200      	movs	r2, #0
 80068c0:	4b6d      	ldr	r3, [pc, #436]	; (8006a78 <_dtoa_r+0x8b8>)
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4680      	mov	r8, r0
 80068cc:	4689      	mov	r9, r1
 80068ce:	f7fa f86b 	bl	80009a8 <__aeabi_dcmpeq>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d09b      	beq.n	800680e <_dtoa_r+0x64e>
 80068d6:	e7cd      	b.n	8006874 <_dtoa_r+0x6b4>
 80068d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068da:	2a00      	cmp	r2, #0
 80068dc:	f000 80c4 	beq.w	8006a68 <_dtoa_r+0x8a8>
 80068e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	f300 80a8 	bgt.w	8006a38 <_dtoa_r+0x878>
 80068e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	f000 80a0 	beq.w	8006a30 <_dtoa_r+0x870>
 80068f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068f4:	464f      	mov	r7, r9
 80068f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068fa:	2101      	movs	r1, #1
 80068fc:	441a      	add	r2, r3
 80068fe:	4628      	mov	r0, r5
 8006900:	4499      	add	r9, r3
 8006902:	9209      	str	r2, [sp, #36]	; 0x24
 8006904:	f000 fc32 	bl	800716c <__i2b>
 8006908:	4606      	mov	r6, r0
 800690a:	b15f      	cbz	r7, 8006924 <_dtoa_r+0x764>
 800690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	dd08      	ble.n	8006924 <_dtoa_r+0x764>
 8006912:	42bb      	cmp	r3, r7
 8006914:	bfa8      	it	ge
 8006916:	463b      	movge	r3, r7
 8006918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691a:	eba9 0903 	sub.w	r9, r9, r3
 800691e:	1aff      	subs	r7, r7, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	b1f3      	cbz	r3, 8006966 <_dtoa_r+0x7a6>
 8006928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80a0 	beq.w	8006a70 <_dtoa_r+0x8b0>
 8006930:	2c00      	cmp	r4, #0
 8006932:	dd10      	ble.n	8006956 <_dtoa_r+0x796>
 8006934:	4631      	mov	r1, r6
 8006936:	4622      	mov	r2, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fcd5 	bl	80072e8 <__pow5mult>
 800693e:	4652      	mov	r2, sl
 8006940:	4601      	mov	r1, r0
 8006942:	4606      	mov	r6, r0
 8006944:	4628      	mov	r0, r5
 8006946:	f000 fc27 	bl	8007198 <__multiply>
 800694a:	4680      	mov	r8, r0
 800694c:	4651      	mov	r1, sl
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fb56 	bl	8007000 <_Bfree>
 8006954:	46c2      	mov	sl, r8
 8006956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006958:	1b1a      	subs	r2, r3, r4
 800695a:	d004      	beq.n	8006966 <_dtoa_r+0x7a6>
 800695c:	4651      	mov	r1, sl
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fcc2 	bl	80072e8 <__pow5mult>
 8006964:	4682      	mov	sl, r0
 8006966:	2101      	movs	r1, #1
 8006968:	4628      	mov	r0, r5
 800696a:	f000 fbff 	bl	800716c <__i2b>
 800696e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006970:	4604      	mov	r4, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	f340 8082 	ble.w	8006a7c <_dtoa_r+0x8bc>
 8006978:	461a      	mov	r2, r3
 800697a:	4601      	mov	r1, r0
 800697c:	4628      	mov	r0, r5
 800697e:	f000 fcb3 	bl	80072e8 <__pow5mult>
 8006982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006984:	4604      	mov	r4, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	dd7b      	ble.n	8006a82 <_dtoa_r+0x8c2>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006994:	6918      	ldr	r0, [r3, #16]
 8006996:	f000 fb9b 	bl	80070d0 <__hi0bits>
 800699a:	f1c0 0020 	rsb	r0, r0, #32
 800699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a0:	4418      	add	r0, r3
 80069a2:	f010 001f 	ands.w	r0, r0, #31
 80069a6:	f000 8092 	beq.w	8006ace <_dtoa_r+0x90e>
 80069aa:	f1c0 0320 	rsb	r3, r0, #32
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	f340 8085 	ble.w	8006abe <_dtoa_r+0x8fe>
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	f1c0 001c 	rsb	r0, r0, #28
 80069ba:	4403      	add	r3, r0
 80069bc:	4481      	add	r9, r0
 80069be:	4407      	add	r7, r0
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	dd05      	ble.n	80069d4 <_dtoa_r+0x814>
 80069c8:	4651      	mov	r1, sl
 80069ca:	464a      	mov	r2, r9
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 fce5 	bl	800739c <__lshift>
 80069d2:	4682      	mov	sl, r0
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd05      	ble.n	80069e6 <_dtoa_r+0x826>
 80069da:	4621      	mov	r1, r4
 80069dc:	461a      	mov	r2, r3
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 fcdc 	bl	800739c <__lshift>
 80069e4:	4604      	mov	r4, r0
 80069e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d072      	beq.n	8006ad2 <_dtoa_r+0x912>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4650      	mov	r0, sl
 80069f0:	f000 fd40 	bl	8007474 <__mcmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	da6c      	bge.n	8006ad2 <_dtoa_r+0x912>
 80069f8:	2300      	movs	r3, #0
 80069fa:	4651      	mov	r1, sl
 80069fc:	220a      	movs	r2, #10
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fb20 	bl	8007044 <__multadd>
 8006a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a06:	4682      	mov	sl, r0
 8006a08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 81ac 	beq.w	8006d6a <_dtoa_r+0xbaa>
 8006a12:	2300      	movs	r3, #0
 8006a14:	4631      	mov	r1, r6
 8006a16:	220a      	movs	r2, #10
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 fb13 	bl	8007044 <__multadd>
 8006a1e:	9b06      	ldr	r3, [sp, #24]
 8006a20:	4606      	mov	r6, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f300 8093 	bgt.w	8006b4e <_dtoa_r+0x98e>
 8006a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	dc59      	bgt.n	8006ae2 <_dtoa_r+0x922>
 8006a2e:	e08e      	b.n	8006b4e <_dtoa_r+0x98e>
 8006a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a36:	e75d      	b.n	80068f4 <_dtoa_r+0x734>
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	1e5c      	subs	r4, r3, #1
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	bfbf      	itttt	lt
 8006a42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006a46:	1ae3      	sublt	r3, r4, r3
 8006a48:	18d2      	addlt	r2, r2, r3
 8006a4a:	bfa8      	it	ge
 8006a4c:	1b1c      	subge	r4, r3, r4
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	bfbe      	ittt	lt
 8006a52:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a54:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006a56:	2400      	movlt	r4, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bfb5      	itete	lt
 8006a5c:	eba9 0703 	sublt.w	r7, r9, r3
 8006a60:	464f      	movge	r7, r9
 8006a62:	2300      	movlt	r3, #0
 8006a64:	9b08      	ldrge	r3, [sp, #32]
 8006a66:	e747      	b.n	80068f8 <_dtoa_r+0x738>
 8006a68:	464f      	mov	r7, r9
 8006a6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a6e:	e74c      	b.n	800690a <_dtoa_r+0x74a>
 8006a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a72:	e773      	b.n	800695c <_dtoa_r+0x79c>
 8006a74:	3fe00000 	.word	0x3fe00000
 8006a78:	40240000 	.word	0x40240000
 8006a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	dc18      	bgt.n	8006ab4 <_dtoa_r+0x8f4>
 8006a82:	9b04      	ldr	r3, [sp, #16]
 8006a84:	b9b3      	cbnz	r3, 8006ab4 <_dtoa_r+0x8f4>
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a8c:	b993      	cbnz	r3, 8006ab4 <_dtoa_r+0x8f4>
 8006a8e:	9b05      	ldr	r3, [sp, #20]
 8006a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a94:	0d1b      	lsrs	r3, r3, #20
 8006a96:	051b      	lsls	r3, r3, #20
 8006a98:	b17b      	cbz	r3, 8006aba <_dtoa_r+0x8fa>
 8006a9a:	f04f 0801 	mov.w	r8, #1
 8006a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa0:	f109 0901 	add.w	r9, r9, #1
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f af6f 	bne.w	800698e <_dtoa_r+0x7ce>
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	e774      	b.n	800699e <_dtoa_r+0x7de>
 8006ab4:	f04f 0800 	mov.w	r8, #0
 8006ab8:	e7f6      	b.n	8006aa8 <_dtoa_r+0x8e8>
 8006aba:	4698      	mov	r8, r3
 8006abc:	e7f4      	b.n	8006aa8 <_dtoa_r+0x8e8>
 8006abe:	d080      	beq.n	80069c2 <_dtoa_r+0x802>
 8006ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac2:	331c      	adds	r3, #28
 8006ac4:	441a      	add	r2, r3
 8006ac6:	4499      	add	r9, r3
 8006ac8:	441f      	add	r7, r3
 8006aca:	9209      	str	r2, [sp, #36]	; 0x24
 8006acc:	e779      	b.n	80069c2 <_dtoa_r+0x802>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	e7f6      	b.n	8006ac0 <_dtoa_r+0x900>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dc34      	bgt.n	8006b42 <_dtoa_r+0x982>
 8006ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	dd31      	ble.n	8006b42 <_dtoa_r+0x982>
 8006ade:	9b08      	ldr	r3, [sp, #32]
 8006ae0:	9306      	str	r3, [sp, #24]
 8006ae2:	9b06      	ldr	r3, [sp, #24]
 8006ae4:	b963      	cbnz	r3, 8006b00 <_dtoa_r+0x940>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	2205      	movs	r2, #5
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 faaa 	bl	8007044 <__multadd>
 8006af0:	4601      	mov	r1, r0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4650      	mov	r0, sl
 8006af6:	f000 fcbd 	bl	8007474 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f73f adbf 	bgt.w	800667e <_dtoa_r+0x4be>
 8006b00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b02:	9f03      	ldr	r7, [sp, #12]
 8006b04:	ea6f 0b03 	mvn.w	fp, r3
 8006b08:	f04f 0800 	mov.w	r8, #0
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fa76 	bl	8007000 <_Bfree>
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	f43f aead 	beq.w	8006874 <_dtoa_r+0x6b4>
 8006b1a:	f1b8 0f00 	cmp.w	r8, #0
 8006b1e:	d005      	beq.n	8006b2c <_dtoa_r+0x96c>
 8006b20:	45b0      	cmp	r8, r6
 8006b22:	d003      	beq.n	8006b2c <_dtoa_r+0x96c>
 8006b24:	4641      	mov	r1, r8
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fa6a 	bl	8007000 <_Bfree>
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fa66 	bl	8007000 <_Bfree>
 8006b34:	e69e      	b.n	8006874 <_dtoa_r+0x6b4>
 8006b36:	2400      	movs	r4, #0
 8006b38:	4626      	mov	r6, r4
 8006b3a:	e7e1      	b.n	8006b00 <_dtoa_r+0x940>
 8006b3c:	46c3      	mov	fp, r8
 8006b3e:	4626      	mov	r6, r4
 8006b40:	e59d      	b.n	800667e <_dtoa_r+0x4be>
 8006b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80c8 	beq.w	8006cda <_dtoa_r+0xb1a>
 8006b4a:	9b08      	ldr	r3, [sp, #32]
 8006b4c:	9306      	str	r3, [sp, #24]
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	dd05      	ble.n	8006b5e <_dtoa_r+0x99e>
 8006b52:	4631      	mov	r1, r6
 8006b54:	463a      	mov	r2, r7
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fc20 	bl	800739c <__lshift>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	d05b      	beq.n	8006c1c <_dtoa_r+0xa5c>
 8006b64:	4628      	mov	r0, r5
 8006b66:	6871      	ldr	r1, [r6, #4]
 8006b68:	f000 fa0a 	bl	8006f80 <_Balloc>
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	b928      	cbnz	r0, 8006b7c <_dtoa_r+0x9bc>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b76:	4b81      	ldr	r3, [pc, #516]	; (8006d7c <_dtoa_r+0xbbc>)
 8006b78:	f7ff bb36 	b.w	80061e8 <_dtoa_r+0x28>
 8006b7c:	6932      	ldr	r2, [r6, #16]
 8006b7e:	f106 010c 	add.w	r1, r6, #12
 8006b82:	3202      	adds	r2, #2
 8006b84:	0092      	lsls	r2, r2, #2
 8006b86:	300c      	adds	r0, #12
 8006b88:	f000 fff2 	bl	8007b70 <memcpy>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 fc03 	bl	800739c <__lshift>
 8006b96:	46b0      	mov	r8, r6
 8006b98:	4606      	mov	r6, r0
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	9a03      	ldr	r2, [sp, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b06      	ldr	r3, [sp, #24]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	f7ff fa78 	bl	80060ae <quorem>
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	9006      	str	r0, [sp, #24]
 8006bc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006bc6:	4650      	mov	r0, sl
 8006bc8:	f000 fc54 	bl	8007474 <__mcmp>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	9009      	str	r0, [sp, #36]	; 0x24
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fc6a 	bl	80074ac <__mdiff>
 8006bd8:	68c2      	ldr	r2, [r0, #12]
 8006bda:	4607      	mov	r7, r0
 8006bdc:	bb02      	cbnz	r2, 8006c20 <_dtoa_r+0xa60>
 8006bde:	4601      	mov	r1, r0
 8006be0:	4650      	mov	r0, sl
 8006be2:	f000 fc47 	bl	8007474 <__mcmp>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4639      	mov	r1, r7
 8006bea:	4628      	mov	r0, r5
 8006bec:	920c      	str	r2, [sp, #48]	; 0x30
 8006bee:	f000 fa07 	bl	8007000 <_Bfree>
 8006bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf6:	9f08      	ldr	r7, [sp, #32]
 8006bf8:	ea43 0102 	orr.w	r1, r3, r2
 8006bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfe:	4319      	orrs	r1, r3
 8006c00:	d110      	bne.n	8006c24 <_dtoa_r+0xa64>
 8006c02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c06:	d029      	beq.n	8006c5c <_dtoa_r+0xa9c>
 8006c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dd02      	ble.n	8006c14 <_dtoa_r+0xa54>
 8006c0e:	9b06      	ldr	r3, [sp, #24]
 8006c10:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	f883 9000 	strb.w	r9, [r3]
 8006c1a:	e777      	b.n	8006b0c <_dtoa_r+0x94c>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	e7ba      	b.n	8006b96 <_dtoa_r+0x9d6>
 8006c20:	2201      	movs	r2, #1
 8006c22:	e7e1      	b.n	8006be8 <_dtoa_r+0xa28>
 8006c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db04      	blt.n	8006c34 <_dtoa_r+0xa74>
 8006c2a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c30:	430b      	orrs	r3, r1
 8006c32:	d120      	bne.n	8006c76 <_dtoa_r+0xab6>
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	dded      	ble.n	8006c14 <_dtoa_r+0xa54>
 8006c38:	4651      	mov	r1, sl
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 fbad 	bl	800739c <__lshift>
 8006c42:	4621      	mov	r1, r4
 8006c44:	4682      	mov	sl, r0
 8006c46:	f000 fc15 	bl	8007474 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	dc03      	bgt.n	8006c56 <_dtoa_r+0xa96>
 8006c4e:	d1e1      	bne.n	8006c14 <_dtoa_r+0xa54>
 8006c50:	f019 0f01 	tst.w	r9, #1
 8006c54:	d0de      	beq.n	8006c14 <_dtoa_r+0xa54>
 8006c56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c5a:	d1d8      	bne.n	8006c0e <_dtoa_r+0xa4e>
 8006c5c:	2339      	movs	r3, #57	; 0x39
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	7013      	strb	r3, [r2, #0]
 8006c62:	463b      	mov	r3, r7
 8006c64:	461f      	mov	r7, r3
 8006c66:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	2a39      	cmp	r2, #57	; 0x39
 8006c6e:	d06b      	beq.n	8006d48 <_dtoa_r+0xb88>
 8006c70:	3201      	adds	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e74a      	b.n	8006b0c <_dtoa_r+0x94c>
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	dd07      	ble.n	8006c8a <_dtoa_r+0xaca>
 8006c7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c7e:	d0ed      	beq.n	8006c5c <_dtoa_r+0xa9c>
 8006c80:	9a04      	ldr	r2, [sp, #16]
 8006c82:	f109 0301 	add.w	r3, r9, #1
 8006c86:	7013      	strb	r3, [r2, #0]
 8006c88:	e740      	b.n	8006b0c <_dtoa_r+0x94c>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c8e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d042      	beq.n	8006d1c <_dtoa_r+0xb5c>
 8006c96:	4651      	mov	r1, sl
 8006c98:	2300      	movs	r3, #0
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 f9d1 	bl	8007044 <__multadd>
 8006ca2:	45b0      	cmp	r8, r6
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	f04f 020a 	mov.w	r2, #10
 8006cae:	4641      	mov	r1, r8
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	d107      	bne.n	8006cc4 <_dtoa_r+0xb04>
 8006cb4:	f000 f9c6 	bl	8007044 <__multadd>
 8006cb8:	4680      	mov	r8, r0
 8006cba:	4606      	mov	r6, r0
 8006cbc:	9b08      	ldr	r3, [sp, #32]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	e775      	b.n	8006bb0 <_dtoa_r+0x9f0>
 8006cc4:	f000 f9be 	bl	8007044 <__multadd>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4680      	mov	r8, r0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	220a      	movs	r2, #10
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f9b7 	bl	8007044 <__multadd>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	e7f0      	b.n	8006cbc <_dtoa_r+0xafc>
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	9306      	str	r3, [sp, #24]
 8006cde:	9f03      	ldr	r7, [sp, #12]
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f7ff f9e3 	bl	80060ae <quorem>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cee:	f807 9b01 	strb.w	r9, [r7], #1
 8006cf2:	1afa      	subs	r2, r7, r3
 8006cf4:	9b06      	ldr	r3, [sp, #24]
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	dd07      	ble.n	8006d0a <_dtoa_r+0xb4a>
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	220a      	movs	r2, #10
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f99f 	bl	8007044 <__multadd>
 8006d06:	4682      	mov	sl, r0
 8006d08:	e7ea      	b.n	8006ce0 <_dtoa_r+0xb20>
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	f04f 0800 	mov.w	r8, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfcc      	ite	gt
 8006d14:	461f      	movgt	r7, r3
 8006d16:	2701      	movle	r7, #1
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	441f      	add	r7, r3
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fb3b 	bl	800739c <__lshift>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4682      	mov	sl, r0
 8006d2a:	f000 fba3 	bl	8007474 <__mcmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	dc97      	bgt.n	8006c62 <_dtoa_r+0xaa2>
 8006d32:	d102      	bne.n	8006d3a <_dtoa_r+0xb7a>
 8006d34:	f019 0f01 	tst.w	r9, #1
 8006d38:	d193      	bne.n	8006c62 <_dtoa_r+0xaa2>
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	461f      	mov	r7, r3
 8006d3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d42:	2a30      	cmp	r2, #48	; 0x30
 8006d44:	d0fa      	beq.n	8006d3c <_dtoa_r+0xb7c>
 8006d46:	e6e1      	b.n	8006b0c <_dtoa_r+0x94c>
 8006d48:	9a03      	ldr	r2, [sp, #12]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d18a      	bne.n	8006c64 <_dtoa_r+0xaa4>
 8006d4e:	2331      	movs	r3, #49	; 0x31
 8006d50:	f10b 0b01 	add.w	fp, fp, #1
 8006d54:	e797      	b.n	8006c86 <_dtoa_r+0xac6>
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <_dtoa_r+0xbc0>)
 8006d58:	f7ff ba9f 	b.w	800629a <_dtoa_r+0xda>
 8006d5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f aa77 	bne.w	8006252 <_dtoa_r+0x92>
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <_dtoa_r+0xbc4>)
 8006d66:	f7ff ba98 	b.w	800629a <_dtoa_r+0xda>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dcb6      	bgt.n	8006cde <_dtoa_r+0xb1e>
 8006d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f73f aeb5 	bgt.w	8006ae2 <_dtoa_r+0x922>
 8006d78:	e7b1      	b.n	8006cde <_dtoa_r+0xb1e>
 8006d7a:	bf00      	nop
 8006d7c:	08007e96 	.word	0x08007e96
 8006d80:	08007df6 	.word	0x08007df6
 8006d84:	08007e1a 	.word	0x08007e1a

08006d88 <_free_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d040      	beq.n	8006e12 <_free_r+0x8a>
 8006d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d94:	1f0c      	subs	r4, r1, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfb8      	it	lt
 8006d9a:	18e4      	addlt	r4, r4, r3
 8006d9c:	f000 f8e4 	bl	8006f68 <__malloc_lock>
 8006da0:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <_free_r+0x8c>)
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x2c>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db0:	f000 b8e0 	b.w	8006f74 <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x42>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1809      	addeq	r1, r1, r0
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x1e>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x4c>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x42>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1850      	adds	r0, r2, r1
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x6c>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	4401      	add	r1, r0
 8006de0:	1850      	adds	r0, r2, r1
 8006de2:	4283      	cmp	r3, r0
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x22>
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4408      	add	r0, r1
 8006dee:	6010      	str	r0, [r2, #0]
 8006df0:	6053      	str	r3, [r2, #4]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x22>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x74>
 8006df6:	230c      	movs	r3, #12
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x22>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	1821      	adds	r1, r4, r0
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf01      	itttt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	1809      	addeq	r1, r1, r0
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6054      	str	r4, [r2, #4]
 8006e10:	e7cb      	b.n	8006daa <_free_r+0x22>
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	2000047c 	.word	0x2000047c

08006e18 <malloc>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <malloc+0xc>)
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f000 b823 	b.w	8006e68 <_malloc_r>
 8006e22:	bf00      	nop
 8006e24:	20000064 	.word	0x20000064

08006e28 <sbrk_aligned>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0e      	ldr	r6, [pc, #56]	; (8006e64 <sbrk_aligned+0x3c>)
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6831      	ldr	r1, [r6, #0]
 8006e30:	4605      	mov	r5, r0
 8006e32:	b911      	cbnz	r1, 8006e3a <sbrk_aligned+0x12>
 8006e34:	f000 fe8c 	bl	8007b50 <_sbrk_r>
 8006e38:	6030      	str	r0, [r6, #0]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fe87 	bl	8007b50 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d00a      	beq.n	8006e5c <sbrk_aligned+0x34>
 8006e46:	1cc4      	adds	r4, r0, #3
 8006e48:	f024 0403 	bic.w	r4, r4, #3
 8006e4c:	42a0      	cmp	r0, r4
 8006e4e:	d007      	beq.n	8006e60 <sbrk_aligned+0x38>
 8006e50:	1a21      	subs	r1, r4, r0
 8006e52:	4628      	mov	r0, r5
 8006e54:	f000 fe7c 	bl	8007b50 <_sbrk_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d101      	bne.n	8006e60 <sbrk_aligned+0x38>
 8006e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e60:	4620      	mov	r0, r4
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	20000480 	.word	0x20000480

08006e68 <_malloc_r>:
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	1ccd      	adds	r5, r1, #3
 8006e6e:	f025 0503 	bic.w	r5, r5, #3
 8006e72:	3508      	adds	r5, #8
 8006e74:	2d0c      	cmp	r5, #12
 8006e76:	bf38      	it	cc
 8006e78:	250c      	movcc	r5, #12
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	db01      	blt.n	8006e84 <_malloc_r+0x1c>
 8006e80:	42a9      	cmp	r1, r5
 8006e82:	d905      	bls.n	8006e90 <_malloc_r+0x28>
 8006e84:	230c      	movs	r3, #12
 8006e86:	2600      	movs	r6, #0
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f64 <_malloc_r+0xfc>
 8006e94:	f000 f868 	bl	8006f68 <__malloc_lock>
 8006e98:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	bb5c      	cbnz	r4, 8006ef8 <_malloc_r+0x90>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f7ff ffc0 	bl	8006e28 <sbrk_aligned>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	4604      	mov	r4, r0
 8006eac:	d155      	bne.n	8006f5a <_malloc_r+0xf2>
 8006eae:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb2:	4626      	mov	r6, r4
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	d145      	bne.n	8006f44 <_malloc_r+0xdc>
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d048      	beq.n	8006f4e <_malloc_r+0xe6>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	eb04 0903 	add.w	r9, r4, r3
 8006ec6:	f000 fe43 	bl	8007b50 <_sbrk_r>
 8006eca:	4581      	cmp	r9, r0
 8006ecc:	d13f      	bne.n	8006f4e <_malloc_r+0xe6>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	1a6d      	subs	r5, r5, r1
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7ff ffa7 	bl	8006e28 <sbrk_aligned>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d037      	beq.n	8006f4e <_malloc_r+0xe6>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	442b      	add	r3, r5
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d038      	beq.n	8006f5e <_malloc_r+0xf6>
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	d12b      	bne.n	8006f4a <_malloc_r+0xe2>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	e00f      	b.n	8006f18 <_malloc_r+0xb0>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	1b52      	subs	r2, r2, r5
 8006efc:	d41f      	bmi.n	8006f3e <_malloc_r+0xd6>
 8006efe:	2a0b      	cmp	r2, #11
 8006f00:	d917      	bls.n	8006f32 <_malloc_r+0xca>
 8006f02:	1961      	adds	r1, r4, r5
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	6025      	str	r5, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	6059      	strne	r1, [r3, #4]
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	bf08      	it	eq
 8006f10:	f8c8 1000 	streq.w	r1, [r8]
 8006f14:	5162      	str	r2, [r4, r5]
 8006f16:	604b      	str	r3, [r1, #4]
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f104 060b 	add.w	r6, r4, #11
 8006f1e:	f000 f829 	bl	8006f74 <__malloc_unlock>
 8006f22:	f026 0607 	bic.w	r6, r6, #7
 8006f26:	1d23      	adds	r3, r4, #4
 8006f28:	1af2      	subs	r2, r6, r3
 8006f2a:	d0ae      	beq.n	8006e8a <_malloc_r+0x22>
 8006f2c:	1b9b      	subs	r3, r3, r6
 8006f2e:	50a3      	str	r3, [r4, r2]
 8006f30:	e7ab      	b.n	8006e8a <_malloc_r+0x22>
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	6862      	ldr	r2, [r4, #4]
 8006f36:	d1dd      	bne.n	8006ef4 <_malloc_r+0x8c>
 8006f38:	f8c8 2000 	str.w	r2, [r8]
 8006f3c:	e7ec      	b.n	8006f18 <_malloc_r+0xb0>
 8006f3e:	4623      	mov	r3, r4
 8006f40:	6864      	ldr	r4, [r4, #4]
 8006f42:	e7ac      	b.n	8006e9e <_malloc_r+0x36>
 8006f44:	4634      	mov	r4, r6
 8006f46:	6876      	ldr	r6, [r6, #4]
 8006f48:	e7b4      	b.n	8006eb4 <_malloc_r+0x4c>
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	e7cc      	b.n	8006ee8 <_malloc_r+0x80>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	4638      	mov	r0, r7
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	f000 f80e 	bl	8006f74 <__malloc_unlock>
 8006f58:	e797      	b.n	8006e8a <_malloc_r+0x22>
 8006f5a:	6025      	str	r5, [r4, #0]
 8006f5c:	e7dc      	b.n	8006f18 <_malloc_r+0xb0>
 8006f5e:	605b      	str	r3, [r3, #4]
 8006f60:	deff      	udf	#255	; 0xff
 8006f62:	bf00      	nop
 8006f64:	2000047c 	.word	0x2000047c

08006f68 <__malloc_lock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_lock+0x8>)
 8006f6a:	f7ff b890 	b.w	800608e <__retarget_lock_acquire_recursive>
 8006f6e:	bf00      	nop
 8006f70:	20000478 	.word	0x20000478

08006f74 <__malloc_unlock>:
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <__malloc_unlock+0x8>)
 8006f76:	f7ff b88b 	b.w	8006090 <__retarget_lock_release_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	20000478 	.word	0x20000478

08006f80 <_Balloc>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	69c6      	ldr	r6, [r0, #28]
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	b976      	cbnz	r6, 8006fa8 <_Balloc+0x28>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f7ff ff44 	bl	8006e18 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	61e0      	str	r0, [r4, #28]
 8006f94:	b920      	cbnz	r0, 8006fa0 <_Balloc+0x20>
 8006f96:	216b      	movs	r1, #107	; 0x6b
 8006f98:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <_Balloc+0x78>)
 8006f9a:	4818      	ldr	r0, [pc, #96]	; (8006ffc <_Balloc+0x7c>)
 8006f9c:	f000 fdf6 	bl	8007b8c <__assert_func>
 8006fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa4:	6006      	str	r6, [r0, #0]
 8006fa6:	60c6      	str	r6, [r0, #12]
 8006fa8:	69e6      	ldr	r6, [r4, #28]
 8006faa:	68f3      	ldr	r3, [r6, #12]
 8006fac:	b183      	cbz	r3, 8006fd0 <_Balloc+0x50>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fb6:	b9b8      	cbnz	r0, 8006fe8 <_Balloc+0x68>
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f605 	lsl.w	r6, r1, r5
 8006fbe:	1d72      	adds	r2, r6, #5
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	0092      	lsls	r2, r2, #2
 8006fc4:	f000 fe00 	bl	8007bc8 <_calloc_r>
 8006fc8:	b160      	cbz	r0, 8006fe4 <_Balloc+0x64>
 8006fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fce:	e00e      	b.n	8006fee <_Balloc+0x6e>
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 fdf7 	bl	8007bc8 <_calloc_r>
 8006fda:	69e3      	ldr	r3, [r4, #28]
 8006fdc:	60f0      	str	r0, [r6, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <_Balloc+0x2e>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	6802      	ldr	r2, [r0, #0]
 8006fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff4:	e7f7      	b.n	8006fe6 <_Balloc+0x66>
 8006ff6:	bf00      	nop
 8006ff8:	08007e27 	.word	0x08007e27
 8006ffc:	08007ea7 	.word	0x08007ea7

08007000 <_Bfree>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	69c6      	ldr	r6, [r0, #28]
 8007004:	4605      	mov	r5, r0
 8007006:	460c      	mov	r4, r1
 8007008:	b976      	cbnz	r6, 8007028 <_Bfree+0x28>
 800700a:	2010      	movs	r0, #16
 800700c:	f7ff ff04 	bl	8006e18 <malloc>
 8007010:	4602      	mov	r2, r0
 8007012:	61e8      	str	r0, [r5, #28]
 8007014:	b920      	cbnz	r0, 8007020 <_Bfree+0x20>
 8007016:	218f      	movs	r1, #143	; 0x8f
 8007018:	4b08      	ldr	r3, [pc, #32]	; (800703c <_Bfree+0x3c>)
 800701a:	4809      	ldr	r0, [pc, #36]	; (8007040 <_Bfree+0x40>)
 800701c:	f000 fdb6 	bl	8007b8c <__assert_func>
 8007020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007024:	6006      	str	r6, [r0, #0]
 8007026:	60c6      	str	r6, [r0, #12]
 8007028:	b13c      	cbz	r4, 800703a <_Bfree+0x3a>
 800702a:	69eb      	ldr	r3, [r5, #28]
 800702c:	6862      	ldr	r2, [r4, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007034:	6021      	str	r1, [r4, #0]
 8007036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	08007e27 	.word	0x08007e27
 8007040:	08007ea7 	.word	0x08007ea7

08007044 <__multadd>:
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	4607      	mov	r7, r0
 800704a:	460c      	mov	r4, r1
 800704c:	461e      	mov	r6, r3
 800704e:	2000      	movs	r0, #0
 8007050:	690d      	ldr	r5, [r1, #16]
 8007052:	f101 0c14 	add.w	ip, r1, #20
 8007056:	f8dc 3000 	ldr.w	r3, [ip]
 800705a:	3001      	adds	r0, #1
 800705c:	b299      	uxth	r1, r3
 800705e:	fb02 6101 	mla	r1, r2, r1, r6
 8007062:	0c1e      	lsrs	r6, r3, #16
 8007064:	0c0b      	lsrs	r3, r1, #16
 8007066:	fb02 3306 	mla	r3, r2, r6, r3
 800706a:	b289      	uxth	r1, r1
 800706c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007070:	4285      	cmp	r5, r0
 8007072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007076:	f84c 1b04 	str.w	r1, [ip], #4
 800707a:	dcec      	bgt.n	8007056 <__multadd+0x12>
 800707c:	b30e      	cbz	r6, 80070c2 <__multadd+0x7e>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc19      	bgt.n	80070b8 <__multadd+0x74>
 8007084:	6861      	ldr	r1, [r4, #4]
 8007086:	4638      	mov	r0, r7
 8007088:	3101      	adds	r1, #1
 800708a:	f7ff ff79 	bl	8006f80 <_Balloc>
 800708e:	4680      	mov	r8, r0
 8007090:	b928      	cbnz	r0, 800709e <__multadd+0x5a>
 8007092:	4602      	mov	r2, r0
 8007094:	21ba      	movs	r1, #186	; 0xba
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <__multadd+0x84>)
 8007098:	480c      	ldr	r0, [pc, #48]	; (80070cc <__multadd+0x88>)
 800709a:	f000 fd77 	bl	8007b8c <__assert_func>
 800709e:	6922      	ldr	r2, [r4, #16]
 80070a0:	f104 010c 	add.w	r1, r4, #12
 80070a4:	3202      	adds	r2, #2
 80070a6:	0092      	lsls	r2, r2, #2
 80070a8:	300c      	adds	r0, #12
 80070aa:	f000 fd61 	bl	8007b70 <memcpy>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ffa5 	bl	8007000 <_Bfree>
 80070b6:	4644      	mov	r4, r8
 80070b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070bc:	3501      	adds	r5, #1
 80070be:	615e      	str	r6, [r3, #20]
 80070c0:	6125      	str	r5, [r4, #16]
 80070c2:	4620      	mov	r0, r4
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	08007e96 	.word	0x08007e96
 80070cc:	08007ea7 	.word	0x08007ea7

080070d0 <__hi0bits>:
 80070d0:	0c02      	lsrs	r2, r0, #16
 80070d2:	0412      	lsls	r2, r2, #16
 80070d4:	4603      	mov	r3, r0
 80070d6:	b9ca      	cbnz	r2, 800710c <__hi0bits+0x3c>
 80070d8:	0403      	lsls	r3, r0, #16
 80070da:	2010      	movs	r0, #16
 80070dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070e0:	bf04      	itt	eq
 80070e2:	021b      	lsleq	r3, r3, #8
 80070e4:	3008      	addeq	r0, #8
 80070e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070ea:	bf04      	itt	eq
 80070ec:	011b      	lsleq	r3, r3, #4
 80070ee:	3004      	addeq	r0, #4
 80070f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070f4:	bf04      	itt	eq
 80070f6:	009b      	lsleq	r3, r3, #2
 80070f8:	3002      	addeq	r0, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	db05      	blt.n	800710a <__hi0bits+0x3a>
 80070fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007102:	f100 0001 	add.w	r0, r0, #1
 8007106:	bf08      	it	eq
 8007108:	2020      	moveq	r0, #32
 800710a:	4770      	bx	lr
 800710c:	2000      	movs	r0, #0
 800710e:	e7e5      	b.n	80070dc <__hi0bits+0xc>

08007110 <__lo0bits>:
 8007110:	6803      	ldr	r3, [r0, #0]
 8007112:	4602      	mov	r2, r0
 8007114:	f013 0007 	ands.w	r0, r3, #7
 8007118:	d00b      	beq.n	8007132 <__lo0bits+0x22>
 800711a:	07d9      	lsls	r1, r3, #31
 800711c:	d421      	bmi.n	8007162 <__lo0bits+0x52>
 800711e:	0798      	lsls	r0, r3, #30
 8007120:	bf49      	itett	mi
 8007122:	085b      	lsrmi	r3, r3, #1
 8007124:	089b      	lsrpl	r3, r3, #2
 8007126:	2001      	movmi	r0, #1
 8007128:	6013      	strmi	r3, [r2, #0]
 800712a:	bf5c      	itt	pl
 800712c:	2002      	movpl	r0, #2
 800712e:	6013      	strpl	r3, [r2, #0]
 8007130:	4770      	bx	lr
 8007132:	b299      	uxth	r1, r3
 8007134:	b909      	cbnz	r1, 800713a <__lo0bits+0x2a>
 8007136:	2010      	movs	r0, #16
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	b909      	cbnz	r1, 8007142 <__lo0bits+0x32>
 800713e:	3008      	adds	r0, #8
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	0719      	lsls	r1, r3, #28
 8007144:	bf04      	itt	eq
 8007146:	091b      	lsreq	r3, r3, #4
 8007148:	3004      	addeq	r0, #4
 800714a:	0799      	lsls	r1, r3, #30
 800714c:	bf04      	itt	eq
 800714e:	089b      	lsreq	r3, r3, #2
 8007150:	3002      	addeq	r0, #2
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d403      	bmi.n	800715e <__lo0bits+0x4e>
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	f100 0001 	add.w	r0, r0, #1
 800715c:	d003      	beq.n	8007166 <__lo0bits+0x56>
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4770      	bx	lr
 8007162:	2000      	movs	r0, #0
 8007164:	4770      	bx	lr
 8007166:	2020      	movs	r0, #32
 8007168:	4770      	bx	lr
	...

0800716c <__i2b>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	2101      	movs	r1, #1
 8007172:	f7ff ff05 	bl	8006f80 <_Balloc>
 8007176:	4602      	mov	r2, r0
 8007178:	b928      	cbnz	r0, 8007186 <__i2b+0x1a>
 800717a:	f240 1145 	movw	r1, #325	; 0x145
 800717e:	4b04      	ldr	r3, [pc, #16]	; (8007190 <__i2b+0x24>)
 8007180:	4804      	ldr	r0, [pc, #16]	; (8007194 <__i2b+0x28>)
 8007182:	f000 fd03 	bl	8007b8c <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	6144      	str	r4, [r0, #20]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	08007e96 	.word	0x08007e96
 8007194:	08007ea7 	.word	0x08007ea7

08007198 <__multiply>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4691      	mov	r9, r2
 800719e:	690a      	ldr	r2, [r1, #16]
 80071a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a4:	460c      	mov	r4, r1
 80071a6:	429a      	cmp	r2, r3
 80071a8:	bfbe      	ittt	lt
 80071aa:	460b      	movlt	r3, r1
 80071ac:	464c      	movlt	r4, r9
 80071ae:	4699      	movlt	r9, r3
 80071b0:	6927      	ldr	r7, [r4, #16]
 80071b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	6861      	ldr	r1, [r4, #4]
 80071ba:	eb07 060a 	add.w	r6, r7, sl
 80071be:	42b3      	cmp	r3, r6
 80071c0:	b085      	sub	sp, #20
 80071c2:	bfb8      	it	lt
 80071c4:	3101      	addlt	r1, #1
 80071c6:	f7ff fedb 	bl	8006f80 <_Balloc>
 80071ca:	b930      	cbnz	r0, 80071da <__multiply+0x42>
 80071cc:	4602      	mov	r2, r0
 80071ce:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071d2:	4b43      	ldr	r3, [pc, #268]	; (80072e0 <__multiply+0x148>)
 80071d4:	4843      	ldr	r0, [pc, #268]	; (80072e4 <__multiply+0x14c>)
 80071d6:	f000 fcd9 	bl	8007b8c <__assert_func>
 80071da:	f100 0514 	add.w	r5, r0, #20
 80071de:	462b      	mov	r3, r5
 80071e0:	2200      	movs	r2, #0
 80071e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e6:	4543      	cmp	r3, r8
 80071e8:	d321      	bcc.n	800722e <__multiply+0x96>
 80071ea:	f104 0314 	add.w	r3, r4, #20
 80071ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f2:	f109 0314 	add.w	r3, r9, #20
 80071f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fa:	9202      	str	r2, [sp, #8]
 80071fc:	1b3a      	subs	r2, r7, r4
 80071fe:	3a15      	subs	r2, #21
 8007200:	f022 0203 	bic.w	r2, r2, #3
 8007204:	3204      	adds	r2, #4
 8007206:	f104 0115 	add.w	r1, r4, #21
 800720a:	428f      	cmp	r7, r1
 800720c:	bf38      	it	cc
 800720e:	2204      	movcc	r2, #4
 8007210:	9201      	str	r2, [sp, #4]
 8007212:	9a02      	ldr	r2, [sp, #8]
 8007214:	9303      	str	r3, [sp, #12]
 8007216:	429a      	cmp	r2, r3
 8007218:	d80c      	bhi.n	8007234 <__multiply+0x9c>
 800721a:	2e00      	cmp	r6, #0
 800721c:	dd03      	ble.n	8007226 <__multiply+0x8e>
 800721e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007222:	2b00      	cmp	r3, #0
 8007224:	d05a      	beq.n	80072dc <__multiply+0x144>
 8007226:	6106      	str	r6, [r0, #16]
 8007228:	b005      	add	sp, #20
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	f843 2b04 	str.w	r2, [r3], #4
 8007232:	e7d8      	b.n	80071e6 <__multiply+0x4e>
 8007234:	f8b3 a000 	ldrh.w	sl, [r3]
 8007238:	f1ba 0f00 	cmp.w	sl, #0
 800723c:	d023      	beq.n	8007286 <__multiply+0xee>
 800723e:	46a9      	mov	r9, r5
 8007240:	f04f 0c00 	mov.w	ip, #0
 8007244:	f104 0e14 	add.w	lr, r4, #20
 8007248:	f85e 2b04 	ldr.w	r2, [lr], #4
 800724c:	f8d9 1000 	ldr.w	r1, [r9]
 8007250:	fa1f fb82 	uxth.w	fp, r2
 8007254:	b289      	uxth	r1, r1
 8007256:	fb0a 110b 	mla	r1, sl, fp, r1
 800725a:	4461      	add	r1, ip
 800725c:	f8d9 c000 	ldr.w	ip, [r9]
 8007260:	0c12      	lsrs	r2, r2, #16
 8007262:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007266:	fb0a c202 	mla	r2, sl, r2, ip
 800726a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800726e:	b289      	uxth	r1, r1
 8007270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007274:	4577      	cmp	r7, lr
 8007276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800727a:	f849 1b04 	str.w	r1, [r9], #4
 800727e:	d8e3      	bhi.n	8007248 <__multiply+0xb0>
 8007280:	9a01      	ldr	r2, [sp, #4]
 8007282:	f845 c002 	str.w	ip, [r5, r2]
 8007286:	9a03      	ldr	r2, [sp, #12]
 8007288:	3304      	adds	r3, #4
 800728a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800728e:	f1b9 0f00 	cmp.w	r9, #0
 8007292:	d021      	beq.n	80072d8 <__multiply+0x140>
 8007294:	46ae      	mov	lr, r5
 8007296:	f04f 0a00 	mov.w	sl, #0
 800729a:	6829      	ldr	r1, [r5, #0]
 800729c:	f104 0c14 	add.w	ip, r4, #20
 80072a0:	f8bc b000 	ldrh.w	fp, [ip]
 80072a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072a8:	b289      	uxth	r1, r1
 80072aa:	fb09 220b 	mla	r2, r9, fp, r2
 80072ae:	4452      	add	r2, sl
 80072b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072b4:	f84e 1b04 	str.w	r1, [lr], #4
 80072b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072c0:	f8be 1000 	ldrh.w	r1, [lr]
 80072c4:	4567      	cmp	r7, ip
 80072c6:	fb09 110a 	mla	r1, r9, sl, r1
 80072ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d2:	d8e5      	bhi.n	80072a0 <__multiply+0x108>
 80072d4:	9a01      	ldr	r2, [sp, #4]
 80072d6:	50a9      	str	r1, [r5, r2]
 80072d8:	3504      	adds	r5, #4
 80072da:	e79a      	b.n	8007212 <__multiply+0x7a>
 80072dc:	3e01      	subs	r6, #1
 80072de:	e79c      	b.n	800721a <__multiply+0x82>
 80072e0:	08007e96 	.word	0x08007e96
 80072e4:	08007ea7 	.word	0x08007ea7

080072e8 <__pow5mult>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	4615      	mov	r5, r2
 80072ee:	f012 0203 	ands.w	r2, r2, #3
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	d007      	beq.n	8007308 <__pow5mult+0x20>
 80072f8:	4c25      	ldr	r4, [pc, #148]	; (8007390 <__pow5mult+0xa8>)
 80072fa:	3a01      	subs	r2, #1
 80072fc:	2300      	movs	r3, #0
 80072fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007302:	f7ff fe9f 	bl	8007044 <__multadd>
 8007306:	4607      	mov	r7, r0
 8007308:	10ad      	asrs	r5, r5, #2
 800730a:	d03d      	beq.n	8007388 <__pow5mult+0xa0>
 800730c:	69f4      	ldr	r4, [r6, #28]
 800730e:	b97c      	cbnz	r4, 8007330 <__pow5mult+0x48>
 8007310:	2010      	movs	r0, #16
 8007312:	f7ff fd81 	bl	8006e18 <malloc>
 8007316:	4602      	mov	r2, r0
 8007318:	61f0      	str	r0, [r6, #28]
 800731a:	b928      	cbnz	r0, 8007328 <__pow5mult+0x40>
 800731c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <__pow5mult+0xac>)
 8007322:	481d      	ldr	r0, [pc, #116]	; (8007398 <__pow5mult+0xb0>)
 8007324:	f000 fc32 	bl	8007b8c <__assert_func>
 8007328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800732c:	6004      	str	r4, [r0, #0]
 800732e:	60c4      	str	r4, [r0, #12]
 8007330:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007338:	b94c      	cbnz	r4, 800734e <__pow5mult+0x66>
 800733a:	f240 2171 	movw	r1, #625	; 0x271
 800733e:	4630      	mov	r0, r6
 8007340:	f7ff ff14 	bl	800716c <__i2b>
 8007344:	2300      	movs	r3, #0
 8007346:	4604      	mov	r4, r0
 8007348:	f8c8 0008 	str.w	r0, [r8, #8]
 800734c:	6003      	str	r3, [r0, #0]
 800734e:	f04f 0900 	mov.w	r9, #0
 8007352:	07eb      	lsls	r3, r5, #31
 8007354:	d50a      	bpl.n	800736c <__pow5mult+0x84>
 8007356:	4639      	mov	r1, r7
 8007358:	4622      	mov	r2, r4
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ff1c 	bl	8007198 <__multiply>
 8007360:	4680      	mov	r8, r0
 8007362:	4639      	mov	r1, r7
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff fe4b 	bl	8007000 <_Bfree>
 800736a:	4647      	mov	r7, r8
 800736c:	106d      	asrs	r5, r5, #1
 800736e:	d00b      	beq.n	8007388 <__pow5mult+0xa0>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	b938      	cbnz	r0, 8007384 <__pow5mult+0x9c>
 8007374:	4622      	mov	r2, r4
 8007376:	4621      	mov	r1, r4
 8007378:	4630      	mov	r0, r6
 800737a:	f7ff ff0d 	bl	8007198 <__multiply>
 800737e:	6020      	str	r0, [r4, #0]
 8007380:	f8c0 9000 	str.w	r9, [r0]
 8007384:	4604      	mov	r4, r0
 8007386:	e7e4      	b.n	8007352 <__pow5mult+0x6a>
 8007388:	4638      	mov	r0, r7
 800738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738e:	bf00      	nop
 8007390:	08007ff0 	.word	0x08007ff0
 8007394:	08007e27 	.word	0x08007e27
 8007398:	08007ea7 	.word	0x08007ea7

0800739c <__lshift>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	4607      	mov	r7, r0
 80073a4:	4691      	mov	r9, r2
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	6849      	ldr	r1, [r1, #4]
 80073aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b4:	f108 0601 	add.w	r6, r8, #1
 80073b8:	42b3      	cmp	r3, r6
 80073ba:	db0b      	blt.n	80073d4 <__lshift+0x38>
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff fddf 	bl	8006f80 <_Balloc>
 80073c2:	4605      	mov	r5, r0
 80073c4:	b948      	cbnz	r0, 80073da <__lshift+0x3e>
 80073c6:	4602      	mov	r2, r0
 80073c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073cc:	4b27      	ldr	r3, [pc, #156]	; (800746c <__lshift+0xd0>)
 80073ce:	4828      	ldr	r0, [pc, #160]	; (8007470 <__lshift+0xd4>)
 80073d0:	f000 fbdc 	bl	8007b8c <__assert_func>
 80073d4:	3101      	adds	r1, #1
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	e7ee      	b.n	80073b8 <__lshift+0x1c>
 80073da:	2300      	movs	r3, #0
 80073dc:	f100 0114 	add.w	r1, r0, #20
 80073e0:	f100 0210 	add.w	r2, r0, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	4553      	cmp	r3, sl
 80073e8:	db33      	blt.n	8007452 <__lshift+0xb6>
 80073ea:	6920      	ldr	r0, [r4, #16]
 80073ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f0:	f104 0314 	add.w	r3, r4, #20
 80073f4:	f019 091f 	ands.w	r9, r9, #31
 80073f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007400:	d02b      	beq.n	800745a <__lshift+0xbe>
 8007402:	468a      	mov	sl, r1
 8007404:	2200      	movs	r2, #0
 8007406:	f1c9 0e20 	rsb	lr, r9, #32
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	fa00 f009 	lsl.w	r0, r0, r9
 8007410:	4310      	orrs	r0, r2
 8007412:	f84a 0b04 	str.w	r0, [sl], #4
 8007416:	f853 2b04 	ldr.w	r2, [r3], #4
 800741a:	459c      	cmp	ip, r3
 800741c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007420:	d8f3      	bhi.n	800740a <__lshift+0x6e>
 8007422:	ebac 0304 	sub.w	r3, ip, r4
 8007426:	3b15      	subs	r3, #21
 8007428:	f023 0303 	bic.w	r3, r3, #3
 800742c:	3304      	adds	r3, #4
 800742e:	f104 0015 	add.w	r0, r4, #21
 8007432:	4584      	cmp	ip, r0
 8007434:	bf38      	it	cc
 8007436:	2304      	movcc	r3, #4
 8007438:	50ca      	str	r2, [r1, r3]
 800743a:	b10a      	cbz	r2, 8007440 <__lshift+0xa4>
 800743c:	f108 0602 	add.w	r6, r8, #2
 8007440:	3e01      	subs	r6, #1
 8007442:	4638      	mov	r0, r7
 8007444:	4621      	mov	r1, r4
 8007446:	612e      	str	r6, [r5, #16]
 8007448:	f7ff fdda 	bl	8007000 <_Bfree>
 800744c:	4628      	mov	r0, r5
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	f842 0f04 	str.w	r0, [r2, #4]!
 8007456:	3301      	adds	r3, #1
 8007458:	e7c5      	b.n	80073e6 <__lshift+0x4a>
 800745a:	3904      	subs	r1, #4
 800745c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007460:	459c      	cmp	ip, r3
 8007462:	f841 2f04 	str.w	r2, [r1, #4]!
 8007466:	d8f9      	bhi.n	800745c <__lshift+0xc0>
 8007468:	e7ea      	b.n	8007440 <__lshift+0xa4>
 800746a:	bf00      	nop
 800746c:	08007e96 	.word	0x08007e96
 8007470:	08007ea7 	.word	0x08007ea7

08007474 <__mcmp>:
 8007474:	4603      	mov	r3, r0
 8007476:	690a      	ldr	r2, [r1, #16]
 8007478:	6900      	ldr	r0, [r0, #16]
 800747a:	b530      	push	{r4, r5, lr}
 800747c:	1a80      	subs	r0, r0, r2
 800747e:	d10d      	bne.n	800749c <__mcmp+0x28>
 8007480:	3314      	adds	r3, #20
 8007482:	3114      	adds	r1, #20
 8007484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800748c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007494:	4295      	cmp	r5, r2
 8007496:	d002      	beq.n	800749e <__mcmp+0x2a>
 8007498:	d304      	bcc.n	80074a4 <__mcmp+0x30>
 800749a:	2001      	movs	r0, #1
 800749c:	bd30      	pop	{r4, r5, pc}
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d3f4      	bcc.n	800748c <__mcmp+0x18>
 80074a2:	e7fb      	b.n	800749c <__mcmp+0x28>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	e7f8      	b.n	800749c <__mcmp+0x28>
	...

080074ac <__mdiff>:
 80074ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460d      	mov	r5, r1
 80074b2:	4607      	mov	r7, r0
 80074b4:	4611      	mov	r1, r2
 80074b6:	4628      	mov	r0, r5
 80074b8:	4614      	mov	r4, r2
 80074ba:	f7ff ffdb 	bl	8007474 <__mcmp>
 80074be:	1e06      	subs	r6, r0, #0
 80074c0:	d111      	bne.n	80074e6 <__mdiff+0x3a>
 80074c2:	4631      	mov	r1, r6
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fd5b 	bl	8006f80 <_Balloc>
 80074ca:	4602      	mov	r2, r0
 80074cc:	b928      	cbnz	r0, 80074da <__mdiff+0x2e>
 80074ce:	f240 2137 	movw	r1, #567	; 0x237
 80074d2:	4b3a      	ldr	r3, [pc, #232]	; (80075bc <__mdiff+0x110>)
 80074d4:	483a      	ldr	r0, [pc, #232]	; (80075c0 <__mdiff+0x114>)
 80074d6:	f000 fb59 	bl	8007b8c <__assert_func>
 80074da:	2301      	movs	r3, #1
 80074dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074e0:	4610      	mov	r0, r2
 80074e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	bfa4      	itt	ge
 80074e8:	4623      	movge	r3, r4
 80074ea:	462c      	movge	r4, r5
 80074ec:	4638      	mov	r0, r7
 80074ee:	6861      	ldr	r1, [r4, #4]
 80074f0:	bfa6      	itte	ge
 80074f2:	461d      	movge	r5, r3
 80074f4:	2600      	movge	r6, #0
 80074f6:	2601      	movlt	r6, #1
 80074f8:	f7ff fd42 	bl	8006f80 <_Balloc>
 80074fc:	4602      	mov	r2, r0
 80074fe:	b918      	cbnz	r0, 8007508 <__mdiff+0x5c>
 8007500:	f240 2145 	movw	r1, #581	; 0x245
 8007504:	4b2d      	ldr	r3, [pc, #180]	; (80075bc <__mdiff+0x110>)
 8007506:	e7e5      	b.n	80074d4 <__mdiff+0x28>
 8007508:	f102 0814 	add.w	r8, r2, #20
 800750c:	46c2      	mov	sl, r8
 800750e:	f04f 0c00 	mov.w	ip, #0
 8007512:	6927      	ldr	r7, [r4, #16]
 8007514:	60c6      	str	r6, [r0, #12]
 8007516:	692e      	ldr	r6, [r5, #16]
 8007518:	f104 0014 	add.w	r0, r4, #20
 800751c:	f105 0914 	add.w	r9, r5, #20
 8007520:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007524:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007528:	3410      	adds	r4, #16
 800752a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800752e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007532:	fa1f f18b 	uxth.w	r1, fp
 8007536:	4461      	add	r1, ip
 8007538:	fa1f fc83 	uxth.w	ip, r3
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	eba1 010c 	sub.w	r1, r1, ip
 8007542:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007546:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800754a:	b289      	uxth	r1, r1
 800754c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007550:	454e      	cmp	r6, r9
 8007552:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007556:	f84a 1b04 	str.w	r1, [sl], #4
 800755a:	d8e6      	bhi.n	800752a <__mdiff+0x7e>
 800755c:	1b73      	subs	r3, r6, r5
 800755e:	3b15      	subs	r3, #21
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	3515      	adds	r5, #21
 8007566:	3304      	adds	r3, #4
 8007568:	42ae      	cmp	r6, r5
 800756a:	bf38      	it	cc
 800756c:	2304      	movcc	r3, #4
 800756e:	4418      	add	r0, r3
 8007570:	4443      	add	r3, r8
 8007572:	461e      	mov	r6, r3
 8007574:	4605      	mov	r5, r0
 8007576:	4575      	cmp	r5, lr
 8007578:	d30e      	bcc.n	8007598 <__mdiff+0xec>
 800757a:	f10e 0103 	add.w	r1, lr, #3
 800757e:	1a09      	subs	r1, r1, r0
 8007580:	f021 0103 	bic.w	r1, r1, #3
 8007584:	3803      	subs	r0, #3
 8007586:	4586      	cmp	lr, r0
 8007588:	bf38      	it	cc
 800758a:	2100      	movcc	r1, #0
 800758c:	440b      	add	r3, r1
 800758e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007592:	b189      	cbz	r1, 80075b8 <__mdiff+0x10c>
 8007594:	6117      	str	r7, [r2, #16]
 8007596:	e7a3      	b.n	80074e0 <__mdiff+0x34>
 8007598:	f855 8b04 	ldr.w	r8, [r5], #4
 800759c:	fa1f f188 	uxth.w	r1, r8
 80075a0:	4461      	add	r1, ip
 80075a2:	140c      	asrs	r4, r1, #16
 80075a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075a8:	b289      	uxth	r1, r1
 80075aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075ae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80075b2:	f846 1b04 	str.w	r1, [r6], #4
 80075b6:	e7de      	b.n	8007576 <__mdiff+0xca>
 80075b8:	3f01      	subs	r7, #1
 80075ba:	e7e8      	b.n	800758e <__mdiff+0xe2>
 80075bc:	08007e96 	.word	0x08007e96
 80075c0:	08007ea7 	.word	0x08007ea7

080075c4 <__d2b>:
 80075c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c6:	2101      	movs	r1, #1
 80075c8:	4617      	mov	r7, r2
 80075ca:	461c      	mov	r4, r3
 80075cc:	9e08      	ldr	r6, [sp, #32]
 80075ce:	f7ff fcd7 	bl	8006f80 <_Balloc>
 80075d2:	4605      	mov	r5, r0
 80075d4:	b930      	cbnz	r0, 80075e4 <__d2b+0x20>
 80075d6:	4602      	mov	r2, r0
 80075d8:	f240 310f 	movw	r1, #783	; 0x30f
 80075dc:	4b22      	ldr	r3, [pc, #136]	; (8007668 <__d2b+0xa4>)
 80075de:	4823      	ldr	r0, [pc, #140]	; (800766c <__d2b+0xa8>)
 80075e0:	f000 fad4 	bl	8007b8c <__assert_func>
 80075e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80075e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80075ec:	bb24      	cbnz	r4, 8007638 <__d2b+0x74>
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	d026      	beq.n	8007642 <__d2b+0x7e>
 80075f4:	4668      	mov	r0, sp
 80075f6:	9700      	str	r7, [sp, #0]
 80075f8:	f7ff fd8a 	bl	8007110 <__lo0bits>
 80075fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007600:	b1e8      	cbz	r0, 800763e <__d2b+0x7a>
 8007602:	f1c0 0320 	rsb	r3, r0, #32
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	430b      	orrs	r3, r1
 800760c:	40c2      	lsrs	r2, r0
 800760e:	616b      	str	r3, [r5, #20]
 8007610:	9201      	str	r2, [sp, #4]
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf14      	ite	ne
 8007618:	2102      	movne	r1, #2
 800761a:	2101      	moveq	r1, #1
 800761c:	61ab      	str	r3, [r5, #24]
 800761e:	6129      	str	r1, [r5, #16]
 8007620:	b1bc      	cbz	r4, 8007652 <__d2b+0x8e>
 8007622:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007626:	4404      	add	r4, r0
 8007628:	6034      	str	r4, [r6, #0]
 800762a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	6018      	str	r0, [r3, #0]
 8007632:	4628      	mov	r0, r5
 8007634:	b003      	add	sp, #12
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763c:	e7d7      	b.n	80075ee <__d2b+0x2a>
 800763e:	6169      	str	r1, [r5, #20]
 8007640:	e7e7      	b.n	8007612 <__d2b+0x4e>
 8007642:	a801      	add	r0, sp, #4
 8007644:	f7ff fd64 	bl	8007110 <__lo0bits>
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	2101      	movs	r1, #1
 800764c:	616b      	str	r3, [r5, #20]
 800764e:	3020      	adds	r0, #32
 8007650:	e7e5      	b.n	800761e <__d2b+0x5a>
 8007652:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007656:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800765a:	6030      	str	r0, [r6, #0]
 800765c:	6918      	ldr	r0, [r3, #16]
 800765e:	f7ff fd37 	bl	80070d0 <__hi0bits>
 8007662:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007666:	e7e2      	b.n	800762e <__d2b+0x6a>
 8007668:	08007e96 	.word	0x08007e96
 800766c:	08007ea7 	.word	0x08007ea7

08007670 <__sfputc_r>:
 8007670:	6893      	ldr	r3, [r2, #8]
 8007672:	b410      	push	{r4}
 8007674:	3b01      	subs	r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	6093      	str	r3, [r2, #8]
 800767a:	da07      	bge.n	800768c <__sfputc_r+0x1c>
 800767c:	6994      	ldr	r4, [r2, #24]
 800767e:	42a3      	cmp	r3, r4
 8007680:	db01      	blt.n	8007686 <__sfputc_r+0x16>
 8007682:	290a      	cmp	r1, #10
 8007684:	d102      	bne.n	800768c <__sfputc_r+0x1c>
 8007686:	bc10      	pop	{r4}
 8007688:	f7fe bbef 	b.w	8005e6a <__swbuf_r>
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	1c58      	adds	r0, r3, #1
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	4608      	mov	r0, r1
 8007696:	bc10      	pop	{r4}
 8007698:	4770      	bx	lr

0800769a <__sfputs_r>:
 800769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	18d5      	adds	r5, r2, r3
 80076a4:	42ac      	cmp	r4, r5
 80076a6:	d101      	bne.n	80076ac <__sfputs_r+0x12>
 80076a8:	2000      	movs	r0, #0
 80076aa:	e007      	b.n	80076bc <__sfputs_r+0x22>
 80076ac:	463a      	mov	r2, r7
 80076ae:	4630      	mov	r0, r6
 80076b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b4:	f7ff ffdc 	bl	8007670 <__sfputc_r>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d1f3      	bne.n	80076a4 <__sfputs_r+0xa>
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076c0 <_vfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460d      	mov	r5, r1
 80076c6:	4614      	mov	r4, r2
 80076c8:	4698      	mov	r8, r3
 80076ca:	4606      	mov	r6, r0
 80076cc:	b09d      	sub	sp, #116	; 0x74
 80076ce:	b118      	cbz	r0, 80076d8 <_vfiprintf_r+0x18>
 80076d0:	6a03      	ldr	r3, [r0, #32]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_vfiprintf_r+0x18>
 80076d4:	f7fe fae2 	bl	8005c9c <__sinit>
 80076d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e6:	f7fe fcd2 	bl	800608e <__retarget_lock_acquire_recursive>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	071b      	lsls	r3, r3, #28
 80076ee:	d501      	bpl.n	80076f4 <_vfiprintf_r+0x34>
 80076f0:	692b      	ldr	r3, [r5, #16]
 80076f2:	b99b      	cbnz	r3, 800771c <_vfiprintf_r+0x5c>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7fe fbf4 	bl	8005ee4 <__swsetup_r>
 80076fc:	b170      	cbz	r0, 800771c <_vfiprintf_r+0x5c>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007700:	07dc      	lsls	r4, r3, #31
 8007702:	d504      	bpl.n	800770e <_vfiprintf_r+0x4e>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b01d      	add	sp, #116	; 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d4f7      	bmi.n	8007704 <_vfiprintf_r+0x44>
 8007714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007716:	f7fe fcbb 	bl	8006090 <__retarget_lock_release_recursive>
 800771a:	e7f3      	b.n	8007704 <_vfiprintf_r+0x44>
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007726:	2330      	movs	r3, #48	; 0x30
 8007728:	f04f 0901 	mov.w	r9, #1
 800772c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007730:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80078e0 <_vfiprintf_r+0x220>
 8007734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007738:	4623      	mov	r3, r4
 800773a:	469a      	mov	sl, r3
 800773c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007740:	b10a      	cbz	r2, 8007746 <_vfiprintf_r+0x86>
 8007742:	2a25      	cmp	r2, #37	; 0x25
 8007744:	d1f9      	bne.n	800773a <_vfiprintf_r+0x7a>
 8007746:	ebba 0b04 	subs.w	fp, sl, r4
 800774a:	d00b      	beq.n	8007764 <_vfiprintf_r+0xa4>
 800774c:	465b      	mov	r3, fp
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ffa1 	bl	800769a <__sfputs_r>
 8007758:	3001      	adds	r0, #1
 800775a:	f000 80a9 	beq.w	80078b0 <_vfiprintf_r+0x1f0>
 800775e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007760:	445a      	add	r2, fp
 8007762:	9209      	str	r2, [sp, #36]	; 0x24
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80a1 	beq.w	80078b0 <_vfiprintf_r+0x1f0>
 800776e:	2300      	movs	r3, #0
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007784:	931a      	str	r3, [sp, #104]	; 0x68
 8007786:	4654      	mov	r4, sl
 8007788:	2205      	movs	r2, #5
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4854      	ldr	r0, [pc, #336]	; (80078e0 <_vfiprintf_r+0x220>)
 8007790:	f7fe fc7f 	bl	8006092 <memchr>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	b9d8      	cbnz	r0, 80077d0 <_vfiprintf_r+0x110>
 8007798:	06d1      	lsls	r1, r2, #27
 800779a:	bf44      	itt	mi
 800779c:	2320      	movmi	r3, #32
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a2:	0713      	lsls	r3, r2, #28
 80077a4:	bf44      	itt	mi
 80077a6:	232b      	movmi	r3, #43	; 0x2b
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b2a      	cmp	r3, #42	; 0x2a
 80077b2:	d015      	beq.n	80077e0 <_vfiprintf_r+0x120>
 80077b4:	4654      	mov	r4, sl
 80077b6:	2000      	movs	r0, #0
 80077b8:	f04f 0c0a 	mov.w	ip, #10
 80077bc:	9a07      	ldr	r2, [sp, #28]
 80077be:	4621      	mov	r1, r4
 80077c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c4:	3b30      	subs	r3, #48	; 0x30
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d94d      	bls.n	8007866 <_vfiprintf_r+0x1a6>
 80077ca:	b1b0      	cbz	r0, 80077fa <_vfiprintf_r+0x13a>
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	e014      	b.n	80077fa <_vfiprintf_r+0x13a>
 80077d0:	eba0 0308 	sub.w	r3, r0, r8
 80077d4:	fa09 f303 	lsl.w	r3, r9, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	46a2      	mov	sl, r4
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	e7d2      	b.n	8007786 <_vfiprintf_r+0xc6>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d19      	adds	r1, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbb      	ittet	lt
 80077ec:	425b      	neglt	r3, r3
 80077ee:	f042 0202 	orrlt.w	r2, r2, #2
 80077f2:	9307      	strge	r3, [sp, #28]
 80077f4:	9307      	strlt	r3, [sp, #28]
 80077f6:	bfb8      	it	lt
 80077f8:	9204      	strlt	r2, [sp, #16]
 80077fa:	7823      	ldrb	r3, [r4, #0]
 80077fc:	2b2e      	cmp	r3, #46	; 0x2e
 80077fe:	d10c      	bne.n	800781a <_vfiprintf_r+0x15a>
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	2b2a      	cmp	r3, #42	; 0x2a
 8007804:	d134      	bne.n	8007870 <_vfiprintf_r+0x1b0>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	3402      	adds	r4, #2
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9203      	str	r2, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfb8      	it	lt
 8007814:	f04f 33ff 	movlt.w	r3, #4294967295
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078e4 <_vfiprintf_r+0x224>
 800781e:	2203      	movs	r2, #3
 8007820:	4650      	mov	r0, sl
 8007822:	7821      	ldrb	r1, [r4, #0]
 8007824:	f7fe fc35 	bl	8006092 <memchr>
 8007828:	b138      	cbz	r0, 800783a <_vfiprintf_r+0x17a>
 800782a:	2240      	movs	r2, #64	; 0x40
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	eba0 000a 	sub.w	r0, r0, sl
 8007832:	4082      	lsls	r2, r0
 8007834:	4313      	orrs	r3, r2
 8007836:	3401      	adds	r4, #1
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	2206      	movs	r2, #6
 8007840:	4829      	ldr	r0, [pc, #164]	; (80078e8 <_vfiprintf_r+0x228>)
 8007842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007846:	f7fe fc24 	bl	8006092 <memchr>
 800784a:	2800      	cmp	r0, #0
 800784c:	d03f      	beq.n	80078ce <_vfiprintf_r+0x20e>
 800784e:	4b27      	ldr	r3, [pc, #156]	; (80078ec <_vfiprintf_r+0x22c>)
 8007850:	bb1b      	cbnz	r3, 800789a <_vfiprintf_r+0x1da>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	3307      	adds	r3, #7
 8007856:	f023 0307 	bic.w	r3, r3, #7
 800785a:	3308      	adds	r3, #8
 800785c:	9303      	str	r3, [sp, #12]
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	443b      	add	r3, r7
 8007862:	9309      	str	r3, [sp, #36]	; 0x24
 8007864:	e768      	b.n	8007738 <_vfiprintf_r+0x78>
 8007866:	460c      	mov	r4, r1
 8007868:	2001      	movs	r0, #1
 800786a:	fb0c 3202 	mla	r2, ip, r2, r3
 800786e:	e7a6      	b.n	80077be <_vfiprintf_r+0xfe>
 8007870:	2300      	movs	r3, #0
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4619      	mov	r1, r3
 8007878:	3401      	adds	r4, #1
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	4620      	mov	r0, r4
 800787e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007882:	3a30      	subs	r2, #48	; 0x30
 8007884:	2a09      	cmp	r2, #9
 8007886:	d903      	bls.n	8007890 <_vfiprintf_r+0x1d0>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0c6      	beq.n	800781a <_vfiprintf_r+0x15a>
 800788c:	9105      	str	r1, [sp, #20]
 800788e:	e7c4      	b.n	800781a <_vfiprintf_r+0x15a>
 8007890:	4604      	mov	r4, r0
 8007892:	2301      	movs	r3, #1
 8007894:	fb0c 2101 	mla	r1, ip, r1, r2
 8007898:	e7f0      	b.n	800787c <_vfiprintf_r+0x1bc>
 800789a:	ab03      	add	r3, sp, #12
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	462a      	mov	r2, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <_vfiprintf_r+0x230>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	f7fd fdab 	bl	8005400 <_printf_float>
 80078aa:	4607      	mov	r7, r0
 80078ac:	1c78      	adds	r0, r7, #1
 80078ae:	d1d6      	bne.n	800785e <_vfiprintf_r+0x19e>
 80078b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b2:	07d9      	lsls	r1, r3, #31
 80078b4:	d405      	bmi.n	80078c2 <_vfiprintf_r+0x202>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	059a      	lsls	r2, r3, #22
 80078ba:	d402      	bmi.n	80078c2 <_vfiprintf_r+0x202>
 80078bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078be:	f7fe fbe7 	bl	8006090 <__retarget_lock_release_recursive>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	065b      	lsls	r3, r3, #25
 80078c6:	f53f af1d 	bmi.w	8007704 <_vfiprintf_r+0x44>
 80078ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078cc:	e71c      	b.n	8007708 <_vfiprintf_r+0x48>
 80078ce:	ab03      	add	r3, sp, #12
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	462a      	mov	r2, r5
 80078d4:	4630      	mov	r0, r6
 80078d6:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <_vfiprintf_r+0x230>)
 80078d8:	a904      	add	r1, sp, #16
 80078da:	f7fe f831 	bl	8005940 <_printf_i>
 80078de:	e7e4      	b.n	80078aa <_vfiprintf_r+0x1ea>
 80078e0:	08007ffc 	.word	0x08007ffc
 80078e4:	08008002 	.word	0x08008002
 80078e8:	08008006 	.word	0x08008006
 80078ec:	08005401 	.word	0x08005401
 80078f0:	0800769b 	.word	0x0800769b

080078f4 <__sflush_r>:
 80078f4:	898a      	ldrh	r2, [r1, #12]
 80078f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f8:	4605      	mov	r5, r0
 80078fa:	0710      	lsls	r0, r2, #28
 80078fc:	460c      	mov	r4, r1
 80078fe:	d457      	bmi.n	80079b0 <__sflush_r+0xbc>
 8007900:	684b      	ldr	r3, [r1, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dc04      	bgt.n	8007910 <__sflush_r+0x1c>
 8007906:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc01      	bgt.n	8007910 <__sflush_r+0x1c>
 800790c:	2000      	movs	r0, #0
 800790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007912:	2e00      	cmp	r6, #0
 8007914:	d0fa      	beq.n	800790c <__sflush_r+0x18>
 8007916:	2300      	movs	r3, #0
 8007918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800791c:	682f      	ldr	r7, [r5, #0]
 800791e:	6a21      	ldr	r1, [r4, #32]
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	d032      	beq.n	800798a <__sflush_r+0x96>
 8007924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	075a      	lsls	r2, r3, #29
 800792a:	d505      	bpl.n	8007938 <__sflush_r+0x44>
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	1ac0      	subs	r0, r0, r3
 8007930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007932:	b10b      	cbz	r3, 8007938 <__sflush_r+0x44>
 8007934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007936:	1ac0      	subs	r0, r0, r3
 8007938:	2300      	movs	r3, #0
 800793a:	4602      	mov	r2, r0
 800793c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800793e:	4628      	mov	r0, r5
 8007940:	6a21      	ldr	r1, [r4, #32]
 8007942:	47b0      	blx	r6
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	d106      	bne.n	8007958 <__sflush_r+0x64>
 800794a:	6829      	ldr	r1, [r5, #0]
 800794c:	291d      	cmp	r1, #29
 800794e:	d82b      	bhi.n	80079a8 <__sflush_r+0xb4>
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <__sflush_r+0x100>)
 8007952:	410a      	asrs	r2, r1
 8007954:	07d6      	lsls	r6, r2, #31
 8007956:	d427      	bmi.n	80079a8 <__sflush_r+0xb4>
 8007958:	2200      	movs	r2, #0
 800795a:	6062      	str	r2, [r4, #4]
 800795c:	6922      	ldr	r2, [r4, #16]
 800795e:	04d9      	lsls	r1, r3, #19
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	d504      	bpl.n	800796e <__sflush_r+0x7a>
 8007964:	1c42      	adds	r2, r0, #1
 8007966:	d101      	bne.n	800796c <__sflush_r+0x78>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b903      	cbnz	r3, 800796e <__sflush_r+0x7a>
 800796c:	6560      	str	r0, [r4, #84]	; 0x54
 800796e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007970:	602f      	str	r7, [r5, #0]
 8007972:	2900      	cmp	r1, #0
 8007974:	d0ca      	beq.n	800790c <__sflush_r+0x18>
 8007976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800797a:	4299      	cmp	r1, r3
 800797c:	d002      	beq.n	8007984 <__sflush_r+0x90>
 800797e:	4628      	mov	r0, r5
 8007980:	f7ff fa02 	bl	8006d88 <_free_r>
 8007984:	2000      	movs	r0, #0
 8007986:	6360      	str	r0, [r4, #52]	; 0x34
 8007988:	e7c1      	b.n	800790e <__sflush_r+0x1a>
 800798a:	2301      	movs	r3, #1
 800798c:	4628      	mov	r0, r5
 800798e:	47b0      	blx	r6
 8007990:	1c41      	adds	r1, r0, #1
 8007992:	d1c8      	bne.n	8007926 <__sflush_r+0x32>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0c5      	beq.n	8007926 <__sflush_r+0x32>
 800799a:	2b1d      	cmp	r3, #29
 800799c:	d001      	beq.n	80079a2 <__sflush_r+0xae>
 800799e:	2b16      	cmp	r3, #22
 80079a0:	d101      	bne.n	80079a6 <__sflush_r+0xb2>
 80079a2:	602f      	str	r7, [r5, #0]
 80079a4:	e7b2      	b.n	800790c <__sflush_r+0x18>
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	e7ae      	b.n	800790e <__sflush_r+0x1a>
 80079b0:	690f      	ldr	r7, [r1, #16]
 80079b2:	2f00      	cmp	r7, #0
 80079b4:	d0aa      	beq.n	800790c <__sflush_r+0x18>
 80079b6:	0793      	lsls	r3, r2, #30
 80079b8:	bf18      	it	ne
 80079ba:	2300      	movne	r3, #0
 80079bc:	680e      	ldr	r6, [r1, #0]
 80079be:	bf08      	it	eq
 80079c0:	694b      	ldreq	r3, [r1, #20]
 80079c2:	1bf6      	subs	r6, r6, r7
 80079c4:	600f      	str	r7, [r1, #0]
 80079c6:	608b      	str	r3, [r1, #8]
 80079c8:	2e00      	cmp	r6, #0
 80079ca:	dd9f      	ble.n	800790c <__sflush_r+0x18>
 80079cc:	4633      	mov	r3, r6
 80079ce:	463a      	mov	r2, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	6a21      	ldr	r1, [r4, #32]
 80079d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80079d8:	47e0      	blx	ip
 80079da:	2800      	cmp	r0, #0
 80079dc:	dc06      	bgt.n	80079ec <__sflush_r+0xf8>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	e790      	b.n	800790e <__sflush_r+0x1a>
 80079ec:	4407      	add	r7, r0
 80079ee:	1a36      	subs	r6, r6, r0
 80079f0:	e7ea      	b.n	80079c8 <__sflush_r+0xd4>
 80079f2:	bf00      	nop
 80079f4:	dfbffffe 	.word	0xdfbffffe

080079f8 <_fflush_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	690b      	ldr	r3, [r1, #16]
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	b913      	cbnz	r3, 8007a08 <_fflush_r+0x10>
 8007a02:	2500      	movs	r5, #0
 8007a04:	4628      	mov	r0, r5
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	b118      	cbz	r0, 8007a12 <_fflush_r+0x1a>
 8007a0a:	6a03      	ldr	r3, [r0, #32]
 8007a0c:	b90b      	cbnz	r3, 8007a12 <_fflush_r+0x1a>
 8007a0e:	f7fe f945 	bl	8005c9c <__sinit>
 8007a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f3      	beq.n	8007a02 <_fflush_r+0xa>
 8007a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a1c:	07d0      	lsls	r0, r2, #31
 8007a1e:	d404      	bmi.n	8007a2a <_fflush_r+0x32>
 8007a20:	0599      	lsls	r1, r3, #22
 8007a22:	d402      	bmi.n	8007a2a <_fflush_r+0x32>
 8007a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a26:	f7fe fb32 	bl	800608e <__retarget_lock_acquire_recursive>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f7ff ff61 	bl	80078f4 <__sflush_r>
 8007a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a34:	4605      	mov	r5, r0
 8007a36:	07da      	lsls	r2, r3, #31
 8007a38:	d4e4      	bmi.n	8007a04 <_fflush_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	059b      	lsls	r3, r3, #22
 8007a3e:	d4e1      	bmi.n	8007a04 <_fflush_r+0xc>
 8007a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a42:	f7fe fb25 	bl	8006090 <__retarget_lock_release_recursive>
 8007a46:	e7dd      	b.n	8007a04 <_fflush_r+0xc>

08007a48 <__swhatbuf_r>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a50:	4615      	mov	r5, r2
 8007a52:	2900      	cmp	r1, #0
 8007a54:	461e      	mov	r6, r3
 8007a56:	b096      	sub	sp, #88	; 0x58
 8007a58:	da0c      	bge.n	8007a74 <__swhatbuf_r+0x2c>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a62:	bf0c      	ite	eq
 8007a64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a68:	2340      	movne	r3, #64	; 0x40
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	6031      	str	r1, [r6, #0]
 8007a6e:	602b      	str	r3, [r5, #0]
 8007a70:	b016      	add	sp, #88	; 0x58
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	466a      	mov	r2, sp
 8007a76:	f000 f849 	bl	8007b0c <_fstat_r>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	dbed      	blt.n	8007a5a <__swhatbuf_r+0x12>
 8007a7e:	9901      	ldr	r1, [sp, #4]
 8007a80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a88:	4259      	negs	r1, r3
 8007a8a:	4159      	adcs	r1, r3
 8007a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a90:	e7eb      	b.n	8007a6a <__swhatbuf_r+0x22>

08007a92 <__smakebuf_r>:
 8007a92:	898b      	ldrh	r3, [r1, #12]
 8007a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a96:	079d      	lsls	r5, r3, #30
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	d507      	bpl.n	8007aae <__smakebuf_r+0x1c>
 8007a9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	b002      	add	sp, #8
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	466a      	mov	r2, sp
 8007ab0:	ab01      	add	r3, sp, #4
 8007ab2:	f7ff ffc9 	bl	8007a48 <__swhatbuf_r>
 8007ab6:	9900      	ldr	r1, [sp, #0]
 8007ab8:	4605      	mov	r5, r0
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff f9d4 	bl	8006e68 <_malloc_r>
 8007ac0:	b948      	cbnz	r0, 8007ad6 <__smakebuf_r+0x44>
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	059a      	lsls	r2, r3, #22
 8007ac8:	d4ef      	bmi.n	8007aaa <__smakebuf_r+0x18>
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	f043 0302 	orr.w	r3, r3, #2
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	e7e3      	b.n	8007a9e <__smakebuf_r+0xc>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	6020      	str	r0, [r4, #0]
 8007ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	6120      	str	r0, [r4, #16]
 8007ae4:	6163      	str	r3, [r4, #20]
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	b15b      	cbz	r3, 8007b02 <__smakebuf_r+0x70>
 8007aea:	4630      	mov	r0, r6
 8007aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007af0:	f000 f81e 	bl	8007b30 <_isatty_r>
 8007af4:	b128      	cbz	r0, 8007b02 <__smakebuf_r+0x70>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f023 0303 	bic.w	r3, r3, #3
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	431d      	orrs	r5, r3
 8007b06:	81a5      	strh	r5, [r4, #12]
 8007b08:	e7cf      	b.n	8007aaa <__smakebuf_r+0x18>
	...

08007b0c <_fstat_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4d06      	ldr	r5, [pc, #24]	; (8007b2c <_fstat_r+0x20>)
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	f7fa f9de 	bl	8001eda <_fstat>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	d102      	bne.n	8007b28 <_fstat_r+0x1c>
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	b103      	cbz	r3, 8007b28 <_fstat_r+0x1c>
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20000474 	.word	0x20000474

08007b30 <_isatty_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	2300      	movs	r3, #0
 8007b34:	4d05      	ldr	r5, [pc, #20]	; (8007b4c <_isatty_r+0x1c>)
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fa f9dc 	bl	8001ef8 <_isatty>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_isatty_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_isatty_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000474 	.word	0x20000474

08007b50 <_sbrk_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	2300      	movs	r3, #0
 8007b54:	4d05      	ldr	r5, [pc, #20]	; (8007b6c <_sbrk_r+0x1c>)
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7fa f9e2 	bl	8001f24 <_sbrk>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_sbrk_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_sbrk_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000474 	.word	0x20000474

08007b70 <memcpy>:
 8007b70:	440a      	add	r2, r1
 8007b72:	4291      	cmp	r1, r2
 8007b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	4770      	bx	lr
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b82:	4291      	cmp	r1, r2
 8007b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b88:	d1f9      	bne.n	8007b7e <memcpy+0xe>
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <__assert_func>:
 8007b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b8e:	4614      	mov	r4, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <__assert_func+0x2c>)
 8007b94:	4605      	mov	r5, r0
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68d8      	ldr	r0, [r3, #12]
 8007b9a:	b14c      	cbz	r4, 8007bb0 <__assert_func+0x24>
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <__assert_func+0x30>)
 8007b9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ba2:	9100      	str	r1, [sp, #0]
 8007ba4:	462b      	mov	r3, r5
 8007ba6:	4906      	ldr	r1, [pc, #24]	; (8007bc0 <__assert_func+0x34>)
 8007ba8:	f000 f842 	bl	8007c30 <fiprintf>
 8007bac:	f000 f852 	bl	8007c54 <abort>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <__assert_func+0x38>)
 8007bb2:	461c      	mov	r4, r3
 8007bb4:	e7f3      	b.n	8007b9e <__assert_func+0x12>
 8007bb6:	bf00      	nop
 8007bb8:	20000064 	.word	0x20000064
 8007bbc:	08008017 	.word	0x08008017
 8007bc0:	08008024 	.word	0x08008024
 8007bc4:	08008052 	.word	0x08008052

08007bc8 <_calloc_r>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	fba1 5402 	umull	r5, r4, r1, r2
 8007bce:	b934      	cbnz	r4, 8007bde <_calloc_r+0x16>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7ff f949 	bl	8006e68 <_malloc_r>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <_calloc_r+0x1e>
 8007bda:	4630      	mov	r0, r6
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
 8007bde:	220c      	movs	r2, #12
 8007be0:	2600      	movs	r6, #0
 8007be2:	6002      	str	r2, [r0, #0]
 8007be4:	e7f9      	b.n	8007bda <_calloc_r+0x12>
 8007be6:	462a      	mov	r2, r5
 8007be8:	4621      	mov	r1, r4
 8007bea:	f7fe f9d3 	bl	8005f94 <memset>
 8007bee:	e7f4      	b.n	8007bda <_calloc_r+0x12>

08007bf0 <__ascii_mbtowc>:
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	b901      	cbnz	r1, 8007bf6 <__ascii_mbtowc+0x6>
 8007bf4:	a901      	add	r1, sp, #4
 8007bf6:	b142      	cbz	r2, 8007c0a <__ascii_mbtowc+0x1a>
 8007bf8:	b14b      	cbz	r3, 8007c0e <__ascii_mbtowc+0x1e>
 8007bfa:	7813      	ldrb	r3, [r2, #0]
 8007bfc:	600b      	str	r3, [r1, #0]
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	1e10      	subs	r0, r2, #0
 8007c02:	bf18      	it	ne
 8007c04:	2001      	movne	r0, #1
 8007c06:	b002      	add	sp, #8
 8007c08:	4770      	bx	lr
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	e7fb      	b.n	8007c06 <__ascii_mbtowc+0x16>
 8007c0e:	f06f 0001 	mvn.w	r0, #1
 8007c12:	e7f8      	b.n	8007c06 <__ascii_mbtowc+0x16>

08007c14 <__ascii_wctomb>:
 8007c14:	4603      	mov	r3, r0
 8007c16:	4608      	mov	r0, r1
 8007c18:	b141      	cbz	r1, 8007c2c <__ascii_wctomb+0x18>
 8007c1a:	2aff      	cmp	r2, #255	; 0xff
 8007c1c:	d904      	bls.n	8007c28 <__ascii_wctomb+0x14>
 8007c1e:	228a      	movs	r2, #138	; 0x8a
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	4770      	bx	lr
 8007c28:	2001      	movs	r0, #1
 8007c2a:	700a      	strb	r2, [r1, #0]
 8007c2c:	4770      	bx	lr
	...

08007c30 <fiprintf>:
 8007c30:	b40e      	push	{r1, r2, r3}
 8007c32:	b503      	push	{r0, r1, lr}
 8007c34:	4601      	mov	r1, r0
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	4805      	ldr	r0, [pc, #20]	; (8007c50 <fiprintf+0x20>)
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	f7ff fd3d 	bl	80076c0 <_vfiprintf_r>
 8007c46:	b002      	add	sp, #8
 8007c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4c:	b003      	add	sp, #12
 8007c4e:	4770      	bx	lr
 8007c50:	20000064 	.word	0x20000064

08007c54 <abort>:
 8007c54:	2006      	movs	r0, #6
 8007c56:	b508      	push	{r3, lr}
 8007c58:	f000 f82c 	bl	8007cb4 <raise>
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	f7fa f8ee 	bl	8001e3e <_exit>

08007c62 <_raise_r>:
 8007c62:	291f      	cmp	r1, #31
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	460d      	mov	r5, r1
 8007c6a:	d904      	bls.n	8007c76 <_raise_r+0x14>
 8007c6c:	2316      	movs	r3, #22
 8007c6e:	6003      	str	r3, [r0, #0]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c78:	b112      	cbz	r2, 8007c80 <_raise_r+0x1e>
 8007c7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c7e:	b94b      	cbnz	r3, 8007c94 <_raise_r+0x32>
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 f831 	bl	8007ce8 <_getpid_r>
 8007c86:	462a      	mov	r2, r5
 8007c88:	4601      	mov	r1, r0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b818 	b.w	8007cc4 <_kill_r>
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00a      	beq.n	8007cae <_raise_r+0x4c>
 8007c98:	1c59      	adds	r1, r3, #1
 8007c9a:	d103      	bne.n	8007ca4 <_raise_r+0x42>
 8007c9c:	2316      	movs	r3, #22
 8007c9e:	6003      	str	r3, [r0, #0]
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	e7e7      	b.n	8007c74 <_raise_r+0x12>
 8007ca4:	2400      	movs	r4, #0
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cac:	4798      	blx	r3
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e7e0      	b.n	8007c74 <_raise_r+0x12>
	...

08007cb4 <raise>:
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <raise+0xc>)
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f7ff bfd2 	b.w	8007c62 <_raise_r>
 8007cbe:	bf00      	nop
 8007cc0:	20000064 	.word	0x20000064

08007cc4 <_kill_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4d06      	ldr	r5, [pc, #24]	; (8007ce4 <_kill_r+0x20>)
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	f7fa f8a4 	bl	8001e1e <_kill>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	d102      	bne.n	8007ce0 <_kill_r+0x1c>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	b103      	cbz	r3, 8007ce0 <_kill_r+0x1c>
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000474 	.word	0x20000474

08007ce8 <_getpid_r>:
 8007ce8:	f7fa b892 	b.w	8001e10 <_getpid>

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr
